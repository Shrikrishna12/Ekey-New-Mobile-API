// <auto-generated />

using System;
using System.Linq;
using System.Collections;
using System.Reflection;
using System.Collections.Generic;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using System.ComponentModel;
using System.Runtime.Serialization;

[assembly: Microsoft.Xrm.Sdk.Client.ProxyTypesAssemblyAttribute()]
namespace TRA_MobileAPIs.ProxyClasses
{
    /// <summary>
    /// Base class used for proxy classes
    /// </summary>
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public abstract partial class BaseProxyClass : Entity, INotifyPropertyChanged, INotifyPropertyChanging
    {
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="original"></param>
        protected BaseProxyClass(Entity original)
        {
            if (string.IsNullOrEmpty(original.LogicalName))
                throw new Exception("Please specify the 'logicalName' on the entity when using a proxy class.");

            this.LogicalName = GetLogicalName(this.GetType());

            if (this.LogicalName != original.LogicalName)
                throw new Exception("Please make sure that the entity logical name matches that of the proxy class you are creating.");

            this.LogicalName = original.LogicalName;
            this.RelatedEntities.Clear();
            this.FormattedValues.Clear();
            this.Attributes = original.Attributes;
            this.RelatedEntities.AddRange(original.RelatedEntities);
            this.FormattedValues.AddRange(original.FormattedValues);
            this.ExtensionData = original.ExtensionData;
            this.EntityState = original.EntityState;
            this.RowVersion = original.RowVersion;
            this.KeyAttributes = original.KeyAttributes;
            this.Id = original.Id;
        }

        /// <summary>
        /// Flag to return the dates in the local time. Default is 'false'.
        /// </summary>
        public static bool ReturnDatesInLocalTime { get; set; } = false;

        /// <summary>
        /// Indicates if the entity was retrieved from CRM and whether all columns were retrieved.
        /// </summary>
        public bool AllColumnsRetrievedFromCrm { get; set; } = false;

        /// <summary>
        /// Create the record
        /// </summary>
        /// <param name="service"></param>
        /// <returns></returns>
        public Guid Create(IOrganizationService service)
        {
            this.Id = service.Create(this);
            ChangedValues.Clear();
            return this.Id;
        }

        /// <summary>
        /// Delete the record
        /// </summary>
        /// <param name="service"></param>
        public void Delete(IOrganizationService service)
        {
            service.Delete(this.LogicalName, this.Id);
        }

        /// <summary>
        /// Update the record
        /// </summary>
        /// <param name="service"></param>
        public void Update(IOrganizationService service)
        {
            if (ChangedValues.Count > 0)
                service.Update(GetChangedEntity());
            ChangedValues.Clear();
        }

        /// <summary>
        /// Create the record asynchronously
        /// </summary>
        /// <param name="service"></param>
        /// <returns></returns>
        public async System.Threading.Tasks.Task<Guid> CreateAsync(IOrganizationService service)
        {
            return await System.Threading.Tasks.Task.Run(() => { return this.Create(service); });
        }

        /// <summary>
        /// Update the record asynchronously
        /// </summary>
        /// <param name="service"></param>
        /// <returns></returns>
        public async System.Threading.Tasks.Task UpdateAsync(IOrganizationService service)
        {
            await System.Threading.Tasks.Task.Run(() => { this.Update(service); });
        }

        /// <summary>
        /// Delete the record asynchronously
        /// </summary>
        /// <param name="service"></param>
        /// <returns></returns>
        public async System.Threading.Tasks.Task DeleteAsync(IOrganizationService service)
        {
            await System.Threading.Tasks.Task.Run(() => { this.Delete(service); });
        }

        /// <summary>
        /// Returns an <see cref="Entity"/> that only contains 'changed' properties.
        /// </summary>
        /// <returns></returns>
        public Entity GetChangedEntity()
        {
            var entity = new Entity(this.LogicalName);
            entity.Id = this.Id;
            foreach (string attributeName in ChangedValues.Keys)
                entity.Attributes[attributeName] = this.Attributes[attributeName];
            return entity;
        }

        /// <summary>
        /// Save the record.
        /// If the Id == guid.empty, then the record will be created. Otherwise it will be updated.
        /// </summary>
        /// <param name="service"></param>
        public void Save(IOrganizationService service)
        {
            if (this.Id != Guid.Empty) { this.Update(service); }
            else { this.Create(service); }
        }

        /// <summary>
        /// Save the record asynchronously.
        /// If the Id == guid.empty, then the record will be created. Otherwise it will be updated.
        /// </summary>
        /// <param name="service"></param>
        /// <returns></returns>
        public async System.Threading.Tasks.Task SaveAsync(IOrganizationService service)
        {
            await System.Threading.Tasks.Task.Run(() => { this.Save(service); });
        }

        /// <summary>
        /// Create's a proxy type for the specified entity.
        /// </summary>
        /// <param name="entity"></param>
        /// <returns></returns>
        public static BaseProxyClass CreateProxyType(Entity entity)
        {
            if (!_proxyTypes.ContainsValue(entity.LogicalName))
                //Register all the types in the current assembly
                RegisterProxyTypesInAssembly(typeof(BaseProxyClass).Assembly);

            if (_proxyTypes.ContainsValue(entity.LogicalName))
            {
                var proxyType = (from ProxyTypeTemp in _proxyTypes.Keys where _proxyTypes[ProxyTypeTemp] == entity.LogicalName select ProxyTypeTemp).FirstOrDefault();
                var ConstructorTemp = proxyType.GetConstructor(new Type[] { typeof(Entity) });
                return (BaseProxyClass)ConstructorTemp.Invoke(new object[] { entity });
            }
            else
                throw new Exception("The proxy class for type '" + entity.LogicalName + "' has not been registered.");
        }
        private static Dictionary<Type, string> _proxyTypes = new Dictionary<Type, string>();

        /// <summary>
        /// Registers the proxy type to be associated with the entity logical name.
        /// </summary>
        /// <param name="ProxyType"></param>
        /// <param name="logicalName"></param>
        public static void RegisterProxyType(Type ProxyType, string logicalName)
        {
            if (!_proxyTypes.ContainsKey(ProxyType)) { _proxyTypes.Add(ProxyType, logicalName); }
        }

        /// <summary>
        /// Registers all the proxy types in the specified assembly.
        /// </summary>
        /// <param name="assembly"></param>
        public static void RegisterProxyTypesInAssembly(Assembly assembly)
        {
            if (assembly != null)
            {
                foreach (var type in assembly.GetTypes())
                    System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(type.TypeHandle);
            }
        }

        /// <summary>
        /// Gets the logical name associated with the proxy type.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <returns></returns>
        public static string GetLogicalName<T>() where T : BaseProxyClass
        {
            return GetLogicalName(typeof(T));
        }

        /// <summary>
        /// Gets the logical name associated with the proxy type.
        /// </summary>
        /// <param name="type"></param>
        /// <returns></returns>
        public static string GetLogicalName(Type type)
        {
            if (!_proxyTypes.ContainsKey(type))
            {
                //This forces the static constructor to be called and register the name
                ConstructorInfo constructor = type.GetConstructor(new Type[] { });
                constructor.Invoke(new object[] { });
            }
            return _proxyTypes[type];
        }

        /// <summary>
        /// Operator that converts a <see cref="BaseProxyClass"/> to an <see cref="EntityReference"/>.
        /// </summary>
        /// <param name="proxy"></param>
        public static implicit operator EntityReference(BaseProxyClass proxy)
        {
            if (proxy != null) { return proxy.ToEntityReference(); }
            return null;
        }

        /// <summary>
        /// Gets the property value and casts to the specific type.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="name"></param>
        /// <returns></returns>
        public T GetPropertyValue<T>(string name)
        {
            if (this.Contains(name))
            {
                var value = (T)this.Attributes[name];
                if ((typeof(T) == typeof(DateTime) || typeof(T) == typeof(DateTime?)) && ReturnDatesInLocalTime && value != null)
                    value = (T)(Object)((DateTime)(Object)value).ToLocalTime();
                return value;
            }
            return default(T);
        }

        /// <summary>
        /// Collection of values that have changed along with their original value.
        /// </summary>
        protected Dictionary<string, object> ChangedValues { get; } = new Dictionary<string, object>();
        private readonly AttributeEqualityComparer _equalityComparer = new AttributeEqualityComparer();

        /// <summary>
        /// Sets the property value if different from the current value.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <param name="propertyName"></param>
        public virtual void SetPropertyValue<T>(string name, T value, string propertyName)
        {
            var currentValue = this.Contains(name) ? (object)this.GetPropertyValue<T>(name) : null;
            if ((currentValue == null && this.AllColumnsRetrievedFromCrm == false) || !_equalityComparer.Equals(currentValue, value))
            {
                OnPropertyChanging(propertyName);
                if (ChangedValues.TryGetValue(name, out var originalValue))
                {
                    if (_equalityComparer.Equals(originalValue, value)) { ChangedValues.Remove(name); }
                }
                else
                    ChangedValues.Add(name, currentValue);

                this.Attributes[name] = value;
                OnPropertyChanged(propertyName);
            }
        }
        protected void OnPropertyChanging(string propertyName)
        {
            this.PropertyChanging?.Invoke(this, new PropertyChangingEventArgs(propertyName));
        }
        protected void OnPropertyChanged(string propertyName)
        {
            this.PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        /// <summary>
        /// Sets the property value and checks for any violations of property constraints.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <param name="maxLength"></param>
        /// <param name="propertyName"></param>
        public virtual void SetPropertyValue(string name, string value, int maxLength, string propertyName)
        {
            var textOptions = GetTextOptions(name);
            if (textOptions != eTextOptions.Ignore && !string.IsNullOrEmpty(value) && value.Length > maxLength)
            {
                if (textOptions == eTextOptions.Truncate) { value = value.Substring(0, maxLength); }
                else { throw new Exception(string.Format(GetErrorString(name, eErrorType.Text), name, value, value.Length, maxLength)); }
            }
            SetPropertyValue<string>(name, value, propertyName);
        }

        /// <summary>
        /// Sets the property value and checks for any violations of property constraints.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <param name="minValue"></param>
        /// <param name="maxValue"></param>
        /// <param name="propertyName"></param>
        public virtual void SetPropertyValue(string name, int? value, int minValue, int maxValue, string propertyName)
        {
            var numberOptions = GetNumberOptions(name);
            if (numberOptions != eNumberOptions.Ignore && (value < minValue || value > maxValue))
            {
                bool throwError = false;
                if (numberOptions == eNumberOptions.CorrectMinAndMax) { value = (value < minValue) ? minValue : maxValue; }
                else if (numberOptions == eNumberOptions.CorrectMinIgnoreMax) { value = (value < minValue) ? minValue : value; }
                else if (numberOptions == eNumberOptions.CorrectMinThrowMax && value < minValue) { value = minValue; }
                else if (numberOptions == eNumberOptions.CorrectMaxIgnoreMin) { value = (value > maxValue) ? maxValue : value; }
                else if (numberOptions == eNumberOptions.CorrectMaxThrowMin && value > maxValue) { value = maxValue; }
                else { throwError = true; }
                if (throwError) { throw new Exception(string.Format(GetErrorString(name, eErrorType.Number), name, value, minValue, maxValue)); }
            }
            SetPropertyValue(name, value, propertyName);
        }

        /// <summary>
        /// Sets the property value and checks for any violations of property constraints.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <param name="minValue"></param>
        /// <param name="maxValue"></param>
        /// <param name="propertyName"></param>
        public virtual void SetPropertyValue(string name, decimal? value, decimal minValue, decimal maxValue, string propertyName)
        {
            var numberOptions = GetNumberOptions(name);
            if (numberOptions != eNumberOptions.Ignore && (value < minValue || value > maxValue))
            {
                bool throwError = false;
                if (numberOptions == eNumberOptions.CorrectMinAndMax) { value = (value < minValue) ? minValue : maxValue; }
                else if (numberOptions == eNumberOptions.CorrectMinIgnoreMax) { value = (value < minValue) ? minValue : value; }
                else if (numberOptions == eNumberOptions.CorrectMinThrowMax && value < minValue) { value = minValue; }
                else if (numberOptions == eNumberOptions.CorrectMaxIgnoreMin) { value = (value > maxValue) ? maxValue : value; }
                else if (numberOptions == eNumberOptions.CorrectMaxThrowMin && value > maxValue) { value = maxValue; }
                else { throwError = true; }
                if (throwError) { throw new Exception(string.Format(GetErrorString(name, eErrorType.Number), name, value, minValue, maxValue)); }
            }
            SetPropertyValue(name, value, propertyName);
        }

        /// <summary>
        /// Sets the property value and checks for any violations of property constraints.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <param name="minValue"></param>
        /// <param name="maxValue"></param>
        /// <param name="propertyName"></param>
        public virtual void SetPropertyValue(string name, double? value, double minValue, double maxValue, string propertyName)
        {
            var numberOptions = GetNumberOptions(name);
            if (numberOptions != eNumberOptions.Ignore && (value < minValue || value > maxValue))
            {
                bool throwError = false;
                if (numberOptions == eNumberOptions.CorrectMinAndMax) { value = (value < minValue) ? minValue : maxValue; }
                else if (numberOptions == eNumberOptions.CorrectMinIgnoreMax) { value = (value < minValue) ? minValue : value; }
                else if (numberOptions == eNumberOptions.CorrectMinThrowMax && value < minValue) { value = minValue; }
                else if (numberOptions == eNumberOptions.CorrectMaxIgnoreMin) { value = (value > maxValue) ? maxValue : value; }
                else if (numberOptions == eNumberOptions.CorrectMaxThrowMin && value > maxValue) { value = maxValue; }
                else { throwError = true; }
                if (throwError) { throw new Exception(string.Format(GetErrorString(name, eErrorType.Number), name, value, minValue, maxValue)); }
            }
            SetPropertyValue(name, value, propertyName);
        }

        /// <summary>
        /// Sets the property value and checks for any violations of property constraints.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="value"></param>
        /// <param name="minValue"></param>
        /// <param name="maxValue"></param>
        /// <param name="propertyName"></param>
        public virtual void SetPropertyValue(string name, Money value, decimal minValue, decimal maxValue, string propertyName)
        {
            var numberOptions = GetNumberOptions(name);
            if (value != null && numberOptions != eNumberOptions.Ignore && (value.Value < minValue || value.Value > maxValue))
            {
                bool throwError = false;
                if (numberOptions == eNumberOptions.CorrectMinAndMax) { value.Value = (value.Value < minValue) ? minValue : maxValue; }
                else if (numberOptions == eNumberOptions.CorrectMinIgnoreMax) { value.Value = (value.Value < minValue) ? minValue : value.Value; }
                else if (numberOptions == eNumberOptions.CorrectMinThrowMax && value.Value < minValue) { value.Value = minValue; }
                else if (numberOptions == eNumberOptions.CorrectMaxIgnoreMin) { value.Value = (value.Value > maxValue) ? maxValue : value.Value; }
                else if (numberOptions == eNumberOptions.CorrectMaxThrowMin && value.Value > maxValue) { value.Value = maxValue; }
                else { throwError = true; }
                if (throwError) { throw new Exception(string.Format(GetErrorString(name, eErrorType.Number), name, value.Value, minValue, maxValue)); }
            }
            SetPropertyValue(name, value, propertyName);
        }

        /// <summary>
        /// Returns the <see cref="eTextOptions"/> for the entity.
        /// </summary>
        /// <param name="logicalName"></param>
        /// <returns></returns>
        protected abstract eTextOptions GetTextOptions(string logicalName);

        /// <summary>
        /// Returns the error string template for the attribute.
        /// </summary>
        /// <param name="attributeName"></param>
        /// <param name="defaultErrorType"></param>
        /// <returns></returns>
        protected abstract string GetErrorString(string attributeName, eErrorType defaultErrorType);

        /// <summary>
        /// Returns the <see cref="eNumberOptions"/> for the specified logical name.
        /// </summary>
        /// <param name="logicalName"></param>
        /// <returns></returns>
        protected abstract eNumberOptions GetNumberOptions(string logicalName);

        /// <summary>
        /// Returns 'true' if the record is dirty.
        /// </summary>
        public bool IsDirty
        {
            get { return this.ChangedValues.Count > 0; }
        }

        /// <summary>
        /// Returns a collection of related records.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="relatedId"></param>
        /// <param name="logicalName"></param>
        /// <param name="attributeName"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> GetRelatedOneToManyEntities<T>(IOrganizationService service, Guid relatedId, string logicalName, string attributeName, params string[] columns) where T : BaseProxyClass
        {
            return GetRelatedOneToManyEntities(service, relatedId, logicalName, attributeName, columns).ToProxies<T>();
        }

        /// <summary>
        /// Returns a collection of related records.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="relatedId"></param>
        /// <param name="logicalName"></param>
        /// <param name="attributeName"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> GetRelatedOneToManyEntities<T>(IOrganizationService service, Guid relatedId, string logicalName, string attributeName, ColumnSet columns) where T : BaseProxyClass
        {
            return GetRelatedOneToManyEntities(service, relatedId, logicalName, attributeName, columns).ToProxies<T>();
        }

        /// <summary>
        /// Returns a collection of related records.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="relatedId"></param>
        /// <param name="logicalName"></param>
        /// <param name="attributeName"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<Entity> GetRelatedOneToManyEntities(IOrganizationService service, Guid relatedId, string logicalName, string attributeName, params string[] columns)
        {
            return GetRelatedOneToManyEntities(service, relatedId, logicalName, attributeName, ExtensionMethods.GetColumnSet(columns));
        }

        /// <summary>
        /// Returns a collection of related records.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="relatedId"></param>
        /// <param name="logicalName"></param>
        /// <param name="attributeName"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<Entity> GetRelatedOneToManyEntities(IOrganizationService service, Guid relatedId, string logicalName, string attributeName, ColumnSet columns)
        {
            return service.RetrieveMultiple(logicalName, new ConditionExpression(attributeName, ConditionOperator.Equal, relatedId), columns).Entities.ToList();
        }

        /// <summary>
        /// Returns a collection of related records.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <param name="linkFromEntityTypeName"></param>
        /// <param name="linkFromAttributeName"></param>
        /// <param name="linkToEntityTypeName"></param>
        /// <param name="linkToAttributeName"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="intermediateFromAttributeName"></param>
        /// <param name="intermediateToAttributeName"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> GetRelatedManyToManyEntities<T>(IOrganizationService service, BaseProxyClass proxy, string linkFromEntityTypeName, string linkFromAttributeName, string linkToEntityTypeName, string linkToAttributeName, string intermediateEntityName, string intermediateFromAttributeName, string intermediateToAttributeName, params string[] columns) where T : BaseProxyClass
        {
            return GetRelatedManyToManyEntities(service, proxy, linkFromEntityTypeName, linkFromAttributeName, linkToEntityTypeName, linkToAttributeName, intermediateEntityName, intermediateFromAttributeName, intermediateToAttributeName, columns).ToProxies<T>();
        }

        /// <summary>
        /// Returns a collection of related records.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <param name="linkFromEntityTypeName"></param>
        /// <param name="linkFromAttributeName"></param>
        /// <param name="linkToEntityTypeName"></param>
        /// <param name="linkToAttributeName"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="intermediateFromAttributeName"></param>
        /// <param name="intermediateToAttributeName"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> GetRelatedManyToManyEntities<T>(IOrganizationService service, BaseProxyClass proxy, string linkFromEntityTypeName, string linkFromAttributeName, string linkToEntityTypeName, string linkToAttributeName, string intermediateEntityName, string intermediateFromAttributeName, string intermediateToAttributeName, ColumnSet columns) where T : BaseProxyClass
        {
            return GetRelatedManyToManyEntities(service, proxy, linkFromEntityTypeName, linkFromAttributeName, linkToEntityTypeName, linkToAttributeName, intermediateEntityName, intermediateFromAttributeName, intermediateToAttributeName, columns).ToProxies<T>();
        }

        /// <summary>
        /// Returns a collection of related records.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <param name="linkFromEntityTypeName"></param>
        /// <param name="linkFromAttributeName"></param>
        /// <param name="linkToEntityTypeName"></param>
        /// <param name="linkToAttributeName"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="intermediateFromAttributeName"></param>
        /// <param name="intermediateToAttributeName"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<Entity> GetRelatedManyToManyEntities(IOrganizationService service, BaseProxyClass proxy, string linkFromEntityTypeName, string linkFromAttributeName, string linkToEntityTypeName, string linkToAttributeName, string intermediateEntityName, string intermediateFromAttributeName, string intermediateToAttributeName, params string[] columns)
        {
            return GetRelatedManyToManyEntities(service, proxy, linkFromEntityTypeName, linkFromAttributeName, linkToEntityTypeName, linkToAttributeName, intermediateEntityName, intermediateFromAttributeName, intermediateToAttributeName, ExtensionMethods.GetColumnSet(columns));
        }

        /// <summary>
        /// Returns a collection of related records.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <param name="linkFromEntityTypeName"></param>
        /// <param name="linkFromAttributeName"></param>
        /// <param name="linkToEntityTypeName"></param>
        /// <param name="linkToAttributeName"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="intermediateFromAttributeName"></param>
        /// <param name="intermediateToAttributeName"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<Entity> GetRelatedManyToManyEntities(IOrganizationService service, BaseProxyClass proxy, string linkFromEntityTypeName, string linkFromAttributeName, string linkToEntityTypeName, string linkToAttributeName, string intermediateEntityName, string intermediateFromAttributeName, string intermediateToAttributeName, ColumnSet columns)
        {
            var query = new QueryExpression()
            {
                EntityName = linkToEntityTypeName,
                ColumnSet = columns,
                LinkEntities = {
                    new LinkEntity(){
                        LinkFromAttributeName = linkToAttributeName,
                        LinkFromEntityName = linkToEntityTypeName,
                        LinkToAttributeName = intermediateToAttributeName,
                        LinkToEntityName = intermediateEntityName,
                        LinkEntities = {
                            new LinkEntity(){
                                LinkFromAttributeName = intermediateFromAttributeName,
                                LinkFromEntityName = intermediateEntityName,
                                LinkToAttributeName = linkFromAttributeName,
                                LinkToEntityName = linkFromEntityTypeName,
                                LinkCriteria = new FilterExpression(){
                                    Conditions = {
                                        new ConditionExpression(linkFromAttributeName, ConditionOperator.Equal, new object[]{ proxy.Id })
                                    }
                                }
                            }
                        }
                    }
                }
            };

            return service.RetrieveMultipleAllPages(query).Entities.ToList();
        }
        protected class AttributeEqualityComparer : IEqualityComparer
        {
            public new bool Equals(object x, object y)
            {
                if ((x == null || (x.GetType() == typeof(string) && string.IsNullOrEmpty(x as string))) && (y == null || (y.GetType() == typeof(string) && string.IsNullOrEmpty(y as string))))
                    return true;
                else
                {
                    if (x == null && y == null) { return true; }
                    else if (x == null && y != null) { return false; }
                    else if (x != null && y == null) { return false; }
                    else if (x.GetType() == y.GetType())
                    {
                        if (x.GetType() == typeof(OptionSetValue)) { return ((OptionSetValue)x).Value == ((OptionSetValue)y).Value; }
                        else if (x.GetType() == typeof(BooleanManagedProperty)) { return ((BooleanManagedProperty)x).Value == ((BooleanManagedProperty)y).Value; }
                        else if (x.GetType() == typeof(EntityReference))
                        {
                            if (((EntityReference)x).LogicalName == ((EntityReference)y).LogicalName) { return ((EntityReference)x).Id == ((EntityReference)y).Id; }
                            else { return false; }
                        }
                        else if (x.GetType() == typeof(Money)) { return (((Money)x).Value == ((Money)y).Value); }
                        else if (x.GetType() == typeof(DateTime) || x.GetType() == typeof(DateTime?))
                        {
                            //Compare only down to the second since CRM only tracks down to the second
                            return Math.Abs(((DateTime)x - (DateTime)y).TotalSeconds) < 1;
                        }
                        else { return x.Equals(y); }
                    }
                    else { return false; }
                }
            }
            public int GetHashCode(object obj)
            {
                return obj.GetHashCode();
            }
        }

        /// <summary>
        /// Text options
        /// </summary>
        public enum eTextOptions
        {
            /// <summary>Ignore and let CRM handle any issues with the value</summary>
            Ignore,
            /// <summary>If the length is greater than the max length, truncate the value to the max length</summary>
            Truncate,
            /// <summary>Throw an error if the length of the value is greater than the max length</summary>
            ThrowError
        }

        /// <summary>
        /// Number options
        /// </summary>
        public enum eNumberOptions
        {
            /// <summary>Ignore and let CRM handle any issues with the value.</summary>
            Ignore,
            /// <summary>If the value is less than the min value set the value as the min value.<para>Let CRM handle any issues with the max value.</para></summary>
            CorrectMinIgnoreMax,
            /// <summary>If the value is less than the min value set the value as the min value.<para>Throw an error if the value is greater than the max value.</para></summary>
            CorrectMinThrowMax,
            /// <summary>If the value is greater than the max value set the value as the max value.<para>Let CRM handle any issues with the min value.</para></summary>
            CorrectMaxIgnoreMin,
            /// <summary>If the value is greater than the max value set the value as the max value.<para>Throw an error if the value is less than the min value.</para></summary>
            CorrectMaxThrowMin,
            /// <summary>If the value is less than the min value set the value as the min value.<para>If the value is greater than the max value set the value as the max value.</para></summary>
            CorrectMinAndMax,
            /// <summary>Throw an error if the value is less than the min or greater than the max</summary>
            ThrowError
        }

        /// <summary>
        /// Error type
        /// </summary>
        public enum eErrorType
        {
            /// <summary>
            /// Text error
            /// </summary>
            Text,

            /// <summary>
            /// Number error
            /// </summary>
            Number,
        }

        /// <summary>
        /// Property changed event
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// Property changing event
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;
    }

    /// <summary>
    /// Extensions methods
    /// </summary>
    public static partial class ExtensionMethods
    {
        /// <summary>
        /// Creates the record.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public static Guid Create(this IOrganizationService service, BaseProxyClass proxy)
        {
            proxy.Id = service.Create(proxy);
            return proxy.Id;
        }

        /// <summary>
        /// Updates the record.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        public static void Update(this IOrganizationService service, BaseProxyClass proxy)
        {
            proxy.Update(service);
        }

        /// <summary>
        /// Deletes the record.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        public static void Delete(this IOrganizationService service, BaseProxyClass proxy)
        {
            service.Delete(proxy.LogicalName, proxy.Id);
        }

        /// <summary>
        /// Sets the state of the record.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <param name="state"></param>
        /// <param name="status"></param>
        public static void SetState(this IOrganizationService service, BaseProxyClass proxy, int state, int status)
        {
            service.SetState(proxy, new OptionSetValue(state), new OptionSetValue(status));
        }

        /// <summary>
        /// Sets the state of the record.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <param name="state"></param>
        /// <param name="status"></param>
        public static void SetState(this IOrganizationService service, BaseProxyClass proxy, OptionSetValue state, OptionSetValue status)
        {
            var request = new SetStateRequest() { EntityMoniker = proxy, State = state, Status = status };
            service.Execute(request);
        }

        /// <summary>
        /// Creates the record asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<Guid> CreateAsync(this IOrganizationService service, Entity entity)
        {
            return await System.Threading.Tasks.Task.Run(() =>
            {
                entity.Id = service.Create(entity);
                return entity.Id;
            });
        }

        /// <summary>
        /// Updates the record asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task UpdateAsync(this IOrganizationService service, Entity entity)
        {
            await System.Threading.Tasks.Task.Run(() =>
            {
                service.Update(entity);
                return;
            });
        }

        /// <summary>
        /// Deletes the record asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task DeleteAsync(this IOrganizationService service, Entity entity)
        {
            await DeleteAsync(service, entity.LogicalName, entity.Id);
        }

        /// <summary>
        /// Executes the request asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="request"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<OrganizationResponse> ExecuteAsync(this IOrganizationService service, OrganizationRequest request)
        {
            return await System.Threading.Tasks.Task.Run(() =>
            {
                return service.Execute(request);
            });
        }

        /// <summary>
        /// Sets the state asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <param name="state"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task SetStateAsync(this IOrganizationService service, BaseProxyClass proxy, int state, int status)
        {
            await service.SetStateAsync(proxy, new OptionSetValue(state), new OptionSetValue(status));
        }

        /// <summary>
        /// Sets the stat asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="proxy"></param>
        /// <param name="state"></param>
        /// <param name="status"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task SetStateAsync(this IOrganizationService service, BaseProxyClass proxy, OptionSetValue state, OptionSetValue status)
        {
            var request = new SetStateRequest() { EntityMoniker = proxy, State = state, Status = status };
            await service.ExecuteAsync(request);
        }

        /// <summary>
        /// Converts the <see cref="EntityReference"/> to a proxy of type <typeparamref name="T"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="reference"></param>
        /// <returns></returns>
        public static T ToProxy<T>(this EntityReference reference) where T : BaseProxyClass
        {
            if (reference == null) { return null; }
            return reference.ToEntity().ToProxy<T>();
        }

        /// <summary>
        /// Converts the <see cref="EntityReference"/> to an <see cref="Entity"/>.
        /// </summary>
        /// <param name="reference"></param>
        /// <returns></returns>
        public static Entity ToEntity(this EntityReference reference)
        {
            if (reference == null) { return null; }
            return new Entity() { LogicalName = reference.LogicalName, Id = reference.Id };
        }

        /// <summary>
        /// Converts an <see cref="Entity"/> to a proxy of type <typeparamref name="T"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="entity"></param>
        /// <returns></returns>
        public static T ToProxy<T>(this Entity entity) where T : BaseProxyClass
        {
            if (entity != null)
            {
                var constructor = typeof(T).GetConstructor(new Type[] { typeof(Entity) });
                return entity.ToProxy<T>(constructor);
            }
            return null;
        }
        private static T ToProxy<T>(this Entity entity, ConstructorInfo construcor) where T : BaseProxyClass
        {
            return construcor.Invoke(new object[] { entity }) as T;
        }

        /// <summary>
        /// Returns the <see cref="AttributeMetadata"/> for the specified attribute.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entityLogicalName"></param>
        /// <param name="attributeLogicalName"></param>
        /// <returns></returns>
        public static AttributeMetadata GetAttributeMetadata(this IOrganizationService service, string entityLogicalName, string attributeLogicalName)
        {
            var request = new RetrieveAttributeRequest() { EntityLogicalName = entityLogicalName, LogicalName = attributeLogicalName };
            return (service.Execute(request) as RetrieveAttributeResponse).AttributeMetadata;
        }

        /// <summary>
        /// Returns the <see cref="OptionMetadata"/> for the specified attribute and value.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <param name="attributeLogicalName"></param>
        /// <returns></returns>
        public static OptionMetadata GetOptionMetadata(this OptionSetValue value, IOrganizationService service, BaseProxyClass entity, string attributeLogicalName)
        {
            var attributeMeta = service.GetAttributeMetadata(entity.LogicalName, attributeLogicalName);
            if (attributeMeta is EnumAttributeMetadata)
                return ((EnumAttributeMetadata)attributeMeta).GetOptionMetadata(value.Value);
            else { throw new Exception("The attribute is not an Enum type attribute"); }
        }

        /// <summary>
        /// Returns the <see cref="OptionMetadata"/> for the specified value.
        /// </summary>
        /// <param name="enumMeta"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public static OptionMetadata GetOptionMetadata(this EnumAttributeMetadata enumMeta, int value)
        {
            return (from meta in enumMeta.OptionSet.Options where meta.Value == value select meta).FirstOrDefault();
        }

        /// <summary>
        /// Returns the text for the option value.
        /// </summary>
        /// <param name="enumMeta"></param>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string GetOptionSetText(this EnumAttributeMetadata enumMeta, int value)
        {
            return enumMeta.GetOptionMetadata(value).GetOptionSetText();
        }

        /// <summary>
        /// Returns the text for the option value.
        /// </summary>
        /// <param name="value"></param>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <param name="attributeLogicalName"></param>
        /// <returns></returns>
        public static string GetOptionSetText(this OptionSetValue value, IOrganizationService service, BaseProxyClass entity, string attributeLogicalName)
        {
            var optionMeta = GetOptionMetadata(value, service, entity, attributeLogicalName);
            return optionMeta.GetOptionSetText();
        }

        /// <summary>
        /// Returns the text for the optionset.
        /// </summary>
        /// <param name="optionMeta"></param>
        /// <returns></returns>
        public static string GetOptionSetText(this OptionMetadata optionMeta)
        {
            if (optionMeta != null && optionMeta.Label != null && optionMeta.Label.UserLocalizedLabel != null) { return optionMeta.Label.UserLocalizedLabel.Label; }
            return string.Empty;
        }

        /// <summary>
        /// Returns a collection of proxy classes based on the specified <see cref="ConditionExpression"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="expression"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> RetrieveProxies<T>(this IOrganizationService service, ConditionExpression expression, ColumnSet columns) where T : BaseProxyClass
        {
            var filterExpression = new FilterExpression();
            filterExpression.AddCondition(expression);
            return service.RetrieveProxies<T>(filterExpression, columns);
        }

        /// <summary>
        /// Returns a collection of proxy classes based on the specified <see cref="FilterExpression"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="expression"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> RetrieveProxies<T>(this IOrganizationService service, FilterExpression expression, ColumnSet columns) where T : BaseProxyClass
        {
            var query = new QueryExpression(BaseProxyClass.GetLogicalName<T>()) { ColumnSet = columns, Criteria = expression };
            return service.RetrieveProxies<T>(query);
        }

        /// <summary>
        /// Retrieves a collection of all records of the type <typeparamref name="T"/> with the specified columns.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> RetrieveProxies<T>(this IOrganizationService service, params string[] columns) where T : BaseProxyClass
        {
            return service.RetrieveProxies<T>(GetColumnSet(columns));
        }

        /// <summary>
        /// Retrieves a collection of all records of the type <typeparamref name="T"/> with the specified columns.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> RetrieveProxies<T>(this IOrganizationService service, ColumnSet columns) where T : BaseProxyClass
        {
            var query = new QueryExpression(BaseProxyClass.GetLogicalName<T>()) { ColumnSet = columns };
            return service.RetrieveProxies<T>(query);
        }

        /// <summary>
        /// Returns a collection of proxy classes based on the specified <see cref="QueryExpression"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="query"></param>
        /// <returns></returns>
        public static List<T> RetrieveProxies<T>(this IOrganizationService service, QueryExpression query) where T : BaseProxyClass
        {
            var proxies = service.RetrieveMultipleAllPages(query).ToProxies<T>();
            if (query.ColumnSet?.AllColumns ?? false)
            {
                foreach (var proxy in proxies)
                    proxy.AllColumnsRetrievedFromCrm = true;
            }
            return proxies;
        }

        /// <summary>
        /// Converts the specified set of entities to proxies of type <typeparamref name="T"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<T> ToProxies<T>(this EntityCollection entities) where T : BaseProxyClass
        {
            return entities.Entities.ToProxies<T>();
        }

        /// <summary>
        /// Converts the specified set of entities to proxies of type <typeparamref name="T"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<T> ToProxies<T>(this IEnumerable<Entity> entities) where T : BaseProxyClass
        {
            var constructor = typeof(T).GetConstructor(new Type[] { typeof(Entity) });
            return (from entity in entities select entity.ToProxy<T>(constructor)).ToList();
        }

        /// <summary>
        /// Retrieves the specified entity.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T RetrieveProxy<T>(this EntityReference entity, IOrganizationService service, params string[] columns) where T : BaseProxyClass
        {
            return service.RetrieveProxy<T>(entity.Id, columns);
        }

        /// <summary>
        /// Retrieves the specified entity.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T RetrieveProxy<T>(this EntityReference entity, IOrganizationService service, ColumnSet columns) where T : BaseProxyClass
        {
            return service.RetrieveProxy<T>(entity.Id, columns);
        }

        /// <summary>
        /// Retrieves the specified entity.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="Id"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T RetrieveProxy<T>(this IOrganizationService service, Guid Id, params string[] columns) where T : BaseProxyClass
        {
            return service.RetrieveProxy<T>(Id, GetColumnSet(columns));
        }

        /// <summary>
        /// Retrieves the specified entity.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="Id"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T RetrieveProxy<T>(this IOrganizationService service, Guid Id, ColumnSet columns) where T : BaseProxyClass
        {
            var entityName = BaseProxyClass.GetLogicalName<T>();
            if (columns == null) { columns = new ColumnSet(true); }
            var proxy = service.Retrieve(entityName, Id, columns).ToProxy<T>();
            if (columns.AllColumns)
                proxy.AllColumnsRetrievedFromCrm = true;
            return proxy;
        }

        /// <summary>
        /// Attempts to find a matching record based on the specified property name and value.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T FindProxy<T>(this IOrganizationService service, string propertyName, object value, params string[] columns) where T : BaseProxyClass
        {
            return service.FindProxy<T>(propertyName, value, GetColumnSet(columns));
        }

        /// <summary>
        /// Attempts to find a matching record based on the specified property name and value.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T FindProxy<T>(this IOrganizationService service, string propertyName, object value, ColumnSet columns) where T : BaseProxyClass
        {
            return service.FindProxies<T>(propertyName, value, columns).FirstOrDefault();
        }

        /// <summary>
        /// Attempts to find a matching record based on the specified property name and <see cref="ConditionOperator"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="propertyName"></param>
        /// <param name="Operator"></param>
        /// <param name="value"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T FindProxy<T>(this IOrganizationService service, string propertyName, ConditionOperator Operator, object value, params string[] columns) where T : BaseProxyClass
        {
            return service.FindProxy<T>(propertyName, Operator, value, GetColumnSet(columns));
        }

        /// <summary>
        /// Attempts to find a matching record based on the specified property name and <see cref="ConditionOperator"/>.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="propertyName"></param>
        /// <param name="Operator"></param>
        /// <param name="value"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T FindProxy<T>(this IOrganizationService service, string propertyName, ConditionOperator Operator, object value, ColumnSet columns) where T : BaseProxyClass
        {
            return service.FindProxies<T>(propertyName, Operator, value, columns).FirstOrDefault();
        }

        /// <summary>
        /// Attempts to find matching records based on the specified property name and value.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> FindProxies<T>(this IOrganizationService service, string propertyName, object value, params string[] columns) where T : BaseProxyClass
        {
            return service.FindProxies<T>(propertyName, value, GetColumnSet(columns));
        }

        /// <summary>
        /// Attempts to find matching records based on the specified property name and value.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="propertyName"></param>
        /// <param name="value"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> FindProxies<T>(this IOrganizationService service, string propertyName, object value, ColumnSet columns) where T : BaseProxyClass
        {
            return service.FindProxies<T>(propertyName, ConditionOperator.Equal, value, columns);
        }

        /// <summary>
        /// Attempts to find matching records based on the specified property name and value.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="propertyName"></param>
        /// <param name="operator"></param>
        /// <param name="value"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> FindProxies<T>(this IOrganizationService service, string propertyName, ConditionOperator @operator, object value, params string[] columns) where T : BaseProxyClass
        {
            return service.FindProxies<T>(propertyName, @operator, value, GetColumnSet(columns));
        }

        /// <summary>
        /// Attempts to find matching records based on the specified property name and value.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="propertyName"></param>
        /// <param name="operator"></param>
        /// <param name="value"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static List<T> FindProxies<T>(this IOrganizationService service, string propertyName, ConditionOperator @operator, object value, ColumnSet columns) where T : BaseProxyClass
        {
            var propertyCondition = value != null ? new ConditionExpression(propertyName, @operator, value) : new ConditionExpression(propertyName, @operator);
            return service.RetrieveProxies<T>(propertyCondition, columns);
        }
        internal static ColumnSet GetColumnSet(params string[] columns)
        {
            var columnSet = new ColumnSet(columns);
            if (!columnSet.Columns.Any()) { columnSet = new ColumnSet(true); }
            return columnSet;
        }

        /// <summary>
        /// Retrieves the specified record.
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static Entity RetrieveEntity(this EntityReference entity, IOrganizationService service, params string[] columns)
        {
            return entity.RetrieveEntity(service, GetColumnSet(columns));
        }

        /// <summary>
        /// Retrieves the specified record.
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static Entity RetrieveEntity(this EntityReference entity, IOrganizationService service, ColumnSet columns)
        {
            if (columns == null) { columns = new ColumnSet(true); }
            return service.Retrieve(entity.LogicalName, entity.Id, columns);
        }

        /// <summary>
        /// Retrieves records based on the specified <see cref="ConditionExpression"/>.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="logicalName"></param>
        /// <param name="condition"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static EntityCollection RetrieveMultiple(this IOrganizationService service, string logicalName, ConditionExpression condition, params string[] columns)
        {
            return service.RetrieveMultiple(logicalName, condition, GetColumnSet(columns));
        }

        /// <summary>
        /// Retrieves records based on the specified <see cref="ConditionExpression"/>.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="logicalName"></param>
        /// <param name="condition"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static EntityCollection RetrieveMultiple(this IOrganizationService service, string logicalName, ConditionExpression condition, ColumnSet columns)
        {
            var query = new QueryExpression(logicalName) { ColumnSet = columns };
            query.Criteria.AddCondition(condition);
            return service.RetrieveMultipleAllPages(query);
        }

        /// <summary>
        /// Determines whether all pages should be retrieved. Defaults to 'true'.
        /// </summary>
        public static bool RetrieveAllPages = true;

        /// <summary>
        /// Retrieves all records matching the specified <see cref="QueryExpression"/>, AND if the <see cref="RetrieveAllPages"/> is set to 'true'.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="query"></param>
        /// <returns></returns>
        public static EntityCollection RetrieveMultipleAllPages(this IOrganizationService service, QueryExpression query)
        {
            if (query.PageInfo.PageNumber == 0 && query.TopCount == null)
                query.PageInfo.PageNumber = 1; // No page set. Set to 1st page.

            var results = service.RetrieveMultiple(query);
            while (results.MoreRecords && RetrieveAllPages)
            {
                var currentResults = results.Entities;
                query.PageInfo.PagingCookie = results.PagingCookie;
                query.PageInfo.PageNumber += 1;
                results = service.RetrieveMultiple(query);
                results.Entities.AddRange(currentResults);
            }
            return results;
        }

        /// <summary>
        /// Relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entities"></param>
        public static void RelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, IList<Entity> entities)
        {
            service.RelateEntities(target, intermediateEntityName, null, entities.ToArray());
        }

        /// <summary>
        /// Relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entityRole"></param>
        /// <param name="entities"></param>
        public static void RelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, EntityRole? entityRole, IList<Entity> entities)
        {
            service.RelateEntities(target, intermediateEntityName, entityRole, entities.ToArray());
        }

        /// <summary>
        /// Relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entityRole"></param>
        /// <param name="entities"></param>
        public static void RelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, EntityRole? entityRole, params Entity[] entities)
        {
            var references = (from EntityTemp in entities select EntityTemp.ToEntityReference()).ToList();
            service.RelateEntities(target, intermediateEntityName, entityRole, references);
        }

        /// <summary>
        /// Relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entityRole"></param>
        /// <param name="entities"></param>
        public static void RelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, EntityRole? entityRole, IList<EntityReference> entities)
        {
            service.RelateEntities(target, intermediateEntityName, entityRole, entities.ToArray());
        }

        /// <summary>
        /// Relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entities"></param>
        public static void RelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, params EntityReference[] entities)
        {
            service.RelateEntities(target, intermediateEntityName, null, entities);
        }

        /// <summary>
        /// Relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entityRole"></param>
        /// <param name="entities"></param>
        public static void RelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, EntityRole? entityRole, params EntityReference[] entities)
        {
            var request = new AssociateRequest()
            {
                Relationship = new Relationship(intermediateEntityName)
                {
                    PrimaryEntityRole = entityRole,
                },
                Target = target,
            };
            request.RelatedEntities = new EntityReferenceCollection(entities);
            service.Execute(request);
        }

        /// <summary>
        /// Un-relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entities"></param>
        public static void UnRelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, IList<Entity> entities)
        {
            service.UnRelateEntities(target, intermediateEntityName, null, entities.ToArray());
        }

        /// <summary>
        /// Un-relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entityRole"></param>
        /// <param name="entities"></param>
        public static void UnRelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, EntityRole? entityRole, IList<Entity> entities)
        {
            service.UnRelateEntities(target, intermediateEntityName, entityRole, entities.ToArray());
        }

        /// <summary>
        /// Un-relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entityRole"></param>
        /// <param name="entities"></param>
        public static void UnRelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, EntityRole? entityRole, params Entity[] entities)
        {
            var references = (from EntityTemp in entities select EntityTemp.ToEntityReference()).ToList();
            service.UnRelateEntities(target, intermediateEntityName, entityRole, references);
        }

        /// <summary>
        /// Un-relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entityRole"></param>
        /// <param name="entities"></param>
        public static void UnRelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, EntityRole? entityRole, IList<EntityReference> entities)
        {
            service.UnRelateEntities(target, intermediateEntityName, entityRole, entities.ToArray());
        }

        /// <summary>
        /// Un-relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entities"></param>
        public static void UnRelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, params EntityReference[] entities)
        {
            service.UnRelateEntities(target, intermediateEntityName, null, entities);
        }

        /// <summary>
        /// Un-relates the specified entities.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="target"></param>
        /// <param name="intermediateEntityName"></param>
        /// <param name="entityRole"></param>
        /// <param name="entities"></param>
        public static void UnRelateEntities(this IOrganizationService service, EntityReference target, string intermediateEntityName, EntityRole? entityRole, params EntityReference[] entities)
        {
            var request = new DisassociateRequest()
            {
                Target = target,
                Relationship = new Relationship(intermediateEntityName)
                {
                    PrimaryEntityRole = entityRole,
                }
            };
            request.RelatedEntities = new EntityReferenceCollection(entities);
            service.Execute(request);
        }

        /// <summary>
        /// Determines the appropriate operation (create or update) for the specified proxy and adds the request to the collection.
        /// </summary>
        /// <param name="requests"></param>
        /// <param name="proxy"></param>
        public static void Add(this List<OrganizationRequest> requests, BaseProxyClass proxy)
        {
            var request = GetOrganizationRequest(proxy);
            if (request != null) { requests.Add(request); }
        }

        /// <summary>
        /// Determines the appropriate operation (create or update) for the specified proxy and adds the request to the collection.
        /// </summary>
        /// <param name="collection"></param>
        /// <param name="proxy"></param>
        public static void Add(this OrganizationRequestCollection collection, BaseProxyClass proxy)
        {
            var request = GetOrganizationRequest(proxy);
            if (request != null) { collection.Add(request); }
        }

        /// <summary>
        /// Returns the appropriate request (create or update) for the specified proxy.
        /// </summary>
        /// <param name="proxy"></param>
        /// <returns></returns>
        public static OrganizationRequest GetOrganizationRequest(BaseProxyClass proxy)
        {
            if (proxy.Id != Guid.Empty && proxy.IsDirty)
                return new UpdateRequest() { Target = proxy.GetChangedEntity() };
            else if (proxy.Id == Guid.Empty)
                return new CreateRequest() { Target = proxy };
            return null;
        }

        /// <summary>
        /// Grants access to the specified entity.
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="principal"></param>
        /// <param name="accessMask"></param>
        public static void GrantAccess(this IAccessControlledEntity entity, IOrganizationService service, EntityReference principal, AccessRights accessMask)
        {
            var request = new GrantAccessRequest() { PrincipalAccess = new PrincipalAccess() { Principal = principal, AccessMask = accessMask }, Target = (EntityReference)(object)entity };
            service.Execute(request);
        }

        /// <summary>
        /// Updates access to the specified entity.
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="Principal"></param>
        /// <param name="AccessMask"></param>
        public static void ModifyAccess(this IAccessControlledEntity entity, IOrganizationService service, EntityReference Principal, AccessRights AccessMask)
        {
            var request = new ModifyAccessRequest() { PrincipalAccess = new PrincipalAccess() { Principal = Principal, AccessMask = AccessMask }, Target = (EntityReference)(object)entity };
            service.Execute(request);
        }

        /// <summary>
        /// Revokes access to the specified entity.
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="revokee"></param>
        public static void RevokeAccess(this IAccessControlledEntity entity, IOrganizationService service, EntityReference revokee)
        {
            var request = new RevokeAccessRequest() { Revokee = revokee, Target = (EntityReference)(object)entity };
            service.Execute(request);
        }
        private static Dictionary<string, Dictionary<Guid, Entity>> _cachedEntities = new Dictionary<string, Dictionary<Guid, Entity>>();

        /// <summary>
        /// Clears the cache.
        /// </summary>
        /// <param name="entityLogicalName"></param>
        public static void ClearCache(string entityLogicalName = null)
        {
            lock (_cachedEntities)
            {
                if (!string.IsNullOrEmpty(entityLogicalName))
                    if (_cachedEntities.ContainsKey(entityLogicalName)) { _cachedEntities[entityLogicalName] = new Dictionary<Guid, Entity>(); }
                    else { _cachedEntities.Clear(); }
            }
        }

        /// <summary>
        /// Retrieves an entity from the cache if it exists, otherwise retrieves it from Dynamics365.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entityLogicalName"></param>
        /// <param name="Id"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static Entity RetrieveCachedEntityById(this IOrganizationService service, string entityLogicalName, Guid Id, ColumnSet columns)
        {
            lock (_cachedEntities)
            {
                Entity CachedEntity = GetEntityFromCache(entityLogicalName, Id);
                if (CachedEntity == null)
                {
                    CachedEntity = service.Retrieve(entityLogicalName, Id, columns);
                    AddEntityToCache(CachedEntity);
                }
                return CachedEntity;
            }
        }

        /// <summary>
        /// Retrieves an entity from the cache if it exists, otherwise retrieves it from Dynamics365.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entityLogicalName"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public static Entity GetEntityFromCache(this IOrganizationService service, string entityLogicalName, Guid id)
        {
            return GetEntityFromCache(entityLogicalName, id);
        }

        /// <summary>
        /// Retrieves an entity from the cache if it exists, otherwise retrieves it from Dynamics365.
        /// </summary>
        /// <param name="entityLogicalName"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public static Entity GetEntityFromCache(string entityLogicalName, Guid id)
        {
            lock (_cachedEntities)
            {
                Entity CachedEntity = null;
                Dictionary<Guid, Entity> cachedEntities = GetEntitiesFromCache(entityLogicalName);
                cachedEntities.TryGetValue(id, out CachedEntity);
                return CachedEntity;
            }
        }

        /// <summary>
        /// Returns all cached entities of a specified entity type.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entityLogicalName"></param>
        /// <returns></returns>
        public static Dictionary<Guid, Entity> GetEntitiesFromCache(this IOrganizationService service, string entityLogicalName)
        {
            return GetEntitiesFromCache(entityLogicalName);
        }

        /// <summary>
        /// Returns all cached entities of a specified entity type.
        /// </summary>
        /// <param name="entityLogicalName"></param>
        /// <returns></returns>
        public static Dictionary<Guid, Entity> GetEntitiesFromCache(string entityLogicalName)
        {
            lock (_cachedEntities)
            {
                var cachedEntities = new Dictionary<Guid, Entity>();
                _cachedEntities.TryGetValue(entityLogicalName, out cachedEntities);
                return cachedEntities != null ? cachedEntities : new Dictionary<Guid, Entity>();
            }
        }

        /// <summary>
        /// Adds the specified entities to the cache.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="entities"></param>
        public static void AddEntitiesToCache<T>(this IOrganizationService service, ICollection<T> entities) where T : BaseProxyClass
        {
            foreach (T entity in entities) { AddEntityToCache(entity); }
        }

        /// <summary>
        /// Adds the specified entities to the cache.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entities"></param>
        public static void AddEntitiesToCache(this IOrganizationService service, ICollection<Entity> entities)
        {
            AddEntitiesToCache(entities);
        }

        /// <summary>
        /// Adds the specified entities to the cache.
        /// </summary>
        /// <param name="entities"></param>
        public static void AddEntitiesToCache(ICollection<Entity> entities)
        {
            lock (_cachedEntities)
            {
                foreach (Entity entity in entities)
                    AddEntityToCache(entity);
            }
        }

        /// <summary>
        /// Adds the specified entitiy to the cache.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        public static void AddEntityToCache(this IOrganizationService service, Entity entity)
        {
            AddEntityToCache(entity);
        }

        /// <summary>
        /// Adds the specified entitiy to the cache.
        /// </summary>
        /// <param name="entity"></param>
        public static void AddEntityToCache(Entity entity)
        {
            lock (_cachedEntities)
            {
                if (!_cachedEntities.ContainsKey(entity.LogicalName))
                    _cachedEntities.Add(entity.LogicalName, new Dictionary<Guid, Entity> { });
                if (!_cachedEntities[entity.LogicalName].ContainsKey(entity.Id))
                    _cachedEntities[entity.LogicalName].Add(entity.Id, entity);
            }
        }

        /// <summary>
        /// Retrieves the proxy from the cache.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <returns></returns>
        public static T RetrieveCachedProxy<T>(this IOrganizationService service, EntityReference entity) where T : BaseProxyClass
        {
            return RetrieveCachedProxy<T>(service, entity, new ColumnSet(true));
        }

        /// <summary>
        /// Retrieves the proxy from the cache.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T RetrieveCachedProxy<T>(this IOrganizationService service, EntityReference entity, params string[] columns) where T : BaseProxyClass
        {
            return RetrieveCachedProxy<T>(service, entity, GetColumnSet(columns));
        }

        /// <summary>
        /// Retrieves the proxy from the cache.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T RetrieveCachedProxy<T>(this IOrganizationService service, EntityReference entity, ColumnSet columns) where T : BaseProxyClass
        {
            return RetrieveCachedEntityById(service, entity.LogicalName, entity.Id, columns).ToProxy<T>();
        }

        /// <summary>
        /// Retrieves the proxy from the cache.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <returns></returns>
        public static T RetrieveCachedProxy<T>(this EntityReference entity, IOrganizationService service) where T : BaseProxyClass
        {
            return RetrieveCachedProxy<T>(entity, service, new ColumnSet(true));
        }

        /// <summary>
        /// Retrieves the proxy from the cache.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T RetrieveCachedProxy<T>(this EntityReference entity, IOrganizationService service, params string[] columns) where T : BaseProxyClass
        {
            return RetrieveCachedProxy<T>(entity, service, GetColumnSet(columns));
        }

        /// <summary>
        /// Retrieves the proxy from the cache.
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="entity"></param>
        /// <param name="service"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public static T RetrieveCachedProxy<T>(this EntityReference entity, IOrganizationService service, ColumnSet columns) where T : BaseProxyClass
        {
            return service.RetrieveCachedProxy<T>(entity, columns);
        }

        /// <summary>
        /// Retrieves the entity metadata asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="logicalName"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<EntityMetadata> GetEntityMetadataAsync(this IOrganizationService service, string logicalName, EntityFilters filters)
        {
            return await System.Threading.Tasks.Task.Run(() =>
            {
                return GetEntityMetadata(service, logicalName, filters);
            });
        }

        /// <summary>
        /// Retrieves the entity metadata.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="logicalName"></param>
        /// <param name="filters"></param>
        /// <returns></returns>
        public static EntityMetadata GetEntityMetadata(this IOrganizationService service, string logicalName, EntityFilters filters)
        {
            var request = new RetrieveEntityRequest() { LogicalName = logicalName, EntityFilters = filters };
            return ((RetrieveEntityResponse)service.Execute(request)).EntityMetadata;
        }

        /// <summary>
        /// Retrieves the entity asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entityName"></param>
        /// <param name="id"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<Entity> RetrieveAsync(this IOrganizationService service, string entityName, Guid id, params string[] columns)
        {
            return await service.RetrieveAsync(entityName, id, GetColumnSet(columns));
        }

        /// <summary>
        /// Retrieves the entity asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<Entity> RetrieveAsync(this IOrganizationService service, EntityReference entity, params string[] columns)
        {
            return await service.RetrieveAsync(entity.LogicalName, entity.Id, GetColumnSet(columns));
        }

        /// <summary>
        /// Retrieves the entity asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<Entity> RetrieveAsync(this IOrganizationService service, EntityReference entity, ColumnSet columns)
        {
            return await service.RetrieveAsync(entity.LogicalName, entity.Id, columns);
        }

        /// <summary>
        /// Retrieves the entity asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entityName"></param>
        /// <param name="id"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<Entity> RetrieveAsync(this IOrganizationService service, string entityName, Guid id, ColumnSet columns)
        {
            return await System.Threading.Tasks.Task.Run(() =>
            {
                return service.Retrieve(entityName, id, columns);
            });
        }

        /// <summary>
        /// Copies the attribute values to the specified entity.
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="toEntity"></param>
        /// <param name="overwriteMissingValuesOnly"></param>
        public static void CopyTo(this Entity entity, Entity toEntity, bool overwriteMissingValuesOnly = true)
        {
            if (entity.Id != Guid.Empty && (toEntity.Id == Guid.Empty || !overwriteMissingValuesOnly)) toEntity.Id = entity.Id;
            foreach (var attribute in entity.Attributes)
            {
                if (!toEntity.Contains(attribute.Key) || !overwriteMissingValuesOnly)
                    toEntity[attribute.Key] = attribute.Value;
            }
        }

        /// <summary>
        /// Retrieves the entities based on the specified <see cref="QueryExpression"/>.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="query"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<EntityCollection> RetrieveMultipleAsync(this IOrganizationService service, QueryExpression query)
        {
            return await System.Threading.Tasks.Task.Run(() =>
            {
                return service.RetrieveMultiple(query);
            });
        }

        /// <summary>
        /// Retrieves the entities based on the specified <see cref="ConditionExpression"/>.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entityName"></param>
        /// <param name="condition"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<EntityCollection> RetrieveMultipleAsync(this IOrganizationService service, string entityName, ConditionExpression condition, ColumnSet columns)
        {
            return await System.Threading.Tasks.Task.Run(() =>
            {
                return service.RetrieveMultiple(entityName, condition, columns);
            });
        }

        /// <summary>
        /// Retrieves the entities based on the specified <see cref="ConditionExpression"/>.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entityName"></param>
        /// <param name="condition"></param>
        /// <param name="columns"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task<EntityCollection> RetrieveMultipleAsync(this IOrganizationService service, string entityName, ConditionExpression condition, params string[] columns)
        {
            return await System.Threading.Tasks.Task.Run(() =>
            {
                return service.RetrieveMultiple(entityName, condition, columns);
            });
        }

        /// <summary>
        /// Deletes the record asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="entity"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task DeleteAsync(this IOrganizationService service, EntityReference entity)
        {
            await DeleteAsync(service, entity.LogicalName, entity.Id);
        }

        /// <summary>
        /// Deletes the record asynchronously.
        /// </summary>
        /// <param name="service"></param>
        /// <param name="logicalName"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public async static System.Threading.Tasks.Task DeleteAsync(this IOrganizationService service, string logicalName, Guid id)
        {
            await System.Threading.Tasks.Task.Run(() =>
            {
                service.Delete(logicalName, id);
            });
        }
    }

    /// <summary>
    /// Interface for specifying if an entity has integrated security.
    /// </summary>
    public interface IAccessControlledEntity { }
}