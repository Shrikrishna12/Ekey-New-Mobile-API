// <auto-generated />

using TRA_MobileAPIs.ProxyClasses.Enums;
using System;
using System.Linq;
using System.Collections.Generic;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;
using Microsoft.Xrm.Sdk.Messages;
using Microsoft.Xrm.Sdk.Metadata;
using Microsoft.Xrm.Sdk.Client;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace TRA_MobileAPIs.ProxyClasses
{
    /// <summary>
    /// Proxy class that represents the 'incident' D365 table
    /// </summary>
    [EntityLogicalNameAttribute("incident")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("XrmToolkit", "7.3.5.0")]
    [DataContract(Name = "Entity", Namespace = "http://schemas.microsoft.com/xrm/2011/Contracts")]
    public partial class Incident : BaseProxyClass
    {
        public new const string LogicalName = "incident";
        public const int ObjectTypeCode = 112;
        public const string PrimaryIdAttribute = "incidentid";
        public const string PrimaryNameAttribute = "title";
        
        static Incident()
        {
            BaseProxyClass.RegisterProxyType(typeof(Incident), "incident");
            _textOptions = new Dictionary<string, eTextOptions>();
            _numberOptions = new Dictionary<string, eNumberOptions>();
            _errorStrings = new Dictionary<string, string>();
            TextError = "The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.";
            NumberError = "The value for attribute '{0}' must be between {2} and {3}. The value is {1}";
        }
        public Incident() : base(new Entity("incident")) { }
        public Incident(Entity original) : base(original) { }
        public static string GetLogicalName() { return BaseProxyClass.GetLogicalName<Incident>(); }

        /// <summary>
        /// Action to perform when the string value is greater than the allowed length.
        /// <para>This is the default for any string attribute in this Entity</para>
        /// </summary>
        public static eTextOptions TextOptions { get; set; }

        private static Dictionary<string, eTextOptions> _textOptions;
        /// <summary>
        /// Use this to set an action and error string when a value is greater than the allowed length
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater than the allowed length</param>
        /// <param name="errorString">Optional: Error to throw if the eTextOptions == ThrowError
        /// <para>If nothing is specified then the 'TextError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </param>
        public static void SetTextOptions(string logicalName, eTextOptions options, string errorString = null)
        {
            if (_textOptions.ContainsKey(logicalName)) { _textOptions[logicalName] = options; }
            else { _textOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }

        protected override eTextOptions GetTextOptions(string logicalName)
        {
            if (_textOptions.ContainsKey(logicalName)) { return _textOptions[logicalName]; }
            return TextOptions;
        }

        /// <summary>
        /// Action to perform when the number value is greater or less than the allowed value.
        /// <para>This is the default for any int, decimal, double, or money attribute in this Entity</para>
        /// </summary>
        public static eNumberOptions NumberOptions { get; set; }

        private static Dictionary<string, eNumberOptions> _numberOptions;

        /// <summary>
        /// Use this to set an action and error string when a value is greater or less than the allowed value
        /// </summary>
        /// <param name="logicalName">Name of Attribute</param>
        /// <param name="options">Action to perform when the value is greater or less than the allowed value</param>
        /// <param name="errorString">Optional: Error to throw if the eNumberOptions == ThrowError
        /// <para>If nothing is specified then the 'NumberError' string is used.</para>
        /// <para>You may use the following parameters:</para>
        /// <para>{0} = Attribute Logical Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </param>
        public static void SetNumberOptions(string logicalName, eNumberOptions options, string errorString = null)
        {
            if (_numberOptions.ContainsKey(logicalName)) { _numberOptions[logicalName] = options; }
            else { _numberOptions.Add(logicalName, options); }
            if (!string.IsNullOrEmpty(errorString))
            {
                if (_errorStrings.ContainsKey(logicalName)) { _errorStrings[logicalName] = errorString; }
                else { _errorStrings.Add(logicalName, errorString); }
            }
            else if (_errorStrings.ContainsKey(logicalName)) { _errorStrings.Remove(logicalName); }
        }
        protected override eNumberOptions GetNumberOptions(string logicalName)
        {
            if (_numberOptions.ContainsKey(logicalName)) { return _numberOptions[logicalName]; }
            return NumberOptions;
        }
        private static Dictionary<string, string> _errorStrings;
        protected override string GetErrorString(string attributeName, BaseProxyClass.eErrorType defaultErrorType)
        {
            if (_errorStrings.ContainsKey(attributeName))
            {
                return _errorStrings[attributeName];
            }
            return defaultErrorType == BaseProxyClass.eErrorType.Text ? TextError : NumberError;
        }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' cannot be longer than {3} characters. The length of the value is {2} characters.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Length</para>
        /// <para>{3} = Max Length</para>
        /// </summary>
        public static string TextError { get; set; }

        /// <summary>
        /// <para>Default error string is: The value for attribute '{0}' must be between {2} and {3}. The value is {1}.</para>
        /// <para>You may use the following parameters</para>
        /// <para>{0} = Attribute Name</para>
        /// <para>{1} = Value</para>
        /// <para>{2} = Min Value</para>
        /// <para>{3} = Max Value</para>
        /// </summary>
        public static string NumberError { get; set; }
        /// <summary>
        /// <para>Logical Name: accountid</para>
        /// </summary>
        [AttributeLogicalName("accountid")]
        public EntityReference AccountId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("accountid");
            }
        }

        /// <summary>
        /// <para>Logical Name: accountidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("accountidname")]
        public string AccountIdName
        {
            get
            {
                return this.GetPropertyValue<string>("accountidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: accountidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("accountidyominame")]
        public string AccountIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("accountidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: activitiescomplete</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("activitiescomplete")]
        public bool? ActivitiesComplete
        {
            get
            {
                return this.GetPropertyValue<bool?>("activitiescomplete");
            }
            set
            {
                this.SetPropertyValue<bool?>("activitiescomplete", value, nameof(ActivitiesComplete));
            }
        }


        /// <summary>
        /// <para>Logical Name: actualserviceunits</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// </summary>
        [AttributeLogicalName("actualserviceunits")]
        public int? ActualServiceUnits
        {
            get
            {
                return this.GetPropertyValue<int?>("actualserviceunits");
            }
            set
            {
                this.SetPropertyValue("actualserviceunits", (int?)value, (int)0, (int)1000000000, nameof(ActualServiceUnits));
            }
        }

        /// <summary>
        /// <para>Logical Name: billedserviceunits</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// </summary>
        [AttributeLogicalName("billedserviceunits")]
        public int? BilledServiceUnits
        {
            get
            {
                return this.GetPropertyValue<int?>("billedserviceunits");
            }
            set
            {
                this.SetPropertyValue("billedserviceunits", (int?)value, (int)0, (int)1000000000, nameof(BilledServiceUnits));
            }
        }

        /// <summary>
        /// <para>Logical Name: blockedprofile</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("blockedprofile")]
        public bool? BlockedProfile
        {
            get
            {
                return this.GetPropertyValue<bool?>("blockedprofile");
            }
            set
            {
                this.SetPropertyValue<bool?>("blockedprofile", value, nameof(BlockedProfile));
            }
        }


        /// <summary>
        /// Logical Name: caseorigincode
        /// </summary>
        [AttributeLogicalName("caseorigincode")]
        public incident_caseorigincode? CaseOriginCode
        {
            get
            {
                if (CaseOriginCode_OptionSetValue != null) { return (incident_caseorigincode)CaseOriginCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.CaseOriginCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.CaseOriginCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: caseorigincode</para>
        /// </summary>
        [AttributeLogicalName("caseorigincode")]
        public OptionSetValue CaseOriginCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("caseorigincode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("caseorigincode", value, nameof(CaseOriginCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string CaseOriginCode_Text(IOrganizationService service)
        {
            return this.CaseOriginCode_OptionSetValue.GetOptionSetText(service, this, "caseorigincode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string CaseOriginCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.CaseOriginCode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: casetypecode
        /// </summary>
        [AttributeLogicalName("casetypecode")]
        public incident_casetypecode? CaseTypeCode
        {
            get
            {
                if (CaseTypeCode_OptionSetValue != null) { return (incident_casetypecode)CaseTypeCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.CaseTypeCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.CaseTypeCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: casetypecode</para>
        /// </summary>
        [AttributeLogicalName("casetypecode")]
        public OptionSetValue CaseTypeCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("casetypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("casetypecode", value, nameof(CaseTypeCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string CaseTypeCode_Text(IOrganizationService service)
        {
            return this.CaseTypeCode_OptionSetValue.GetOptionSetText(service, this, "casetypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string CaseTypeCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.CaseTypeCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: checkemail</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("checkemail")]
        public bool? CheckEmail
        {
            get
            {
                return this.GetPropertyValue<bool?>("checkemail");
            }
            set
            {
                this.SetPropertyValue<bool?>("checkemail", value, nameof(CheckEmail));
            }
        }


        /// <summary>
        /// <para>Logical Name: contactid</para>
        /// </summary>
        [AttributeLogicalName("contactid")]
        public EntityReference ContactId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("contactid");
            }
        }

        /// <summary>
        /// <para>Logical Name: contactidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("contactidname")]
        public string ContactIdName
        {
            get
            {
                return this.GetPropertyValue<string>("contactidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: contactidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("contactidyominame")]
        public string ContactIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("contactidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: contractdetailid</para>
        /// </summary>
        [AttributeLogicalName("contractdetailid")]
        public EntityReference ContractDetailId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("contractdetailid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("contractdetailid", value, nameof(ContractDetailId));
            }
        }

        /// <summary>
        /// <para>Logical Name: contractdetailidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("contractdetailidname")]
        public string ContractDetailIdName
        {
            get
            {
                return this.GetPropertyValue<string>("contractdetailidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: contractid</para>
        /// </summary>
        [AttributeLogicalName("contractid")]
        public EntityReference ContractId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("contractid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("contractid", value, nameof(ContractId));
            }
        }

        /// <summary>
        /// <para>Logical Name: contractidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("contractidname")]
        public string ContractIdName
        {
            get
            {
                return this.GetPropertyValue<string>("contractidname");
            }
        }

        /// <summary>
        /// Logical Name: contractservicelevelcode
        /// </summary>
        [AttributeLogicalName("contractservicelevelcode")]
        public incident_contractservicelevelcode? ContractServiceLevelCode
        {
            get
            {
                if (ContractServiceLevelCode_OptionSetValue != null) { return (incident_contractservicelevelcode)ContractServiceLevelCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.ContractServiceLevelCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.ContractServiceLevelCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: contractservicelevelcode</para>
        /// </summary>
        [AttributeLogicalName("contractservicelevelcode")]
        public OptionSetValue ContractServiceLevelCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("contractservicelevelcode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("contractservicelevelcode", value, nameof(ContractServiceLevelCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string ContractServiceLevelCode_Text(IOrganizationService service)
        {
            return this.ContractServiceLevelCode_OptionSetValue.GetOptionSetText(service, this, "contractservicelevelcode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string ContractServiceLevelCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.ContractServiceLevelCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: createdby</para>
        /// </summary>
        [AttributeLogicalName("createdby")]
        public EntityReference CreatedBy
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalparty</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalparty")]
        public EntityReference CreatedByExternalParty
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdbyexternalparty");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalpartyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalpartyname")]
        public string CreatedByExternalPartyName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyexternalpartyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyexternalpartyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyexternalpartyyominame")]
        public string CreatedByExternalPartyYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyexternalpartyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyname")]
        public string CreatedByName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdbyyominame")]
        public string CreatedByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("createdbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdon</para>
        /// </summary>
        [AttributeLogicalName("createdon")]
        public DateTime? CreatedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("createdon");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfby")]
        public EntityReference CreatedOnBehalfBy
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("createdonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyname")]
        public string CreatedOnBehalfByName
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: createdonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("createdonbehalfbyyominame")]
        public string CreatedOnBehalfByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("createdonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: customercontacted</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("customercontacted")]
        public bool? CustomerContacted
        {
            get
            {
                return this.GetPropertyValue<bool?>("customercontacted");
            }
            set
            {
                this.SetPropertyValue<bool?>("customercontacted", value, nameof(CustomerContacted));
            }
        }

        /// <summary>
        /// <para>Logical Name: customerid</para>
        /// </summary>
        [AttributeLogicalName("customerid")]
        public EntityReference CustomerId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("customerid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("customerid", value, nameof(CustomerId));
            }
        }

        /// <summary>
        /// <para>Logical Name: customeridname</para>
        /// <para>Max Length: 160 characters</para>
        /// </summary>
        [AttributeLogicalName("customeridname")]
        public string CustomerIdName
        {
            get
            {
                return this.GetPropertyValue<string>("customeridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: customeridtype</para>
        /// </summary>
        [AttributeLogicalName("customeridtype")]
        public string CustomerIdType
        {
            get
            {
                return this.GetPropertyValue<string>("customeridtype");
            }
            set
            {
                this.SetPropertyValue<string>("customeridtype", value, nameof(CustomerIdType));
            }
        }

        /// <summary>
        /// <para>Logical Name: customeridyominame</para>
        /// <para>Max Length: 450 characters</para>
        /// </summary>
        [AttributeLogicalName("customeridyominame")]
        public string CustomerIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("customeridyominame");
            }
        }

        /// <summary>
        /// Logical Name: customersatisfactioncode
        /// </summary>
        [AttributeLogicalName("customersatisfactioncode")]
        public incident_customersatisfactioncode? CustomerSatisfactionCode
        {
            get
            {
                if (CustomerSatisfactionCode_OptionSetValue != null) { return (incident_customersatisfactioncode)CustomerSatisfactionCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.CustomerSatisfactionCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.CustomerSatisfactionCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: customersatisfactioncode</para>
        /// </summary>
        [AttributeLogicalName("customersatisfactioncode")]
        public OptionSetValue CustomerSatisfactionCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("customersatisfactioncode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("customersatisfactioncode", value, nameof(CustomerSatisfactionCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string CustomerSatisfactionCode_Text(IOrganizationService service)
        {
            return this.CustomerSatisfactionCode_OptionSetValue.GetOptionSetText(service, this, "customersatisfactioncode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string CustomerSatisfactionCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.CustomerSatisfactionCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: decremententitlementterm</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("decremententitlementterm")]
        public bool? DecrementEntitlementTerm
        {
            get
            {
                return this.GetPropertyValue<bool?>("decremententitlementterm");
            }
            set
            {
                this.SetPropertyValue<bool?>("decremententitlementterm", value, nameof(DecrementEntitlementTerm));
            }
        }


        /// <summary>
        /// <para>Logical Name: description</para>
        /// <para>Max Length: 20000 characters</para>
        /// </summary>
        [AttributeLogicalName("description")]
        public string Description
        {
            get
            {
                return this.GetPropertyValue<string>("description");
            }
            set
            {
                this.SetPropertyValue("description", value, 20000, nameof(Description));
            }
        }

        /// <summary>
        /// <para>Logical Name: entitlementid</para>
        /// </summary>
        [AttributeLogicalName("entitlementid")]
        public EntityReference EntitlementId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("entitlementid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("entitlementid", value, nameof(EntitlementId));
            }
        }

        /// <summary>
        /// <para>Logical Name: entitlementidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("entitlementidname")]
        public string EntitlementIdName
        {
            get
            {
                return this.GetPropertyValue<string>("entitlementidname");
            }
        }


        /// <summary>
        /// <para>Logical Name: entityimage_timestamp</para>
        /// </summary>
        [AttributeLogicalName("entityimage_timestamp")]
        public int? EntityImage_Timestamp
        {
            get
            {
                return this.GetPropertyValue<int?>("entityimage_timestamp");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimage_url</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("entityimage_url")]
        public string EntityImage_URL
        {
            get
            {
                return this.GetPropertyValue<string>("entityimage_url");
            }
        }

        /// <summary>
        /// <para>Logical Name: entityimageid</para>
        /// </summary>
        [AttributeLogicalName("entityimageid")]
        public Guid EntityImageId
        {
            get
            {
                return this.GetPropertyValue<Guid>("entityimageid");
            }
        }

        /// <summary>
        /// <para>Logical Name: escalatedon</para>
        /// </summary>
        [AttributeLogicalName("escalatedon")]
        public DateTime? EscalatedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("escalatedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: exchangerate</para>
        /// <para>Minimum Value: 0.0000000001</para>
        /// <para>Maximum Value: 100000000000</para>
        /// <para>Precision: 10</para>
        /// </summary>
        [AttributeLogicalName("exchangerate")]
        public decimal? ExchangeRate
        {
            get
            {
                return this.GetPropertyValue<decimal?>("exchangerate");
            }
        }

        /// <summary>
        /// <para>Logical Name: existingcase</para>
        /// </summary>
        [AttributeLogicalName("existingcase")]
        public EntityReference ExistingCase
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("existingcase");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("existingcase", value, nameof(ExistingCase));
            }
        }

        /// <summary>
        /// <para>Logical Name: firstresponsebykpiid</para>
        /// </summary>
        [AttributeLogicalName("firstresponsebykpiid")]
        public EntityReference FirstResponseByKPIId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("firstresponsebykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("firstresponsebykpiid", value, nameof(FirstResponseByKPIId));
            }
        }

        /// <summary>
        /// <para>Logical Name: firstresponsebykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("firstresponsebykpiidname")]
        public string FirstResponseByKPIIdName
        {
            get
            {
                return this.GetPropertyValue<string>("firstresponsebykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: firstresponsesent</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("firstresponsesent")]
        public bool? FirstResponseSent
        {
            get
            {
                return this.GetPropertyValue<bool?>("firstresponsesent");
            }
            set
            {
                this.SetPropertyValue<bool?>("firstresponsesent", value, nameof(FirstResponseSent));
            }
        }


        /// <summary>
        /// Logical Name: firstresponseslastatus
        /// </summary>
        [AttributeLogicalName("firstresponseslastatus")]
        public incident_firstresponseslastatus? FirstResponseSLAStatus
        {
            get
            {
                if (FirstResponseSLAStatus_OptionSetValue != null) { return (incident_firstresponseslastatus)FirstResponseSLAStatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.FirstResponseSLAStatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.FirstResponseSLAStatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: firstresponseslastatus</para>
        /// </summary>
        [AttributeLogicalName("firstresponseslastatus")]
        public OptionSetValue FirstResponseSLAStatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("firstresponseslastatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("firstresponseslastatus", value, nameof(FirstResponseSLAStatus_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string FirstResponseSLAStatus_Text(IOrganizationService service)
        {
            return this.FirstResponseSLAStatus_OptionSetValue.GetOptionSetText(service, this, "firstresponseslastatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string FirstResponseSLAStatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.FirstResponseSLAStatus_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: followupby</para>
        /// </summary>
        [AttributeLogicalName("followupby")]
        public DateTime? FollowupBy
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("followupby");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("followupby", value, nameof(FollowupBy));
            }
        }

        /// <summary>
        /// <para>Logical Name: followuptaskcreated</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("followuptaskcreated")]
        public bool? FollowUpTaskCreated
        {
            get
            {
                return this.GetPropertyValue<bool?>("followuptaskcreated");
            }
            set
            {
                this.SetPropertyValue<bool?>("followuptaskcreated", value, nameof(FollowUpTaskCreated));
            }
        }


        /// <summary>
        /// <para>Logical Name: importsequencenumber</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("importsequencenumber")]
        public int? ImportSequenceNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("importsequencenumber");
            }
            set
            {
                this.SetPropertyValue("importsequencenumber", (int?)value, (int)-2147483648, (int)2147483647, nameof(ImportSequenceNumber));
            }
        }

        /// <summary>
        /// <para>Key Property (Uniqueidentifier)</para>
        /// <para>Logical Name: incidentid</para>
        /// </summary>
        [AttributeLogicalName("incidentid")]
        public Guid IncidentId
        {
            get
            {
                return base.Attributes.Contains("incidentid") ? this.GetAttributeValue<Guid>("incidentid") : base.Id;
            }
            set
            {
                base.Id = value;
                base.Attributes["incidentid"] = value;
                base.SetPropertyValue("incidentid", value, nameof(IncidentId));
            }
        }

        /// <summary>
        /// Logical Name: incidentstagecode
        /// </summary>
        [AttributeLogicalName("incidentstagecode")]
        public incident_incidentstagecode? IncidentStageCode
        {
            get
            {
                if (IncidentStageCode_OptionSetValue != null) { return (incident_incidentstagecode)IncidentStageCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.IncidentStageCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.IncidentStageCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: incidentstagecode</para>
        /// </summary>
        [AttributeLogicalName("incidentstagecode")]
        public OptionSetValue IncidentStageCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("incidentstagecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("incidentstagecode", value, nameof(IncidentStageCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string IncidentStageCode_Text(IOrganizationService service)
        {
            return this.IncidentStageCode_OptionSetValue.GetOptionSetText(service, this, "incidentstagecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string IncidentStageCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.IncidentStageCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: influencescore</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 1000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("influencescore")]
        public double? InfluenceScore
        {
            get
            {
                return this.GetPropertyValue<double?>("influencescore");
            }
            set
            {
                this.SetPropertyValue("influencescore", (double?)value, (double)0, (double)1000000000, nameof(InfluenceScore));
            }
        }

        /// <summary>
        /// <para>Logical Name: isdecrementing</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("isdecrementing")]
        public bool? IsDecrementing
        {
            get
            {
                return this.GetPropertyValue<bool?>("isdecrementing");
            }
            set
            {
                this.SetPropertyValue<bool?>("isdecrementing", value, nameof(IsDecrementing));
            }
        }


        /// <summary>
        /// <para>Logical Name: isescalated</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("isescalated")]
        public bool? IsEscalated
        {
            get
            {
                return this.GetPropertyValue<bool?>("isescalated");
            }
            set
            {
                this.SetPropertyValue<bool?>("isescalated", value, nameof(IsEscalated));
            }
        }


        /// <summary>
        /// <para>Logical Name: kbarticleid</para>
        /// </summary>
        [AttributeLogicalName("kbarticleid")]
        public EntityReference KbArticleId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("kbarticleid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("kbarticleid", value, nameof(KbArticleId));
            }
        }

        /// <summary>
        /// <para>Logical Name: kbarticleidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("kbarticleidname")]
        public string KbArticleIdName
        {
            get
            {
                return this.GetPropertyValue<string>("kbarticleidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: lastonholdtime</para>
        /// </summary>
        [AttributeLogicalName("lastonholdtime")]
        public DateTime? LastOnHoldTime
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("lastonholdtime");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("lastonholdtime", value, nameof(LastOnHoldTime));
            }
        }

        /// <summary>
        /// <para>Logical Name: masterid</para>
        /// </summary>
        [AttributeLogicalName("masterid")]
        public EntityReference MasterId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("masterid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("masterid", value, nameof(MasterId));
            }
        }

        /// <summary>
        /// <para>Logical Name: masteridname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("masteridname")]
        public string MasterIdName
        {
            get
            {
                return this.GetPropertyValue<string>("masteridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: merged</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("merged")]
        public bool? Merged
        {
            get
            {
                return this.GetPropertyValue<bool?>("merged");
            }
        }


        /// <summary>
        /// Logical Name: messagetypecode
        /// </summary>
        [AttributeLogicalName("messagetypecode")]
        public socialactivity_postmessagetype? MessageTypeCode
        {
            get
            {
                if (MessageTypeCode_OptionSetValue != null) { return (socialactivity_postmessagetype)MessageTypeCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.MessageTypeCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.MessageTypeCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: messagetypecode</para>
        /// </summary>
        [AttributeLogicalName("messagetypecode")]
        public OptionSetValue MessageTypeCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("messagetypecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("messagetypecode", value, nameof(MessageTypeCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string MessageTypeCode_Text(IOrganizationService service)
        {
            return this.MessageTypeCode_OptionSetValue.GetOptionSetText(service, this, "messagetypecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string MessageTypeCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.MessageTypeCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: modifiedby</para>
        /// </summary>
        [AttributeLogicalName("modifiedby")]
        public EntityReference ModifiedBy
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalparty</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalparty")]
        public EntityReference ModifiedByExternalParty
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedbyexternalparty");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalpartyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalpartyname")]
        public string ModifiedByExternalPartyName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyexternalpartyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyexternalpartyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyexternalpartyyominame")]
        public string ModifiedByExternalPartyYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyexternalpartyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyname")]
        public string ModifiedByName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedbyyominame")]
        public string ModifiedByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedon</para>
        /// </summary>
        [AttributeLogicalName("modifiedon")]
        public DateTime? ModifiedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("modifiedon");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfby</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfby")]
        public EntityReference ModifiedOnBehalfBy
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("modifiedonbehalfby");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyname")]
        public string ModifiedOnBehalfByName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyname");
            }
        }

        /// <summary>
        /// <para>Logical Name: modifiedonbehalfbyyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("modifiedonbehalfbyyominame")]
        public string ModifiedOnBehalfByYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("modifiedonbehalfbyyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: new_kpiid</para>
        /// </summary>
        [AttributeLogicalName("new_kpiid")]
        public EntityReference new_KPIId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("new_kpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("new_kpiid", value, nameof(new_KPIId));
            }
        }

        /// <summary>
        /// <para>Logical Name: new_kpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("new_kpiidname")]
        public string new_KPIIdName
        {
            get
            {
                return this.GetPropertyValue<string>("new_kpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: new_ticketnumber</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("new_ticketnumber")]
        public string new_TicketNumber
        {
            get
            {
                return this.GetPropertyValue<string>("new_ticketnumber");
            }
            set
            {
                this.SetPropertyValue("new_ticketnumber", value, 100, nameof(new_TicketNumber));
            }
        }

        /// <summary>
        /// <para>Logical Name: numberofchildincidents</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("numberofchildincidents")]
        public int? NumberOfChildIncidents
        {
            get
            {
                return this.GetPropertyValue<int?>("numberofchildincidents");
            }
        }

        /// <summary>
        /// <para>Logical Name: onholdtime</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("onholdtime")]
        public int? OnHoldTime
        {
            get
            {
                return this.GetPropertyValue<int?>("onholdtime");
            }
        }

        /// <summary>
        /// <para>Logical Name: overriddencreatedon</para>
        /// </summary>
        [AttributeLogicalName("overriddencreatedon")]
        public DateTime? OverriddenCreatedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("overriddencreatedon");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("overriddencreatedon", value, nameof(OverriddenCreatedOn));
            }
        }

        /// <summary>
        /// <para>Logical Name: ownerid</para>
        /// </summary>
        [AttributeLogicalName("ownerid")]
        public EntityReference OwnerId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("ownerid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("ownerid", value, nameof(OwnerId));
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("owneridname")]
        public string OwnerIdName
        {
            get
            {
                return this.GetPropertyValue<string>("owneridname");
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridtype</para>
        /// </summary>
        [AttributeLogicalName("owneridtype")]
        public string OwnerIdType
        {
            get
            {
                return this.GetPropertyValue<string>("owneridtype");
            }
            set
            {
                this.SetPropertyValue<string>("owneridtype", value, nameof(OwnerIdType));
            }
        }

        /// <summary>
        /// <para>Logical Name: owneridyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("owneridyominame")]
        public string OwnerIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("owneridyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: owningbusinessunit</para>
        /// </summary>
        [AttributeLogicalName("owningbusinessunit")]
        public EntityReference OwningBusinessUnit
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owningbusinessunit");
            }
        }

        /// <summary>
        /// <para>Logical Name: owningteam</para>
        /// </summary>
        [AttributeLogicalName("owningteam")]
        public EntityReference OwningTeam
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owningteam");
            }
        }

        /// <summary>
        /// <para>Logical Name: owninguser</para>
        /// </summary>
        [AttributeLogicalName("owninguser")]
        public EntityReference OwningUser
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("owninguser");
            }
        }

        /// <summary>
        /// <para>Logical Name: parentcaseid</para>
        /// </summary>
        [AttributeLogicalName("parentcaseid")]
        public EntityReference ParentCaseId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("parentcaseid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("parentcaseid", value, nameof(ParentCaseId));
            }
        }

        /// <summary>
        /// <para>Logical Name: parentcaseidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("parentcaseidname")]
        public string ParentCaseIdName
        {
            get
            {
                return this.GetPropertyValue<string>("parentcaseidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactid</para>
        /// </summary>
        [AttributeLogicalName("primarycontactid")]
        public EntityReference PrimaryContactId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("primarycontactid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("primarycontactid", value, nameof(PrimaryContactId));
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("primarycontactidname")]
        public string PrimaryContactIdName
        {
            get
            {
                return this.GetPropertyValue<string>("primarycontactidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: primarycontactidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("primarycontactidyominame")]
        public string PrimaryContactIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("primarycontactidyominame");
            }
        }

        /// <summary>
        /// Logical Name: prioritycode
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public incident_prioritycode? PriorityCode
        {
            get
            {
                if (PriorityCode_OptionSetValue != null) { return (incident_prioritycode)PriorityCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.PriorityCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.PriorityCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: prioritycode</para>
        /// </summary>
        [AttributeLogicalName("prioritycode")]
        public OptionSetValue PriorityCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("prioritycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("prioritycode", value, nameof(PriorityCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string PriorityCode_Text(IOrganizationService service)
        {
            return this.PriorityCode_OptionSetValue.GetOptionSetText(service, this, "prioritycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string PriorityCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.PriorityCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: processid</para>
        /// </summary>
        [AttributeLogicalName("processid")]
        public Guid ProcessId
        {
            get
            {
                return this.GetPropertyValue<Guid>("processid");
            }
            set
            {
                this.SetPropertyValue<Guid>("processid", value, nameof(ProcessId));
            }
        }

        /// <summary>
        /// <para>Logical Name: productid</para>
        /// </summary>
        [AttributeLogicalName("productid")]
        public EntityReference ProductId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("productid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("productid", value, nameof(ProductId));
            }
        }

        /// <summary>
        /// <para>Logical Name: productidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("productidname")]
        public string ProductIdName
        {
            get
            {
                return this.GetPropertyValue<string>("productidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: productserialnumber</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("productserialnumber")]
        public string ProductSerialNumber
        {
            get
            {
                return this.GetPropertyValue<string>("productserialnumber");
            }
            set
            {
                this.SetPropertyValue("productserialnumber", value, 100, nameof(ProductSerialNumber));
            }
        }

        /// <summary>
        /// <para>Logical Name: resolveby</para>
        /// </summary>
        [AttributeLogicalName("resolveby")]
        public DateTime? ResolveBy
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("resolveby");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("resolveby", value, nameof(ResolveBy));
            }
        }

        /// <summary>
        /// <para>Logical Name: resolvebykpiid</para>
        /// </summary>
        [AttributeLogicalName("resolvebykpiid")]
        public EntityReference ResolveByKPIId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("resolvebykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("resolvebykpiid", value, nameof(ResolveByKPIId));
            }
        }

        /// <summary>
        /// <para>Logical Name: resolvebykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("resolvebykpiidname")]
        public string ResolveByKPIIdName
        {
            get
            {
                return this.GetPropertyValue<string>("resolvebykpiidname");
            }
        }

        /// <summary>
        /// Logical Name: resolvebyslastatus
        /// </summary>
        [AttributeLogicalName("resolvebyslastatus")]
        public incident_resolvebyslastatus? ResolveBySLAStatus
        {
            get
            {
                if (ResolveBySLAStatus_OptionSetValue != null) { return (incident_resolvebyslastatus)ResolveBySLAStatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.ResolveBySLAStatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.ResolveBySLAStatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: resolvebyslastatus</para>
        /// </summary>
        [AttributeLogicalName("resolvebyslastatus")]
        public OptionSetValue ResolveBySLAStatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("resolvebyslastatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("resolvebyslastatus", value, nameof(ResolveBySLAStatus_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string ResolveBySLAStatus_Text(IOrganizationService service)
        {
            return this.ResolveBySLAStatus_OptionSetValue.GetOptionSetText(service, this, "resolvebyslastatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string ResolveBySLAStatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.ResolveBySLAStatus_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: responseby</para>
        /// </summary>
        [AttributeLogicalName("responseby")]
        public DateTime? ResponseBy
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("responseby");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("responseby", value, nameof(ResponseBy));
            }
        }

        /// <summary>
        /// <para>Logical Name: responsiblecontactid</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactid")]
        public EntityReference ResponsibleContactId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("responsiblecontactid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("responsiblecontactid", value, nameof(ResponsibleContactId));
            }
        }

        /// <summary>
        /// <para>Logical Name: responsiblecontactidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactidname")]
        public string ResponsibleContactIdName
        {
            get
            {
                return this.GetPropertyValue<string>("responsiblecontactidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: responsiblecontactidyominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("responsiblecontactidyominame")]
        public string ResponsibleContactIdYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("responsiblecontactidyominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: routecase</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("routecase")]
        public bool? RouteCase
        {
            get
            {
                return this.GetPropertyValue<bool?>("routecase");
            }
            set
            {
                this.SetPropertyValue<bool?>("routecase", value, nameof(RouteCase));
            }
        }

        /// <summary>
        /// <para>Logical Name: sentimentvalue</para>
        /// <para>Minimum Value: -100000000000</para>
        /// <para>Maximum Value: 100000000000</para>
        /// <para>Precision: 2</para>
        /// </summary>
        [AttributeLogicalName("sentimentvalue")]
        public double? SentimentValue
        {
            get
            {
                return this.GetPropertyValue<double?>("sentimentvalue");
            }
            set
            {
                this.SetPropertyValue("sentimentvalue", (double?)value, (double)-100000000000, (double)100000000000, nameof(SentimentValue));
            }
        }

        /// <summary>
        /// Logical Name: servicestage
        /// </summary>
        [AttributeLogicalName("servicestage")]
        public servicestage? ServiceStage
        {
            get
            {
                if (ServiceStage_OptionSetValue != null) { return (servicestage)ServiceStage_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.ServiceStage_OptionSetValue = new OptionSetValue((int)value); }
                else this.ServiceStage_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: servicestage</para>
        /// </summary>
        [AttributeLogicalName("servicestage")]
        public OptionSetValue ServiceStage_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("servicestage");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("servicestage", value, nameof(ServiceStage_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string ServiceStage_Text(IOrganizationService service)
        {
            return this.ServiceStage_OptionSetValue.GetOptionSetText(service, this, "servicestage");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string ServiceStage_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.ServiceStage_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: severitycode
        /// </summary>
        [AttributeLogicalName("severitycode")]
        public incident_severitycode? SeverityCode
        {
            get
            {
                if (SeverityCode_OptionSetValue != null) { return (incident_severitycode)SeverityCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.SeverityCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.SeverityCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: severitycode</para>
        /// </summary>
        [AttributeLogicalName("severitycode")]
        public OptionSetValue SeverityCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("severitycode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("severitycode", value, nameof(SeverityCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string SeverityCode_Text(IOrganizationService service)
        {
            return this.SeverityCode_OptionSetValue.GetOptionSetText(service, this, "severitycode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string SeverityCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.SeverityCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: slaid</para>
        /// </summary>
        [AttributeLogicalName("slaid")]
        public EntityReference SLAId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("slaid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("slaid", value, nameof(SLAId));
            }
        }

        /// <summary>
        /// <para>Logical Name: slainvokedid</para>
        /// </summary>
        [AttributeLogicalName("slainvokedid")]
        public EntityReference SLAInvokedId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("slainvokedid");
            }
        }

        /// <summary>
        /// <para>Logical Name: slainvokedidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("slainvokedidname")]
        public string SLAInvokedIdName
        {
            get
            {
                return this.GetPropertyValue<string>("slainvokedidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: slaname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("slaname")]
        public string SLAName
        {
            get
            {
                return this.GetPropertyValue<string>("slaname");
            }
        }

        /// <summary>
        /// <para>Logical Name: socialprofileid</para>
        /// </summary>
        [AttributeLogicalName("socialprofileid")]
        public EntityReference SocialProfileId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("socialprofileid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("socialprofileid", value, nameof(SocialProfileId));
            }
        }

        /// <summary>
        /// <para>Logical Name: socialprofileidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("socialprofileidname")]
        public string SocialProfileIdName
        {
            get
            {
                return this.GetPropertyValue<string>("socialprofileidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: stageid</para>
        /// </summary>
        [AttributeLogicalName("stageid")]
        public Guid StageId
        {
            get
            {
                return this.GetPropertyValue<Guid>("stageid");
            }
            set
            {
                this.SetPropertyValue<Guid>("stageid", value, nameof(StageId));
            }
        }

        /// <summary>
        /// Logical Name: statecode
        /// </summary>
        [AttributeLogicalName("statecode")]
        public incident_statecode? StateCode
        {
            get
            {
                if (StateCode_OptionSetValue != null) { return (incident_statecode)StateCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.StateCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.StateCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statecode</para>
        /// </summary>
        [AttributeLogicalName("statecode")]
        public OptionSetValue StateCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statecode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statecode", value, nameof(StateCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string StateCode_Text(IOrganizationService service)
        {
            return this.StateCode_OptionSetValue.GetOptionSetText(service, this, "statecode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string StateCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.StateCode_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: statuscode
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public incident_statuscode? StatusCode
        {
            get
            {
                if (StatusCode_OptionSetValue != null) { return (incident_statuscode)StatusCode_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.StatusCode_OptionSetValue = new OptionSetValue((int)value); }
                else this.StatusCode_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: statuscode</para>
        /// </summary>
        [AttributeLogicalName("statuscode")]
        public OptionSetValue StatusCode_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("statuscode");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("statuscode", value, nameof(StatusCode_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string StatusCode_Text(IOrganizationService service)
        {
            return this.StatusCode_OptionSetValue.GetOptionSetText(service, this, "statuscode");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string StatusCode_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.StatusCode_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: subjectid</para>
        /// </summary>
        [AttributeLogicalName("subjectid")]
        public EntityReference SubjectId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("subjectid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("subjectid", value, nameof(SubjectId));
            }
        }

        /// <summary>
        /// <para>Logical Name: subjectidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("subjectidname")]
        public string SubjectIdName
        {
            get
            {
                return this.GetPropertyValue<string>("subjectidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: ticketnumber</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("ticketnumber")]
        public string TicketNumber
        {
            get
            {
                return this.GetPropertyValue<string>("ticketnumber");
            }
            set
            {
                this.SetPropertyValue("ticketnumber", value, 100, nameof(TicketNumber));
            }
        }

        /// <summary>
        /// <para>Logical Name: timezoneruleversionnumber</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("timezoneruleversionnumber")]
        public int? TimeZoneRuleVersionNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("timezoneruleversionnumber");
            }
            set
            {
                this.SetPropertyValue("timezoneruleversionnumber", (int?)value, (int)-1, (int)2147483647, nameof(TimeZoneRuleVersionNumber));
            }
        }

        /// <summary>
        /// <para>Logical Name: title</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("title")]
        public string Title
        {
            get
            {
                return this.GetPropertyValue<string>("title");
            }
            set
            {
                this.SetPropertyValue("title", value, 200, nameof(Title));
            }
        }

        /// <summary>
        /// Logical Name: tra_acceptedbyserviceprovider
        /// </summary>
        [AttributeLogicalName("tra_acceptedbyserviceprovider")]
        public tra_incident_tra_acceptedbyserviceprovider? tra_acceptedbyserviceprovider
        {
            get
            {
                if (tra_acceptedbyserviceprovider_OptionSetValue != null) { return (tra_incident_tra_acceptedbyserviceprovider)tra_acceptedbyserviceprovider_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_acceptedbyserviceprovider_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_acceptedbyserviceprovider_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_acceptedbyserviceprovider</para>
        /// </summary>
        [AttributeLogicalName("tra_acceptedbyserviceprovider")]
        public OptionSetValue tra_acceptedbyserviceprovider_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_acceptedbyserviceprovider");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_acceptedbyserviceprovider", value, nameof(tra_acceptedbyserviceprovider_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_acceptedbyserviceprovider_Text(IOrganizationService service)
        {
            return this.tra_acceptedbyserviceprovider_OptionSetValue.GetOptionSetText(service, this, "tra_acceptedbyserviceprovider");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_acceptedbyserviceprovider_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_acceptedbyserviceprovider_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: tra_acceptrejection
        /// </summary>
        [AttributeLogicalName("tra_acceptrejection")]
        public tra_incident_tra_acceptrejection? tra_acceptrejection
        {
            get
            {
                if (tra_acceptrejection_OptionSetValue != null) { return (tra_incident_tra_acceptrejection)tra_acceptrejection_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_acceptrejection_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_acceptrejection_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_acceptrejection</para>
        /// </summary>
        [AttributeLogicalName("tra_acceptrejection")]
        public OptionSetValue tra_acceptrejection_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_acceptrejection");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_acceptrejection", value, nameof(tra_acceptrejection_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_acceptrejection_Text(IOrganizationService service)
        {
            return this.tra_acceptrejection_OptionSetValue.GetOptionSetText(service, this, "tra_acceptrejection");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_acceptrejection_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_acceptrejection_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_approvespfeedbackbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_approvespfeedbackbykpiid")]
        public EntityReference tra_approvespfeedbackbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_approvespfeedbackbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_approvespfeedbackbykpiid", value, nameof(tra_approvespfeedbackbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_approvespfeedbackbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_approvespfeedbackbykpiidname")]
        public string tra_approvespfeedbackbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_approvespfeedbackbykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_area</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_area")]
        public string tra_area
        {
            get
            {
                return this.GetPropertyValue<string>("tra_area");
            }
            set
            {
                this.SetPropertyValue("tra_area", value, 100, nameof(tra_area));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_arealookup</para>
        /// </summary>
        [AttributeLogicalName("tra_arealookup")]
        public EntityReference tra_AreaLookup
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_arealookup");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_arealookup", value, nameof(tra_AreaLookup));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_arealookupname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_arealookupname")]
        public string tra_AreaLookupName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_arealookupname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_assignmentcount</para>
        /// <para>Minimum Value: -2147483648</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("tra_assignmentcount")]
        public int? tra_assignmentcount
        {
            get
            {
                return this.GetPropertyValue<int?>("tra_assignmentcount");
            }
            set
            {
                this.SetPropertyValue("tra_assignmentcount", (int?)value, (int)-2147483648, (int)2147483647, nameof(tra_assignmentcount));
            }
        }

        /// <summary>
        /// Logical Name: tra_assigntoconsumeraffairs
        /// </summary>
        [AttributeLogicalName("tra_assigntoconsumeraffairs")]
        public tra_incident_tra_assigntoconsumeraffairs? tra_AssigntoConsumerAffairs
        {
            get
            {
                if (tra_AssigntoConsumerAffairs_OptionSetValue != null) { return (tra_incident_tra_assigntoconsumeraffairs)tra_AssigntoConsumerAffairs_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_AssigntoConsumerAffairs_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_AssigntoConsumerAffairs_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_assigntoconsumeraffairs</para>
        /// </summary>
        [AttributeLogicalName("tra_assigntoconsumeraffairs")]
        public OptionSetValue tra_AssigntoConsumerAffairs_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_assigntoconsumeraffairs");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_assigntoconsumeraffairs", value, nameof(tra_AssigntoConsumerAffairs_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_AssigntoConsumerAffairs_Text(IOrganizationService service)
        {
            return this.tra_AssigntoConsumerAffairs_OptionSetValue.GetOptionSetText(service, this, "tra_assigntoconsumeraffairs");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_AssigntoConsumerAffairs_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_AssigntoConsumerAffairs_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: tra_assigntodepartment
        /// </summary>
        [AttributeLogicalName("tra_assigntodepartment")]
        public tra_incident_tra_assigntodepartment? tra_AssigntoDepartment
        {
            get
            {
                if (tra_AssigntoDepartment_OptionSetValue != null) { return (tra_incident_tra_assigntodepartment)tra_AssigntoDepartment_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_AssigntoDepartment_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_AssigntoDepartment_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_assigntodepartment</para>
        /// </summary>
        [AttributeLogicalName("tra_assigntodepartment")]
        public OptionSetValue tra_AssigntoDepartment_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_assigntodepartment");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_assigntodepartment", value, nameof(tra_AssigntoDepartment_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_AssigntoDepartment_Text(IOrganizationService service)
        {
            return this.tra_AssigntoDepartment_OptionSetValue.GetOptionSetText(service, this, "tra_assigntodepartment");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_AssigntoDepartment_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_AssigntoDepartment_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: tra_assigntosp
        /// </summary>
        [AttributeLogicalName("tra_assigntosp")]
        public tra_incident_tra_assigntosp? tra_AssigntoSP
        {
            get
            {
                if (tra_AssigntoSP_OptionSetValue != null) { return (tra_incident_tra_assigntosp)tra_AssigntoSP_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_AssigntoSP_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_AssigntoSP_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_assigntosp</para>
        /// </summary>
        [AttributeLogicalName("tra_assigntosp")]
        public OptionSetValue tra_AssigntoSP_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_assigntosp");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_assigntosp", value, nameof(tra_AssigntoSP_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_AssigntoSP_Text(IOrganizationService service)
        {
            return this.tra_AssigntoSP_OptionSetValue.GetOptionSetText(service, this, "tra_assigntosp");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_AssigntoSP_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_AssigntoSP_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_block</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_block")]
        public string tra_block
        {
            get
            {
                return this.GetPropertyValue<string>("tra_block");
            }
            set
            {
                this.SetPropertyValue("tra_block", value, 100, nameof(tra_block));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_buildingflat</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_buildingflat")]
        public string tra_buildingflat
        {
            get
            {
                return this.GetPropertyValue<string>("tra_buildingflat");
            }
            set
            {
                this.SetPropertyValue("tra_buildingflat", value, 100, nameof(tra_buildingflat));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_caacceptedon</para>
        /// </summary>
        [AttributeLogicalName("tra_caacceptedon")]
        public DateTime? tra_CAAcceptedOn
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_caacceptedon");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_caacceptedon", value, nameof(tra_CAAcceptedOn));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_caassigncasetodeptbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_caassigncasetodeptbykpiid")]
        public EntityReference tra_caassigncasetodeptbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_caassigncasetodeptbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_caassigncasetodeptbykpiid", value, nameof(tra_caassigncasetodeptbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_caassigncasetodeptbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_caassigncasetodeptbykpiidname")]
        public string tra_caassigncasetodeptbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_caassigncasetodeptbykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_cacomment</para>
        /// <para>Max Length: 2000 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_cacomment")]
        public string tra_cacomment
        {
            get
            {
                return this.GetPropertyValue<string>("tra_cacomment");
            }
            set
            {
                this.SetPropertyValue("tra_cacomment", value, 2000, nameof(tra_cacomment));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_cafeedbacbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_cafeedbacbykpiid")]
        public EntityReference tra_cafeedbacbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_cafeedbacbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_cafeedbacbykpiid", value, nameof(tra_cafeedbacbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_cafeedbacbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_cafeedbacbykpiidname")]
        public string tra_cafeedbacbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_cafeedbacbykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_cafeedbackfornospresponsebykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_cafeedbackfornospresponsebykpiid")]
        public EntityReference tra_cafeedbackfornospresponsebykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_cafeedbackfornospresponsebykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_cafeedbackfornospresponsebykpiid", value, nameof(tra_cafeedbackfornospresponsebykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_cafeedbackfornospresponsebykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_cafeedbackfornospresponsebykpiidname")]
        public string tra_cafeedbackfornospresponsebykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_cafeedbackfornospresponsebykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_cafirstassignment</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_cafirstassignment")]
        public bool? tra_CAFirstAssignment
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_cafirstassignment");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_cafirstassignment", value, nameof(tra_CAFirstAssignment));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_caprocessenquiryid</para>
        /// </summary>
        [AttributeLogicalName("tra_caprocessenquiryid")]
        public EntityReference tra_CAProcessEnquiryId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_caprocessenquiryid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_caprocessenquiryid", value, nameof(tra_CAProcessEnquiryId));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_caprocessenquiryidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_caprocessenquiryidname")]
        public string tra_CAProcessEnquiryIdName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_caprocessenquiryidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_caseid</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_caseid")]
        public string tra_caseid
        {
            get
            {
                return this.GetPropertyValue<string>("tra_caseid");
            }
            set
            {
                this.SetPropertyValue("tra_caseid", value, 100, nameof(tra_caseid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_caseidarchive</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_caseidarchive")]
        public string tra_caseidarchive
        {
            get
            {
                return this.GetPropertyValue<string>("tra_caseidarchive");
            }
            set
            {
                this.SetPropertyValue("tra_caseidarchive", value, 100, nameof(tra_caseidarchive));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_casequestion1</para>
        /// <para>Max Length: 5000 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_casequestion1")]
        public string tra_casequestion1
        {
            get
            {
                return this.GetPropertyValue<string>("tra_casequestion1");
            }
            set
            {
                this.SetPropertyValue("tra_casequestion1", value, 5000, nameof(tra_casequestion1));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_casequestion2</para>
        /// <para>Max Length: 5000 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_casequestion2")]
        public string tra_casequestion2
        {
            get
            {
                return this.GetPropertyValue<string>("tra_casequestion2");
            }
            set
            {
                this.SetPropertyValue("tra_casequestion2", value, 5000, nameof(tra_casequestion2));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_casequestion3</para>
        /// <para>Max Length: 5000 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_casequestion3")]
        public string tra_casequestion3
        {
            get
            {
                return this.GetPropertyValue<string>("tra_casequestion3");
            }
            set
            {
                this.SetPropertyValue("tra_casequestion3", value, 5000, nameof(tra_casequestion3));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_casestatusarchive</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_casestatusarchive")]
        public string tra_CaseStatusarchive
        {
            get
            {
                return this.GetPropertyValue<string>("tra_casestatusarchive");
            }
            set
            {
                this.SetPropertyValue("tra_casestatusarchive", value, 200, nameof(tra_CaseStatusarchive));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_casestatusarchived</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_casestatusarchived")]
        public string tra_casestatusarchived
        {
            get
            {
                return this.GetPropertyValue<string>("tra_casestatusarchived");
            }
            set
            {
                this.SetPropertyValue("tra_casestatusarchived", value, 100, nameof(tra_casestatusarchived));
            }
        }

        /// <summary>
        /// Logical Name: tra_casestatusforconsumer
        /// </summary>
        [AttributeLogicalName("tra_casestatusforconsumer")]
        public tra_incident_tra_casestatusforconsumer? tra_casestatusforconsumer
        {
            get
            {
                if (tra_casestatusforconsumer_OptionSetValue != null) { return (tra_incident_tra_casestatusforconsumer)tra_casestatusforconsumer_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_casestatusforconsumer_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_casestatusforconsumer_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_casestatusforconsumer</para>
        /// </summary>
        [AttributeLogicalName("tra_casestatusforconsumer")]
        public OptionSetValue tra_casestatusforconsumer_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_casestatusforconsumer");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_casestatusforconsumer", value, nameof(tra_casestatusforconsumer_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_casestatusforconsumer_Text(IOrganizationService service)
        {
            return this.tra_casestatusforconsumer_OptionSetValue.GetOptionSetText(service, this, "tra_casestatusforconsumer");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_casestatusforconsumer_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_casestatusforconsumer_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_casetracker</para>
        /// </summary>
        [AttributeLogicalName("tra_casetracker")]
        public EntityReference tra_casetracker
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_casetracker");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_casetracker", value, nameof(tra_casetracker));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_casetrackername</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_casetrackername")]
        public string tra_casetrackerName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_casetrackername");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_catoprocesscasebykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_catoprocesscasebykpiid")]
        public EntityReference tra_catoprocesscasebykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_catoprocesscasebykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_catoprocesscasebykpiid", value, nameof(tra_catoprocesscasebykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_catoprocesscasebykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_catoprocesscasebykpiidname")]
        public string tra_catoprocesscasebykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_catoprocesscasebykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_complaintsubtype</para>
        /// </summary>
        [AttributeLogicalName("tra_complaintsubtype")]
        public EntityReference tra_complaintsubtype
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_complaintsubtype");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_complaintsubtype", value, nameof(tra_complaintsubtype));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_complaintsubtypearchive</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_complaintsubtypearchive")]
        public string tra_ComplaintSubtypearchive
        {
            get
            {
                return this.GetPropertyValue<string>("tra_complaintsubtypearchive");
            }
            set
            {
                this.SetPropertyValue("tra_complaintsubtypearchive", value, 200, nameof(tra_ComplaintSubtypearchive));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_complaintsubtypename</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_complaintsubtypename")]
        public string tra_complaintsubtypeName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_complaintsubtypename");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_complainttype</para>
        /// </summary>
        [AttributeLogicalName("tra_complainttype")]
        public EntityReference tra_complainttype
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_complainttype");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_complainttype", value, nameof(tra_complainttype));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_complainttypearchive</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_complainttypearchive")]
        public string tra_complainttypearchive
        {
            get
            {
                return this.GetPropertyValue<string>("tra_complainttypearchive");
            }
            set
            {
                this.SetPropertyValue("tra_complainttypearchive", value, 200, nameof(tra_complainttypearchive));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_complainttypedata</para>
        /// <para>Max Length: 2000 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_complainttypedata")]
        public string tra_ComplaintTypeData
        {
            get
            {
                return this.GetPropertyValue<string>("tra_complainttypedata");
            }
            set
            {
                this.SetPropertyValue("tra_complainttypedata", value, 2000, nameof(tra_ComplaintTypeData));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_complainttypename</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_complainttypename")]
        public string tra_complainttypeName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_complainttypename");
            }
        }

        /// <summary>
        /// Logical Name: tra_consentstatus
        /// </summary>
        [AttributeLogicalName("tra_consentstatus")]
        public tra_incident_tra_consentstatus? tra_consentstatus
        {
            get
            {
                if (tra_consentstatus_OptionSetValue != null) { return (tra_incident_tra_consentstatus)tra_consentstatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_consentstatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_consentstatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_consentstatus</para>
        /// </summary>
        [AttributeLogicalName("tra_consentstatus")]
        public OptionSetValue tra_consentstatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_consentstatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_consentstatus", value, nameof(tra_consentstatus_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_consentstatus_Text(IOrganizationService service)
        {
            return this.tra_consentstatus_OptionSetValue.GetOptionSetText(service, this, "tra_consentstatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_consentstatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_consentstatus_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_consumeraffairsflagenquiry</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_consumeraffairsflagenquiry")]
        public bool? tra_ConsumerAffairsFlagEnquiry
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_consumeraffairsflagenquiry");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_consumeraffairsflagenquiry", value, nameof(tra_ConsumerAffairsFlagEnquiry));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_consumerconsentbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_consumerconsentbykpiid")]
        public EntityReference tra_consumerconsentbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_consumerconsentbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_consumerconsentbykpiid", value, nameof(tra_consumerconsentbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_consumerconsentbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_consumerconsentbykpiidname")]
        public string tra_consumerconsentbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_consumerconsentbykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_consumertosubmitdocumentsbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_consumertosubmitdocumentsbykpiid")]
        public EntityReference tra_consumertosubmitdocumentsbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_consumertosubmitdocumentsbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_consumertosubmitdocumentsbykpiid", value, nameof(tra_consumertosubmitdocumentsbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_consumertosubmitdocumentsbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_consumertosubmitdocumentsbykpiidname")]
        public string tra_consumertosubmitdocumentsbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_consumertosubmitdocumentsbykpiidname");
            }
        }

        /// <summary>
        /// Logical Name: tra_contractduration
        /// </summary>
        [AttributeLogicalName("tra_contractduration")]
        public tra_incident_tra_contractduration? tra_contractduration
        {
            get
            {
                if (tra_contractduration_OptionSetValue != null) { return (tra_incident_tra_contractduration)tra_contractduration_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_contractduration_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_contractduration_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_contractduration</para>
        /// </summary>
        [AttributeLogicalName("tra_contractduration")]
        public OptionSetValue tra_contractduration_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_contractduration");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_contractduration", value, nameof(tra_contractduration_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_contractduration_Text(IOrganizationService service)
        {
            return this.tra_contractduration_OptionSetValue.GetOptionSetText(service, this, "tra_contractduration");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_contractduration_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_contractduration_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_cprnumberofowner</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_cprnumberofowner")]
        public string tra_cprnumberofowner
        {
            get
            {
                return this.GetPropertyValue<string>("tra_cprnumberofowner");
            }
            set
            {
                this.SetPropertyValue("tra_cprnumberofowner", value, 100, nameof(tra_cprnumberofowner));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_createdonarchive</para>
        /// </summary>
        [AttributeLogicalName("tra_createdonarchive")]
        public DateTime? tra_Createdonarchive
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_createdonarchive");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_createdonarchive", value, nameof(tra_Createdonarchive));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_data</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_data")]
        public bool? tra_Data
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_data");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_data", value, nameof(tra_Data));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_dateofcomplaintagainstserviceprovider</para>
        /// </summary>
        [AttributeLogicalName("tra_dateofcomplaintagainstserviceprovider")]
        public DateTime? tra_dateofcomplaintagainstserviceprovider
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_dateofcomplaintagainstserviceprovider");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_dateofcomplaintagainstserviceprovider", value, nameof(tra_dateofcomplaintagainstserviceprovider));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_dateofsubscription</para>
        /// </summary>
        [AttributeLogicalName("tra_dateofsubscription")]
        public DateTime? tra_dateofsubscription
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_dateofsubscription");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_dateofsubscription", value, nameof(tra_dateofsubscription));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_dateofvasoptin</para>
        /// </summary>
        [AttributeLogicalName("tra_dateofvasoptin")]
        public DateTime? tra_DateofVASOptin
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_dateofvasoptin");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_dateofvasoptin", value, nameof(tra_DateofVASOptin));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_department</para>
        /// </summary>
        [AttributeLogicalName("tra_department")]
        public EntityReference tra_department
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_department");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_department", value, nameof(tra_department));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_departmentcomment</para>
        /// <para>Max Length: 2000 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_departmentcomment")]
        public string tra_departmentcomment
        {
            get
            {
                return this.GetPropertyValue<string>("tra_departmentcomment");
            }
            set
            {
                this.SetPropertyValue("tra_departmentcomment", value, 2000, nameof(tra_departmentcomment));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_departmentname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_departmentname")]
        public string tra_departmentName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_departmentname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_deptfeedbackbyid</para>
        /// </summary>
        [AttributeLogicalName("tra_deptfeedbackbyid")]
        public EntityReference tra_deptfeedbackbyid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_deptfeedbackbyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_deptfeedbackbyid", value, nameof(tra_deptfeedbackbyid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_deptfeedbackbyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_deptfeedbackbyidname")]
        public string tra_deptfeedbackbyidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_deptfeedbackbyidname");
            }
        }

        /// <summary>
        /// Logical Name: tra_deptfeedbackrdeeceived
        /// </summary>
        [AttributeLogicalName("tra_deptfeedbackrdeeceived")]
        public tra_incident_tra_deptfeedbackrdeeceived? tra_deptfeedbackrdeeceived
        {
            get
            {
                if (tra_deptfeedbackrdeeceived_OptionSetValue != null) { return (tra_incident_tra_deptfeedbackrdeeceived)tra_deptfeedbackrdeeceived_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_deptfeedbackrdeeceived_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_deptfeedbackrdeeceived_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_deptfeedbackrdeeceived</para>
        /// </summary>
        [AttributeLogicalName("tra_deptfeedbackrdeeceived")]
        public OptionSetValue tra_deptfeedbackrdeeceived_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_deptfeedbackrdeeceived");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_deptfeedbackrdeeceived", value, nameof(tra_deptfeedbackrdeeceived_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_deptfeedbackrdeeceived_Text(IOrganizationService service)
        {
            return this.tra_deptfeedbackrdeeceived_OptionSetValue.GetOptionSetText(service, this, "tra_deptfeedbackrdeeceived");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_deptfeedbackrdeeceived_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_deptfeedbackrdeeceived_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: tra_deptfeedbacksatisfactory
        /// </summary>
        [AttributeLogicalName("tra_deptfeedbacksatisfactory")]
        public tra_incident_tra_deptfeedbacksatisfactory? tra_deptfeedbacksatisfactory
        {
            get
            {
                if (tra_deptfeedbacksatisfactory_OptionSetValue != null) { return (tra_incident_tra_deptfeedbacksatisfactory)tra_deptfeedbacksatisfactory_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_deptfeedbacksatisfactory_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_deptfeedbacksatisfactory_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_deptfeedbacksatisfactory</para>
        /// </summary>
        [AttributeLogicalName("tra_deptfeedbacksatisfactory")]
        public OptionSetValue tra_deptfeedbacksatisfactory_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_deptfeedbacksatisfactory");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_deptfeedbacksatisfactory", value, nameof(tra_deptfeedbacksatisfactory_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_deptfeedbacksatisfactory_Text(IOrganizationService service)
        {
            return this.tra_deptfeedbacksatisfactory_OptionSetValue.GetOptionSetText(service, this, "tra_deptfeedbacksatisfactory");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_deptfeedbacksatisfactory_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_deptfeedbacksatisfactory_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_deptrequestaddlinfoid</para>
        /// </summary>
        [AttributeLogicalName("tra_deptrequestaddlinfoid")]
        public EntityReference tra_deptrequestaddlinfoid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_deptrequestaddlinfoid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_deptrequestaddlinfoid", value, nameof(tra_deptrequestaddlinfoid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_deptrequestaddlinfoidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_deptrequestaddlinfoidname")]
        public string tra_deptrequestaddlinfoidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_deptrequestaddlinfoidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_disputecharge</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_disputecharge")]
        public decimal? tra_disputecharge
        {
            get
            {
                if (tra_disputechargeMoney != null) { return tra_disputechargeMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_disputechargeMoney = new Money(value.Value); }
                else this.tra_disputechargeMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_disputecharge</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_disputecharge")]
        public Money tra_disputechargeMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("tra_disputecharge");
            }
            set
            {
                this.SetPropertyValue("tra_disputecharge", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, nameof(tra_disputechargeMoney));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_disputecharge_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_disputecharge_base")]
        public decimal? tra_disputecharge_Base
        {
            get
            {
                if (tra_disputecharge_BaseMoney != null) { return tra_disputecharge_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_disputecharge_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_disputecharge_base")]
        public Money tra_disputecharge_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("tra_disputecharge_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_disputedamount</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_disputedamount")]
        public decimal? tra_DisputedAmount
        {
            get
            {
                if (tra_DisputedAmountMoney != null) { return tra_DisputedAmountMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_DisputedAmountMoney = new Money(value.Value); }
                else this.tra_DisputedAmountMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_disputedamount</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_disputedamount")]
        public Money tra_DisputedAmountMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("tra_disputedamount");
            }
            set
            {
                this.SetPropertyValue("tra_disputedamount", (Money)value, (decimal)-922337203685477, (decimal)922337203685477, nameof(tra_DisputedAmountMoney));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_disputedamount_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_disputedamount_base")]
        public decimal? tra_disputedamount_Base
        {
            get
            {
                if (tra_disputedamount_BaseMoney != null) { return tra_disputedamount_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_disputedamount_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_disputedamount_base")]
        public Money tra_disputedamount_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("tra_disputedamount_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_disputednoarchive</para>
        /// <para>Max Length: 300 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_disputednoarchive")]
        public string tra_DisputedNoarchive
        {
            get
            {
                return this.GetPropertyValue<string>("tra_disputednoarchive");
            }
            set
            {
                this.SetPropertyValue("tra_disputednoarchive", value, 300, nameof(tra_DisputedNoarchive));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_disputednumber</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_disputednumber")]
        public string tra_disputednumber
        {
            get
            {
                return this.GetPropertyValue<string>("tra_disputednumber");
            }
            set
            {
                this.SetPropertyValue("tra_disputednumber", value, 100, nameof(tra_disputednumber));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_documentcheckbyid</para>
        /// </summary>
        [AttributeLogicalName("tra_documentcheckbyid")]
        public EntityReference tra_documentcheckbyid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_documentcheckbyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_documentcheckbyid", value, nameof(tra_documentcheckbyid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_documentcheckbyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_documentcheckbyidname")]
        public string tra_documentcheckbyidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_documentcheckbyidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_documentscheckdate</para>
        /// </summary>
        [AttributeLogicalName("tra_documentscheckdate")]
        public DateTime? tra_documentscheckdate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_documentscheckdate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_documentscheckdate", value, nameof(tra_documentscheckdate));
            }
        }

        /// <summary>
        /// Logical Name: tra_documentsverified
        /// </summary>
        [AttributeLogicalName("tra_documentsverified")]
        public tra_incident_tra_documentsverified? tra_documentsverified
        {
            get
            {
                if (tra_documentsverified_OptionSetValue != null) { return (tra_incident_tra_documentsverified)tra_documentsverified_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_documentsverified_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_documentsverified_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_documentsverified</para>
        /// </summary>
        [AttributeLogicalName("tra_documentsverified")]
        public OptionSetValue tra_documentsverified_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_documentsverified");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_documentsverified", value, nameof(tra_documentsverified_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_documentsverified_Text(IOrganizationService service)
        {
            return this.tra_documentsverified_OptionSetValue.GetOptionSetText(service, this, "tra_documentsverified");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_documentsverified_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_documentsverified_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_enquirytype</para>
        /// </summary>
        [AttributeLogicalName("tra_enquirytype")]
        public EntityReference tra_enquirytype
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_enquirytype");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_enquirytype", value, nameof(tra_enquirytype));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_enquirytypename</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_enquirytypename")]
        public string tra_enquirytypeName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_enquirytypename");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_expecteddateofresolution</para>
        /// </summary>
        [AttributeLogicalName("tra_expecteddateofresolution")]
        public DateTime? tra_Expecteddateofresolution
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_expecteddateofresolution");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_expecteddateofresolution", value, nameof(tra_Expecteddateofresolution));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_finaldecision</para>
        /// <para>Max Length: 5000 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_finaldecision")]
        public string tra_finaldecision
        {
            get
            {
                return this.GetPropertyValue<string>("tra_finaldecision");
            }
            set
            {
                this.SetPropertyValue("tra_finaldecision", value, 5000, nameof(tra_finaldecision));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_flat</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_flat")]
        public string tra_flat
        {
            get
            {
                return this.GetPropertyValue<string>("tra_flat");
            }
            set
            {
                this.SetPropertyValue("tra_flat", value, 100, nameof(tra_flat));
            }
        }

        /// <summary>
        /// Logical Name: tra_inforequestedby
        /// </summary>
        [AttributeLogicalName("tra_inforequestedby")]
        public tra_incident_tra_inforequestedby? tra_inforequestedby
        {
            get
            {
                if (tra_inforequestedby_OptionSetValue != null) { return (tra_incident_tra_inforequestedby)tra_inforequestedby_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_inforequestedby_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_inforequestedby_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_inforequestedby</para>
        /// </summary>
        [AttributeLogicalName("tra_inforequestedby")]
        public OptionSetValue tra_inforequestedby_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_inforequestedby");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_inforequestedby", value, nameof(tra_inforequestedby_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_inforequestedby_Text(IOrganizationService service)
        {
            return this.tra_inforequestedby_OptionSetValue.GetOptionSetText(service, this, "tra_inforequestedby");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_inforequestedby_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_inforequestedby_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: tra_inforequired
        /// </summary>
        [AttributeLogicalName("tra_inforequired")]
        public tra_incident_tra_inforequired? tra_InfoRequired
        {
            get
            {
                if (tra_InfoRequired_OptionSetValue != null) { return (tra_incident_tra_inforequired)tra_InfoRequired_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_InfoRequired_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_InfoRequired_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_inforequired</para>
        /// </summary>
        [AttributeLogicalName("tra_inforequired")]
        public OptionSetValue tra_InfoRequired_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_inforequired");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_inforequired", value, nameof(tra_InfoRequired_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_InfoRequired_Text(IOrganizationService service)
        {
            return this.tra_InfoRequired_OptionSetValue.GetOptionSetText(service, this, "tra_inforequired");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_InfoRequired_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_InfoRequired_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: tra_inforequiredca
        /// </summary>
        [AttributeLogicalName("tra_inforequiredca")]
        public tra_incident_tra_inforequiredca? tra_InfoRequiredCA
        {
            get
            {
                if (tra_InfoRequiredCA_OptionSetValue != null) { return (tra_incident_tra_inforequiredca)tra_InfoRequiredCA_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_InfoRequiredCA_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_InfoRequiredCA_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_inforequiredca</para>
        /// </summary>
        [AttributeLogicalName("tra_inforequiredca")]
        public OptionSetValue tra_InfoRequiredCA_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_inforequiredca");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_inforequiredca", value, nameof(tra_InfoRequiredCA_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_InfoRequiredCA_Text(IOrganizationService service)
        {
            return this.tra_InfoRequiredCA_OptionSetValue.GetOptionSetText(service, this, "tra_inforequiredca");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_InfoRequiredCA_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_InfoRequiredCA_OptionSetValue.Value);
        }



        /// <summary>
        /// Logical Name: tra_informationrequested
        /// </summary>
        [AttributeLogicalName("tra_informationrequested")]
        public tra_incident_tra_informationrequested? tra_informationrequested
        {
            get
            {
                if (tra_informationrequested_OptionSetValue != null) { return (tra_incident_tra_informationrequested)tra_informationrequested_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_informationrequested_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_informationrequested_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_informationrequested</para>
        /// </summary>
        [AttributeLogicalName("tra_informationrequested")]
        public OptionSetValue tra_informationrequested_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_informationrequested");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_informationrequested", value, nameof(tra_informationrequested_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_informationrequested_Text(IOrganizationService service)
        {
            return this.tra_informationrequested_OptionSetValue.GetOptionSetText(service, this, "tra_informationrequested");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_informationrequested_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_informationrequested_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_isarchive</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_isarchive")]
        public bool? tra_isarchive
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_isarchive");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_isarchive", value, nameof(tra_isarchive));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_isassignedtobnet</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_isassignedtobnet")]
        public bool? tra_IsAssignedToBNET
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_isassignedtobnet");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_isassignedtobnet", value, nameof(tra_IsAssignedToBNET));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_isfeedback</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_isfeedback")]
        public bool? tra_IsFeedback
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_isfeedback");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_isfeedback", value, nameof(tra_IsFeedback));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_isfeedbackprovided</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_isfeedbackprovided")]
        public bool? tra_IsFeedbackProvided
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_isfeedbackprovided");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_isfeedbackprovided", value, nameof(tra_IsFeedbackProvided));
            }
        }


        /// <summary>
        /// Logical Name: tra_issuedecision
        /// </summary>
        [AttributeLogicalName("tra_issuedecision")]
        public tra_incident_tra_issuedecision? tra_issuedecision
        {
            get
            {
                if (tra_issuedecision_OptionSetValue != null) { return (tra_incident_tra_issuedecision)tra_issuedecision_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_issuedecision_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_issuedecision_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_issuedecision</para>
        /// </summary>
        [AttributeLogicalName("tra_issuedecision")]
        public OptionSetValue tra_issuedecision_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_issuedecision");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_issuedecision", value, nameof(tra_issuedecision_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_issuedecision_Text(IOrganizationService service)
        {
            return this.tra_issuedecision_OptionSetValue.GetOptionSetText(service, this, "tra_issuedecision");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_issuedecision_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_issuedecision_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_kpicafeedbackorassigntootherdepid</para>
        /// </summary>
        [AttributeLogicalName("tra_kpicafeedbackorassigntootherdepid")]
        public EntityReference tra_KPICAfeedbackorAssigntootherDepId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_kpicafeedbackorassigntootherdepid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_kpicafeedbackorassigntootherdepid", value, nameof(tra_KPICAfeedbackorAssigntootherDepId));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_kpicafeedbackorassigntootherdepidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_kpicafeedbackorassigntootherdepidname")]
        public string tra_KPICAfeedbackorAssigntootherDepIdName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_kpicafeedbackorassigntootherdepidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_kpicallcentertoactiontheenquiryid</para>
        /// </summary>
        [AttributeLogicalName("tra_kpicallcentertoactiontheenquiryid")]
        public EntityReference tra_KPICallcentertoactiontheenquiryId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_kpicallcentertoactiontheenquiryid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_kpicallcentertoactiontheenquiryid", value, nameof(tra_KPICallcentertoactiontheenquiryId));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_kpicallcentertoactiontheenquiryidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_kpicallcentertoactiontheenquiryidname")]
        public string tra_KPICallcentertoactiontheenquiryIdName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_kpicallcentertoactiontheenquiryidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_kpiotherdepttorevertwithfeedid</para>
        /// </summary>
        [AttributeLogicalName("tra_kpiotherdepttorevertwithfeedid")]
        public EntityReference tra_KPIOtherDepttorevertwithfeedId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_kpiotherdepttorevertwithfeedid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_kpiotherdepttorevertwithfeedid", value, nameof(tra_KPIOtherDepttorevertwithfeedId));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_kpiotherdepttorevertwithfeedidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_kpiotherdepttorevertwithfeedidname")]
        public string tra_KPIOtherDepttorevertwithfeedIdName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_kpiotherdepttorevertwithfeedidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_linestatus</para>
        /// <para>Max Length: 300 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_linestatus")]
        public string tra_linestatus
        {
            get
            {
                return this.GetPropertyValue<string>("tra_linestatus");
            }
            set
            {
                this.SetPropertyValue("tra_linestatus", value, 300, nameof(tra_linestatus));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_methodofvasoptin</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_methodofvasoptin")]
        public string tra_MethodofVASOptin
        {
            get
            {
                return this.GetPropertyValue<string>("tra_methodofvasoptin");
            }
            set
            {
                this.SetPropertyValue("tra_methodofvasoptin", value, 100, nameof(tra_MethodofVASOptin));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_nameofowner</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_nameofowner")]
        public string tra_nameofowner
        {
            get
            {
                return this.GetPropertyValue<string>("tra_nameofowner");
            }
            set
            {
                this.SetPropertyValue("tra_nameofowner", value, 200, nameof(tra_nameofowner));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_nameofvas</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_nameofvas")]
        public string tra_NameofVAS
        {
            get
            {
                return this.GetPropertyValue<string>("tra_nameofvas");
            }
            set
            {
                this.SetPropertyValue("tra_nameofvas", value, 100, nameof(tra_NameofVAS));
            }
        }

        /// <summary>
        /// Logical Name: tra_notificationstatus
        /// </summary>
        [AttributeLogicalName("tra_notificationstatus")]
        public tra_notificationstatus? tra_notificationstatus
        {
            get
            {
                if (tra_notificationstatus_OptionSetValue != null) { return (tra_notificationstatus)tra_notificationstatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_notificationstatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_notificationstatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_notificationstatus</para>
        /// </summary>
        [AttributeLogicalName("tra_notificationstatus")]
        public OptionSetValue tra_notificationstatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_notificationstatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_notificationstatus", value, nameof(tra_notificationstatus_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_notificationstatus_Text(IOrganizationService service)
        {
            return this.tra_notificationstatus_OptionSetValue.GetOptionSetText(service, this, "tra_notificationstatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_notificationstatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_notificationstatus_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_notifyconsumerbyid</para>
        /// </summary>
        [AttributeLogicalName("tra_notifyconsumerbyid")]
        public EntityReference tra_notifyconsumerbyid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_notifyconsumerbyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_notifyconsumerbyid", value, nameof(tra_notifyconsumerbyid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_notifyconsumerbyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_notifyconsumerbyidname")]
        public string tra_notifyconsumerbyidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_notifyconsumerbyidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_operator</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_operator")]
        public string tra_Operator
        {
            get
            {
                return this.GetPropertyValue<string>("tra_operator");
            }
            set
            {
                this.SetPropertyValue("tra_operator", value, 100, nameof(tra_Operator));
            }
        }

        /// <summary>
        /// Logical Name: tra_operatorslafailed
        /// </summary>
        [AttributeLogicalName("tra_operatorslafailed")]
        public tra_incident_tra_operatorslafailed? tra_operatorslafailed
        {
            get
            {
                if (tra_operatorslafailed_OptionSetValue != null) { return (tra_incident_tra_operatorslafailed)tra_operatorslafailed_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_operatorslafailed_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_operatorslafailed_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_operatorslafailed</para>
        /// </summary>
        [AttributeLogicalName("tra_operatorslafailed")]
        public OptionSetValue tra_operatorslafailed_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_operatorslafailed");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_operatorslafailed", value, nameof(tra_operatorslafailed_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_operatorslafailed_Text(IOrganizationService service)
        {
            return this.tra_operatorslafailed_OptionSetValue.GetOptionSetText(service, this, "tra_operatorslafailed");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_operatorslafailed_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_operatorslafailed_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_othercontractduration</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_othercontractduration")]
        public string tra_othercontractduration
        {
            get
            {
                return this.GetPropertyValue<string>("tra_othercontractduration");
            }
            set
            {
                this.SetPropertyValue("tra_othercontractduration", value, 100, nameof(tra_othercontractduration));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_ownerofdisputednumber</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_ownerofdisputednumber")]
        public bool? tra_ownerofdisputednumber
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_ownerofdisputednumber");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_ownerofdisputednumber", value, nameof(tra_ownerofdisputednumber));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_packagename</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_packagename")]
        public string tra_PackageName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_packagename");
            }
            set
            {
                this.SetPropertyValue("tra_packagename", value, 250, nameof(tra_PackageName));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_pleasespecifycomplainttype</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_pleasespecifycomplainttype")]
        public string tra_pleasespecifycomplainttype
        {
            get
            {
                return this.GetPropertyValue<string>("tra_pleasespecifycomplainttype");
            }
            set
            {
                this.SetPropertyValue("tra_pleasespecifycomplainttype", value, 100, nameof(tra_pleasespecifycomplainttype));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_pobox</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_pobox")]
        public string tra_pobox
        {
            get
            {
                return this.GetPropertyValue<string>("tra_pobox");
            }
            set
            {
                this.SetPropertyValue("tra_pobox", value, 100, nameof(tra_pobox));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_primaryowner</para>
        /// </summary>
        [AttributeLogicalName("tra_primaryowner")]
        public EntityReference tra_primaryowner
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_primaryowner");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_primaryowner", value, nameof(tra_primaryowner));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_primaryownername</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_primaryownername")]
        public string tra_primaryownerName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_primaryownername");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_primaryowneryominame</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_primaryowneryominame")]
        public string tra_primaryownerYomiName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_primaryowneryominame");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_queue</para>
        /// </summary>
        [AttributeLogicalName("tra_queue")]
        public EntityReference tra_queue
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_queue");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_queue", value, nameof(tra_queue));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_queuename</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_queuename")]
        public string tra_queueName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_queuename");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_rejectionflag</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_rejectionflag")]
        public bool? tra_rejectionflag
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_rejectionflag");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_rejectionflag", value, nameof(tra_rejectionflag));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_requestaddlinfobykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_requestaddlinfobykpiid")]
        public EntityReference tra_requestaddlinfobykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_requestaddlinfobykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_requestaddlinfobykpiid", value, nameof(tra_requestaddlinfobykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_requestaddlinfobykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_requestaddlinfobykpiidname")]
        public string tra_requestaddlinfobykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_requestaddlinfobykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_requestaddlinfofromspbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_requestaddlinfofromspbykpiid")]
        public EntityReference tra_requestaddlinfofromspbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_requestaddlinfofromspbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_requestaddlinfofromspbykpiid", value, nameof(tra_requestaddlinfofromspbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_requestaddlinfofromspbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_requestaddlinfofromspbykpiidname")]
        public string tra_requestaddlinfofromspbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_requestaddlinfofromspbykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_requestinfodocsbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_requestinfodocsbykpiid")]
        public EntityReference tra_requestinfodocsbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_requestinfodocsbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_requestinfodocsbykpiid", value, nameof(tra_requestinfodocsbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_requestinfodocsbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_requestinfodocsbykpiidname")]
        public string tra_requestinfodocsbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_requestinfodocsbykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_reviewspfeedbackbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_reviewspfeedbackbykpiid")]
        public EntityReference tra_reviewspfeedbackbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_reviewspfeedbackbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_reviewspfeedbackbykpiid", value, nameof(tra_reviewspfeedbackbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_reviewspfeedbackbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_reviewspfeedbackbykpiidname")]
        public string tra_reviewspfeedbackbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_reviewspfeedbackbykpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_roundrobin</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_roundrobin")]
        public bool? tra_roundrobin
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_roundrobin");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_roundrobin", value, nameof(tra_roundrobin));
            }
        }


        /// <summary>
        /// Logical Name: tra_satisfactionlevel
        /// </summary>
        [AttributeLogicalName("tra_satisfactionlevel")]
        public tra_satisfactionlevel? tra_satisfactionlevel
        {
            get
            {
                if (tra_satisfactionlevel_OptionSetValue != null) { return (tra_satisfactionlevel)tra_satisfactionlevel_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_satisfactionlevel_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_satisfactionlevel_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_satisfactionlevel</para>
        /// </summary>
        [AttributeLogicalName("tra_satisfactionlevel")]
        public OptionSetValue tra_satisfactionlevel_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_satisfactionlevel");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_satisfactionlevel", value, nameof(tra_satisfactionlevel_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_satisfactionlevel_Text(IOrganizationService service)
        {
            return this.tra_satisfactionlevel_OptionSetValue.GetOptionSetText(service, this, "tra_satisfactionlevel");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_satisfactionlevel_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_satisfactionlevel_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: tra_scopeacceptance
        /// </summary>
        [AttributeLogicalName("tra_scopeacceptance")]
        public tra_incident_tra_scopeacceptance? tra_scopeacceptance
        {
            get
            {
                if (tra_scopeacceptance_OptionSetValue != null) { return (tra_incident_tra_scopeacceptance)tra_scopeacceptance_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_scopeacceptance_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_scopeacceptance_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_scopeacceptance</para>
        /// </summary>
        [AttributeLogicalName("tra_scopeacceptance")]
        public OptionSetValue tra_scopeacceptance_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_scopeacceptance");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_scopeacceptance", value, nameof(tra_scopeacceptance_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_scopeacceptance_Text(IOrganizationService service)
        {
            return this.tra_scopeacceptance_OptionSetValue.GetOptionSetText(service, this, "tra_scopeacceptance");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_scopeacceptance_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_scopeacceptance_OptionSetValue.Value);
        }

        /// <summary>
        /// <para>Logical Name: tra_scopeacceptancedate</para>
        /// </summary>
        [AttributeLogicalName("tra_scopeacceptancedate")]
        public DateTime? tra_scopeacceptancedate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_scopeacceptancedate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_scopeacceptancedate", value, nameof(tra_scopeacceptancedate));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_scopecheckkpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_scopecheckkpiid")]
        public EntityReference tra_scopecheckkpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_scopecheckkpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_scopecheckkpiid", value, nameof(tra_scopecheckkpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_scopecheckkpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_scopecheckkpiidname")]
        public string tra_scopecheckkpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_scopecheckkpiidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_sendforconsentbyid</para>
        /// </summary>
        [AttributeLogicalName("tra_sendforconsentbyid")]
        public EntityReference tra_sendforconsentbyid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_sendforconsentbyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_sendforconsentbyid", value, nameof(tra_sendforconsentbyid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_sendforconsentbyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_sendforconsentbyidname")]
        public string tra_sendforconsentbyidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_sendforconsentbyidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_service</para>
        /// </summary>
        [AttributeLogicalName("tra_service")]
        public EntityReference tra_service
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_service");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_service", value, nameof(tra_service));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_servicename</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_servicename")]
        public string tra_serviceName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_servicename");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_serviceprovider</para>
        /// </summary>
        [AttributeLogicalName("tra_serviceprovider")]
        public EntityReference tra_serviceprovider
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_serviceprovider");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_serviceprovider", value, nameof(tra_serviceprovider));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_serviceprovideracceptancebyid</para>
        /// </summary>
        [AttributeLogicalName("tra_serviceprovideracceptancebyid")]
        public EntityReference tra_serviceprovideracceptancebyid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_serviceprovideracceptancebyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_serviceprovideracceptancebyid", value, nameof(tra_serviceprovideracceptancebyid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_serviceprovideracceptancebyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_serviceprovideracceptancebyidname")]
        public string tra_serviceprovideracceptancebyidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_serviceprovideracceptancebyidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_serviceprovidercasereference</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_serviceprovidercasereference")]
        public string tra_serviceprovidercasereference
        {
            get
            {
                return this.GetPropertyValue<string>("tra_serviceprovidercasereference");
            }
            set
            {
                this.SetPropertyValue("tra_serviceprovidercasereference", value, 100, nameof(tra_serviceprovidercasereference));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_serviceprovidername</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_serviceprovidername")]
        public string tra_serviceproviderName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_serviceprovidername");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_servicesubtype</para>
        /// </summary>
        [AttributeLogicalName("tra_servicesubtype")]
        public EntityReference tra_servicesubtype
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_servicesubtype");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_servicesubtype", value, nameof(tra_servicesubtype));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_servicesubtypename</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_servicesubtypename")]
        public string tra_servicesubtypeName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_servicesubtypename");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_servicetype</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_servicetype")]
        public string tra_ServiceType
        {
            get
            {
                return this.GetPropertyValue<string>("tra_servicetype");
            }
            set
            {
                this.SetPropertyValue("tra_servicetype", value, 200, nameof(tra_ServiceType));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_settlementletterrequested</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_settlementletterrequested")]
        public bool? tra_settlementletterrequested
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_settlementletterrequested");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_settlementletterrequested", value, nameof(tra_settlementletterrequested));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_spacceptrejectsla</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_spacceptrejectsla")]
        public bool? tra_SPAcceptRejectSLA
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_spacceptrejectsla");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_spacceptrejectsla", value, nameof(tra_SPAcceptRejectSLA));
            }
        }


        /// <summary>
        /// <para>Logical Name: tra_spcaserefarchive</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_spcaserefarchive")]
        public string tra_SPCaseRefarchive
        {
            get
            {
                return this.GetPropertyValue<string>("tra_spcaserefarchive");
            }
            set
            {
                this.SetPropertyValue("tra_spcaserefarchive", value, 200, nameof(tra_SPCaseRefarchive));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_spfeedbackbykpiid</para>
        /// </summary>
        [AttributeLogicalName("tra_spfeedbackbykpiid")]
        public EntityReference tra_spfeedbackbykpiid
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("tra_spfeedbackbykpiid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("tra_spfeedbackbykpiid", value, nameof(tra_spfeedbackbykpiid));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_spfeedbackbykpiidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_spfeedbackbykpiidname")]
        public string tra_spfeedbackbykpiidName
        {
            get
            {
                return this.GetPropertyValue<string>("tra_spfeedbackbykpiidname");
            }
        }

        /// <summary>
        /// Logical Name: tra_spfeedbackreceived
        /// </summary>
        [AttributeLogicalName("tra_spfeedbackreceived")]
        public tra_incident_tra_spfeedbackreceived? tra_spfeedbackreceived
        {
            get
            {
                if (tra_spfeedbackreceived_OptionSetValue != null) { return (tra_incident_tra_spfeedbackreceived)tra_spfeedbackreceived_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_spfeedbackreceived_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_spfeedbackreceived_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_spfeedbackreceived</para>
        /// </summary>
        [AttributeLogicalName("tra_spfeedbackreceived")]
        public OptionSetValue tra_spfeedbackreceived_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_spfeedbackreceived");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_spfeedbackreceived", value, nameof(tra_spfeedbackreceived_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_spfeedbackreceived_Text(IOrganizationService service)
        {
            return this.tra_spfeedbackreceived_OptionSetValue.GetOptionSetText(service, this, "tra_spfeedbackreceived");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_spfeedbackreceived_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_spfeedbackreceived_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_sprejectionacceptancedate</para>
        /// </summary>
        [AttributeLogicalName("tra_sprejectionacceptancedate")]
        public DateTime? tra_sprejectionacceptancedate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_sprejectionacceptancedate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_sprejectionacceptancedate", value, nameof(tra_sprejectionacceptancedate));
            }
        }

        /// <summary>
        /// Logical Name: tra_sprejectionaccepted
        /// </summary>
        [AttributeLogicalName("tra_sprejectionaccepted")]
        public tra_incident_tra_sprejectionaccepted? tra_sprejectionaccepted
        {
            get
            {
                if (tra_sprejectionaccepted_OptionSetValue != null) { return (tra_incident_tra_sprejectionaccepted)tra_sprejectionaccepted_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_sprejectionaccepted_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_sprejectionaccepted_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_sprejectionaccepted</para>
        /// </summary>
        [AttributeLogicalName("tra_sprejectionaccepted")]
        public OptionSetValue tra_sprejectionaccepted_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_sprejectionaccepted");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_sprejectionaccepted", value, nameof(tra_sprejectionaccepted_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_sprejectionaccepted_Text(IOrganizationService service)
        {
            return this.tra_sprejectionaccepted_OptionSetValue.GetOptionSetText(service, this, "tra_sprejectionaccepted");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_sprejectionaccepted_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_sprejectionaccepted_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_sprejectiondate</para>
        /// </summary>
        [AttributeLogicalName("tra_sprejectiondate")]
        public DateTime? tra_sprejectiondate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_sprejectiondate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_sprejectiondate", value, nameof(tra_sprejectiondate));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_street</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_street")]
        public string tra_street
        {
            get
            {
                return this.GetPropertyValue<string>("tra_street");
            }
            set
            {
                this.SetPropertyValue("tra_street", value, 100, nameof(tra_street));
            }
        }

        /// <summary>
        /// Logical Name: tra_subscriptionstatus
        /// </summary>
        [AttributeLogicalName("tra_subscriptionstatus")]
        public tra_incident_tra_subscriptionstatus? tra_SubscriptionStatus
        {
            get
            {
                if (tra_SubscriptionStatus_OptionSetValue != null) { return (tra_incident_tra_subscriptionstatus)tra_SubscriptionStatus_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_SubscriptionStatus_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_SubscriptionStatus_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_subscriptionstatus</para>
        /// </summary>
        [AttributeLogicalName("tra_subscriptionstatus")]
        public OptionSetValue tra_SubscriptionStatus_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_subscriptionstatus");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_subscriptionstatus", value, nameof(tra_SubscriptionStatus_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_SubscriptionStatus_Text(IOrganizationService service)
        {
            return this.tra_SubscriptionStatus_OptionSetValue.GetOptionSetText(service, this, "tra_subscriptionstatus");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_SubscriptionStatus_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_SubscriptionStatus_OptionSetValue.Value);
        }


        /// <summary>
        /// Logical Name: tra_subscriptiontype
        /// </summary>
        [AttributeLogicalName("tra_subscriptiontype")]
        public tra_subscriptiontype? tra_subscriptiontype
        {
            get
            {
                if (tra_subscriptiontype_OptionSetValue != null) { return (tra_subscriptiontype)tra_subscriptiontype_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_subscriptiontype_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_subscriptiontype_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_subscriptiontype</para>
        /// </summary>
        [AttributeLogicalName("tra_subscriptiontype")]
        public OptionSetValue tra_subscriptiontype_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_subscriptiontype");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_subscriptiontype", value, nameof(tra_subscriptiontype_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_subscriptiontype_Text(IOrganizationService service)
        {
            return this.tra_subscriptiontype_OptionSetValue.GetOptionSetText(service, this, "tra_subscriptiontype");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_subscriptiontype_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_subscriptiontype_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_subservicetype</para>
        /// <para>Max Length: 200 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_subservicetype")]
        public string tra_SubServiceType
        {
            get
            {
                return this.GetPropertyValue<string>("tra_subservicetype");
            }
            set
            {
                this.SetPropertyValue("tra_subservicetype", value, 200, nameof(tra_SubServiceType));
            }
        }

        /// <summary>
        /// Logical Name: tra_subtypeissue
        /// </summary>
        [AttributeLogicalName("tra_subtypeissue")]
        public tra_subtypeissue? tra_SubtypeIssue
        {
            get
            {
                if (tra_SubtypeIssue_OptionSetValue != null) { return (tra_subtypeissue)tra_SubtypeIssue_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_SubtypeIssue_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_SubtypeIssue_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_subtypeissue</para>
        /// </summary>
        [AttributeLogicalName("tra_subtypeissue")]
        public OptionSetValue tra_SubtypeIssue_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_subtypeissue");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_subtypeissue", value, nameof(tra_SubtypeIssue_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_SubtypeIssue_Text(IOrganizationService service)
        {
            return this.tra_SubtypeIssue_OptionSetValue.GetOptionSetText(service, this, "tra_subtypeissue");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_SubtypeIssue_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_SubtypeIssue_OptionSetValue.Value);
        }

        /// <summary>
        /// Logical Name: tra_subtypeissuecontract
        /// </summary>
        [AttributeLogicalName("tra_subtypeissuecontract")]
        public tra_subtypeissuecontract? tra_SubtypeIssueContract
        {
            get
            {
                if (tra_SubtypeIssueContract_OptionSetValue != null) { return (tra_subtypeissuecontract)tra_SubtypeIssueContract_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_SubtypeIssueContract_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_SubtypeIssueContract_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_subtypeissuecontract</para>
        /// </summary>
        [AttributeLogicalName("tra_subtypeissuecontract")]
        public OptionSetValue tra_SubtypeIssueContract_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_subtypeissuecontract");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_subtypeissuecontract", value, nameof(tra_SubtypeIssueContract_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_SubtypeIssueContract_Text(IOrganizationService service)
        {
            return this.tra_SubtypeIssueContract_OptionSetValue.GetOptionSetText(service, this, "tra_subtypeissuecontract");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_SubtypeIssueContract_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_SubtypeIssueContract_OptionSetValue.Value);
        }



        /// <summary>
        /// <para>Logical Name: tra_ticketdate</para>
        /// </summary>
        [AttributeLogicalName("tra_ticketdate")]
        public DateTime? tra_TicketDate
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_ticketdate");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_ticketdate", value, nameof(tra_TicketDate));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_ticketnumber</para>
        /// </summary>
        [AttributeLogicalName("tra_ticketnumber")]
        public DateTime? tra_TicketNumber
        {
            get
            {
                return this.GetPropertyValue<DateTime?>("tra_ticketnumber");
            }
            set
            {
                this.SetPropertyValue<DateTime?>("tra_ticketnumber", value, nameof(tra_TicketNumber));
            }
        }

        /// <summary>
        /// Logical Name: tra_tra_reasonofrej
        /// </summary>
        [AttributeLogicalName("tra_tra_reasonofrej")]
        public tra_incident_tra_tra_reasonofrej? tra_tra_reasonofrej
        {
            get
            {
                if (tra_tra_reasonofrej_OptionSetValue != null) { return (tra_incident_tra_tra_reasonofrej)tra_tra_reasonofrej_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_tra_reasonofrej_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_tra_reasonofrej_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_tra_reasonofrej</para>
        /// </summary>
        [AttributeLogicalName("tra_tra_reasonofrej")]
        public OptionSetValue tra_tra_reasonofrej_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_tra_reasonofrej");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_tra_reasonofrej", value, nameof(tra_tra_reasonofrej_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_tra_reasonofrej_Text(IOrganizationService service)
        {
            return this.tra_tra_reasonofrej_OptionSetValue.GetOptionSetText(service, this, "tra_tra_reasonofrej");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_tra_reasonofrej_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_tra_reasonofrej_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_typeofpackage</para>
        /// <para>Max Length: 250 characters</para>
        /// </summary>
        [AttributeLogicalName("tra_typeofpackage")]
        public string tra_TypeofPackage
        {
            get
            {
                return this.GetPropertyValue<string>("tra_typeofpackage");
            }
            set
            {
                this.SetPropertyValue("tra_typeofpackage", value, 250, nameof(tra_TypeofPackage));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_vaschargespertransaction</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_vaschargespertransaction")]
        public decimal? tra_VASChargesPerTransaction
        {
            get
            {
                if (tra_VASChargesPerTransactionMoney != null) { return tra_VASChargesPerTransactionMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_VASChargesPerTransactionMoney = new Money(value.Value); }
                else this.tra_VASChargesPerTransactionMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_vaschargespertransaction</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_vaschargespertransaction")]
        public Money tra_VASChargesPerTransactionMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("tra_vaschargespertransaction");
            }
            set
            {
                this.SetPropertyValue("tra_vaschargespertransaction", (Money)value, (decimal)0, (decimal)922337203685477, nameof(tra_VASChargesPerTransactionMoney));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_vaschargespertransaction_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_vaschargespertransaction_base")]
        public decimal? tra_vaschargespertransaction_Base
        {
            get
            {
                if (tra_vaschargespertransaction_BaseMoney != null) { return tra_vaschargespertransaction_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_vaschargespertransaction_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_vaschargespertransaction_base")]
        public Money tra_vaschargespertransaction_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("tra_vaschargespertransaction_base");
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_vaschargestotalcharges</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_vaschargestotalcharges")]
        public decimal? tra_VASChargesTotalCharges
        {
            get
            {
                if (tra_VASChargesTotalChargesMoney != null) { return tra_VASChargesTotalChargesMoney.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_VASChargesTotalChargesMoney = new Money(value.Value); }
                else this.tra_VASChargesTotalChargesMoney = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_vaschargestotalcharges</para>
        /// <para>Minimum Value: 0</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_vaschargestotalcharges")]
        public Money tra_VASChargesTotalChargesMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("tra_vaschargestotalcharges");
            }
            set
            {
                this.SetPropertyValue("tra_vaschargestotalcharges", (Money)value, (decimal)0, (decimal)922337203685477, nameof(tra_VASChargesTotalChargesMoney));
            }
        }

        /// <summary>
        /// <para>Logical Name: tra_vaschargestotalcharges_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_vaschargestotalcharges_base")]
        public decimal? tra_vaschargestotalcharges_Base
        {
            get
            {
                if (tra_vaschargestotalcharges_BaseMoney != null) { return tra_vaschargestotalcharges_BaseMoney.Value; }
                return null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_vaschargestotalcharges_base</para>
        /// <para>Minimum Value: -922337203685477</para>
        /// <para>Maximum Value: 922337203685477</para>
        /// <para>Precision: 4</para>
        /// </summary>
        [AttributeLogicalName("tra_vaschargestotalcharges_base")]
        public Money tra_vaschargestotalcharges_BaseMoney
        {
            get
            {
                return this.GetPropertyValue<Money>("tra_vaschargestotalcharges_base");
            }
        }

        /// <summary>
        /// Logical Name: tra_vasrecurrence
        /// </summary>
        [AttributeLogicalName("tra_vasrecurrence")]
        public tra_incident_tra_vasrecurrence? tra_VASRecurrence
        {
            get
            {
                if (tra_VASRecurrence_OptionSetValue != null) { return (tra_incident_tra_vasrecurrence)tra_VASRecurrence_OptionSetValue.Value; }
                return null;
            }
            set
            {
                if (value != null) { this.tra_VASRecurrence_OptionSetValue = new OptionSetValue((int)value); }
                else this.tra_VASRecurrence_OptionSetValue = null;
            }
        }
        /// <summary>
        /// <para>Logical Name: tra_vasrecurrence</para>
        /// </summary>
        [AttributeLogicalName("tra_vasrecurrence")]
        public OptionSetValue tra_VASRecurrence_OptionSetValue
        {
            get
            {
                return this.GetPropertyValue<OptionSetValue>("tra_vasrecurrence");
            }
            set
            {
                this.SetPropertyValue<OptionSetValue>("tra_vasrecurrence", value, nameof(tra_VASRecurrence_OptionSetValue));
            }
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="service">D365 Organization Service</param>
        /// <returns></returns>
        public string tra_VASRecurrence_Text(IOrganizationService service)
        {
            return this.tra_VASRecurrence_OptionSetValue.GetOptionSetText(service, this, "tra_vasrecurrence");
        }
        /// <summary>
        /// Retrieves the current value's text in the user's language.
        /// </summary>
        /// <param name="attributeMetadata">The attribute metadata previously retrieved using the 'GetAttributeMetadata' extension method on the IOrganizationService object.</param>
        /// <returns></returns>
        public string tra_VASRecurrence_Text(EnumAttributeMetadata attributeMetadata)
        {
            return attributeMetadata.GetOptionSetText(this.tra_VASRecurrence_OptionSetValue.Value);
        }


        /// <summary>
        /// <para>Logical Name: tra_voice</para>
        /// <para>True = Yes</para>
        /// <para>False = No</para>
        /// </summary>
        [AttributeLogicalName("tra_voice")]
        public bool? tra_Voice
        {
            get
            {
                return this.GetPropertyValue<bool?>("tra_voice");
            }
            set
            {
                this.SetPropertyValue<bool?>("tra_voice", value, nameof(tra_Voice));
            }
        }


        /// <summary>
        /// <para>Logical Name: transactioncurrencyid</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyid")]
        public EntityReference TransactionCurrencyId
        {
            get
            {
                return this.GetPropertyValue<EntityReference>("transactioncurrencyid");
            }
            set
            {
                this.SetPropertyValue<EntityReference>("transactioncurrencyid", value, nameof(TransactionCurrencyId));
            }
        }

        /// <summary>
        /// <para>Logical Name: transactioncurrencyidname</para>
        /// <para>Max Length: 100 characters</para>
        /// </summary>
        [AttributeLogicalName("transactioncurrencyidname")]
        public string TransactionCurrencyIdName
        {
            get
            {
                return this.GetPropertyValue<string>("transactioncurrencyidname");
            }
        }

        /// <summary>
        /// <para>Logical Name: traversedpath</para>
        /// <para>Max Length: 1250 characters</para>
        /// </summary>
        [AttributeLogicalName("traversedpath")]
        public string TraversedPath
        {
            get
            {
                return this.GetPropertyValue<string>("traversedpath");
            }
            set
            {
                this.SetPropertyValue("traversedpath", value, 1250, nameof(TraversedPath));
            }
        }

        /// <summary>
        /// <para>Logical Name: utcconversiontimezonecode</para>
        /// <para>Minimum Value: -1</para>
        /// <para>Maximum Value: 2147483647</para>
        /// </summary>
        [AttributeLogicalName("utcconversiontimezonecode")]
        public int? UTCConversionTimeZoneCode
        {
            get
            {
                return this.GetPropertyValue<int?>("utcconversiontimezonecode");
            }
            set
            {
                this.SetPropertyValue("utcconversiontimezonecode", (int?)value, (int)-1, (int)2147483647, nameof(UTCConversionTimeZoneCode));
            }
        }

        /// <summary>
        /// <para>Logical Name: versionnumber</para>
        /// </summary>
        [AttributeLogicalName("versionnumber")]
        public int? VersionNumber
        {
            get
            {
                return this.GetPropertyValue<int?>("versionnumber");
            }
        }


        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: incident_actioncard</para>
        /// </summary>
        public List<Entity> Getincident_actioncard(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "actioncard", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: incident_actioncard</para>
        /// </summary>
        public List<Entity> Getincident_actioncard(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "actioncard", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Party)</b></para>
        /// <para>Schema Name: incident_activity_parties</para>
        /// </summary>
        public List<Entity> Getincident_activity_parties(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activityparty", "partyid", columns); }

        /// <summary>
        /// <para><b>Entity (Party)</b></para>
        /// <para>Schema Name: incident_activity_parties</para>
        /// </summary>
        public List<Entity> Getincident_activity_parties(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activityparty", "partyid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_ActivityPointers</para>
        /// </summary>
        public List<Entity> GetIncident_ActivityPointers(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activitypointer", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_ActivityPointers</para>
        /// </summary>
        public List<Entity> GetIncident_ActivityPointers(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "activitypointer", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Annotation</para>
        /// </summary>
        public List<Entity> GetIncident_Annotation(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "annotation", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Annotation</para>
        /// </summary>
        public List<Entity> GetIncident_Annotation(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "annotation", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Appointments</para>
        /// </summary>
        public List<Entity> GetIncident_Appointments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "appointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Appointments</para>
        /// </summary>
        public List<Entity> GetIncident_Appointments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "appointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetIncident_AsyncOperations(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_AsyncOperations</para>
        /// </summary>
        public List<Entity> GetIncident_AsyncOperations(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "asyncoperation", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Name)</b></para>
        /// <para>Schema Name: Incident_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetIncident_BulkDeleteFailures(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Name)</b></para>
        /// <para>Schema Name: Incident_BulkDeleteFailures</para>
        /// </summary>
        public List<Entity> GetIncident_BulkDeleteFailures(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "bulkdeletefailure", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Connected From)</b></para>
        /// <para>Schema Name: incident_connections1</para>
        /// </summary>
        public List<Entity> Getincident_connections1(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record1id", columns); }

        /// <summary>
        /// <para><b>Entity (Connected From)</b></para>
        /// <para>Schema Name: incident_connections1</para>
        /// </summary>
        public List<Entity> Getincident_connections1(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record1id", columns); }

        /// <summary>
        /// <para><b>Entity (Connected To)</b></para>
        /// <para>Schema Name: incident_connections2</para>
        /// </summary>
        public List<Entity> Getincident_connections2(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record2id", columns); }

        /// <summary>
        /// <para><b>Entity (Connected To)</b></para>
        /// <para>Schema Name: incident_connections2</para>
        /// </summary>
        public List<Entity> Getincident_connections2(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "connection", "record2id", columns); }

        /// <summary>
        /// <para><b>Entity (Base Record ID)</b></para>
        /// <para>Schema Name: Incident_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetIncident_DuplicateBaseRecord(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity (Base Record ID)</b></para>
        /// <para>Schema Name: Incident_DuplicateBaseRecord</para>
        /// </summary>
        public List<Entity> GetIncident_DuplicateBaseRecord(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "baserecordid", columns); }

        /// <summary>
        /// <para><b>Entity (Duplicate Record ID)</b></para>
        /// <para>Schema Name: Incident_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetIncident_DuplicateMatchingRecord(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity (Duplicate Record ID)</b></para>
        /// <para>Schema Name: Incident_DuplicateMatchingRecord</para>
        /// </summary>
        public List<Entity> GetIncident_DuplicateMatchingRecord(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "duplicaterecord", "duplicaterecordid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Emails</para>
        /// </summary>
        public List<Entity> GetIncident_Emails(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Emails</para>
        /// </summary>
        public List<Entity> GetIncident_Emails(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "email", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Faxes</para>
        /// </summary>
        public List<Entity> GetIncident_Faxes(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "fax", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Faxes</para>
        /// </summary>
        public List<Entity> GetIncident_Faxes(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "fax", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Existing Case)</b></para>
        /// <para>Schema Name: incident_existingcase</para>
        /// </summary>
        public List<Entity> Getincident_existingcase(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incident", "existingcase", columns); }

        /// <summary>
        /// <para><b>Entity (Existing Case)</b></para>
        /// <para>Schema Name: incident_existingcase</para>
        /// </summary>
        public List<Entity> Getincident_existingcase(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incident", "existingcase", columns); }

        /// <summary>
        /// <para><b>Entity (Master Case)</b></para>
        /// <para>Schema Name: incident_master_incident</para>
        /// </summary>
        public List<Entity> Getincident_master_incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incident", "masterid", columns); }

        /// <summary>
        /// <para><b>Entity (Master Case)</b></para>
        /// <para>Schema Name: incident_master_incident</para>
        /// </summary>
        public List<Entity> Getincident_master_incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incident", "masterid", columns); }

        /// <summary>
        /// <para><b>Entity (Parent Case)</b></para>
        /// <para>Schema Name: incident_parent_incident</para>
        /// </summary>
        public List<Entity> Getincident_parent_incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incident", "parentcaseid", columns); }

        /// <summary>
        /// <para><b>Entity (Parent Case)</b></para>
        /// <para>Schema Name: incident_parent_incident</para>
        /// </summary>
        public List<Entity> Getincident_parent_incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incident", "parentcaseid", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: Incident_IncidentResolutions</para>
        /// </summary>
        public List<Entity> GetIncident_IncidentResolutions(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incidentresolution", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: Incident_IncidentResolutions</para>
        /// </summary>
        public List<Entity> GetIncident_IncidentResolutions(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "incidentresolution", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity (Incident)</b></para>
        /// <para>Schema Name: knowledgearticle_incidents</para>
        /// </summary>
        public List<Entity> Getknowledgearticle_incidents(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "knowledgearticleincident", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity (Incident)</b></para>
        /// <para>Schema Name: knowledgearticle_incidents</para>
        /// </summary>
        public List<Entity> Getknowledgearticle_incidents(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "knowledgearticleincident", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity (Originating Case)</b></para>
        /// <para>Schema Name: OriginatingCase_Lead</para>
        /// </summary>
        public List<Entity> GetOriginatingCase_Lead(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "originatingcaseid", columns); }

        /// <summary>
        /// <para><b>Entity (Originating Case)</b></para>
        /// <para>Schema Name: OriginatingCase_Lead</para>
        /// </summary>
        public List<Entity> GetOriginatingCase_Lead(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "lead", "originatingcaseid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Letters</para>
        /// </summary>
        public List<Entity> GetIncident_Letters(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "letter", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Letters</para>
        /// </summary>
        public List<Entity> GetIncident_Letters(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "letter", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding Object Id)</b></para>
        /// <para>Schema Name: Incident_MailboxTrackingFolder</para>
        /// </summary>
        public List<Entity> GetIncident_MailboxTrackingFolder(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding Object Id)</b></para>
        /// <para>Schema Name: Incident_MailboxTrackingFolder</para>
        /// </summary>
        public List<Entity> GetIncident_MailboxTrackingFolder(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "mailboxtrackingfolder", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Phonecalls</para>
        /// </summary>
        public List<Entity> GetIncident_Phonecalls(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonecall", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Phonecalls</para>
        /// </summary>
        public List<Entity> GetIncident_Phonecalls(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonecall", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Incident Id)</b></para>
        /// <para>Schema Name: lk_phonetocaseprocess_incidentid</para>
        /// </summary>
        public List<Entity> Getlk_phonetocaseprocess_incidentid(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonetocaseprocess", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity (Incident Id)</b></para>
        /// <para>Schema Name: lk_phonetocaseprocess_incidentid</para>
        /// </summary>
        public List<Entity> Getlk_phonetocaseprocess_incidentid(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "phonetocaseprocess", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: incident_PostFollows</para>
        /// </summary>
        public List<Entity> Getincident_PostFollows(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postfollow", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: incident_PostFollows</para>
        /// </summary>
        public List<Entity> Getincident_PostFollows(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postfollow", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (RegardingObjectId)</b></para>
        /// <para>Schema Name: incident_PostRegardings</para>
        /// </summary>
        public List<Entity> Getincident_PostRegardings(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postregarding", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (RegardingObjectId)</b></para>
        /// <para>Schema Name: incident_PostRegardings</para>
        /// </summary>
        public List<Entity> Getincident_PostRegardings(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postregarding", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (RegardingObjectId)</b></para>
        /// <para>Schema Name: incident_PostRoles</para>
        /// </summary>
        public List<Entity> Getincident_PostRoles(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postrole", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (RegardingObjectId)</b></para>
        /// <para>Schema Name: incident_PostRoles</para>
        /// </summary>
        public List<Entity> Getincident_PostRoles(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "postrole", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Entity instance)</b></para>
        /// <para>Schema Name: incident_principalobjectattributeaccess</para>
        /// </summary>
        public List<Entity> Getincident_principalobjectattributeaccess(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Entity instance)</b></para>
        /// <para>Schema Name: incident_principalobjectattributeaccess</para>
        /// </summary>
        public List<Entity> Getincident_principalobjectattributeaccess(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "principalobjectattributeaccess", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_ProcessSessions</para>
        /// </summary>
        public List<Entity> GetIncident_ProcessSessions(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_ProcessSessions</para>
        /// </summary>
        public List<Entity> GetIncident_ProcessSessions(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "processsession", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Object)</b></para>
        /// <para>Schema Name: Incident_QueueItem</para>
        /// </summary>
        public List<Entity> GetIncident_QueueItem(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "queueitem", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Object)</b></para>
        /// <para>Schema Name: Incident_QueueItem</para>
        /// </summary>
        public List<Entity> GetIncident_QueueItem(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "queueitem", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_RecurringAppointmentMasters</para>
        /// </summary>
        public List<Entity> GetIncident_RecurringAppointmentMasters(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "recurringappointmentmaster", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_RecurringAppointmentMasters</para>
        /// </summary>
        public List<Entity> GetIncident_RecurringAppointmentMasters(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "recurringappointmentmaster", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_ServiceAppointments</para>
        /// </summary>
        public List<Entity> GetIncident_ServiceAppointments(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "serviceappointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_ServiceAppointments</para>
        /// </summary>
        public List<Entity> GetIncident_ServiceAppointments(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "serviceappointment", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: slakpiinstance_incident</para>
        /// </summary>
        public List<Entity> Getslakpiinstance_incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "slakpiinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: slakpiinstance_incident</para>
        /// </summary>
        public List<Entity> Getslakpiinstance_incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "slakpiinstance", "regarding", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_SocialActivities</para>
        /// </summary>
        public List<Entity> GetIncident_SocialActivities(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_SocialActivities</para>
        /// </summary>
        public List<Entity> GetIncident_SocialActivities(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "socialactivity", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Record)</b></para>
        /// <para>Schema Name: Incident_SyncErrors</para>
        /// </summary>
        public List<Entity> GetIncident_SyncErrors(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Record)</b></para>
        /// <para>Schema Name: Incident_SyncErrors</para>
        /// </summary>
        public List<Entity> GetIncident_SyncErrors(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "syncerror", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Tasks</para>
        /// </summary>
        public List<Entity> GetIncident_Tasks(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "task", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding)</b></para>
        /// <para>Schema Name: Incident_Tasks</para>
        /// </summary>
        public List<Entity> GetIncident_Tasks(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "task", "regardingobjectid", columns); }

        /// <summary>
        /// <para><b>Entity (Incident Id)</b></para>
        /// <para>Schema Name: incident_topic</para>
        /// </summary>
        public List<Entity> Getincident_topic(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "topic", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity (Incident Id)</b></para>
        /// <para>Schema Name: incident_topic</para>
        /// </summary>
        public List<Entity> Getincident_topic(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "topic", "incidentid", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_casetracker_Case</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_casetracker_Case(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_casetracker", "tra_case", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_casetracker_Case</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_casetracker_Case(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_casetracker", "tra_case", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_conversation</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_conversation(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_conversation", "tra_caseid", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_conversation</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_conversation(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_conversation", "tra_caseid", columns); }

        /// <summary>
        /// <para><b>Entity (Case Reference)</b></para>
        /// <para>Schema Name: tra_incident_tra_fixedprobs_CaseReference</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_fixedprobs_CaseReference(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_fixedprobs", "tra_casereference", columns); }

        /// <summary>
        /// <para><b>Entity (Case Reference)</b></para>
        /// <para>Schema Name: tra_incident_tra_fixedprobs_CaseReference</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_fixedprobs_CaseReference(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_fixedprobs", "tra_casereference", columns); }

        /// <summary>
        /// <para><b>Entity (Case Reference)</b></para>
        /// <para>Schema Name: tra_incident_tra_followup_CaseReference</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_followup_CaseReference(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_followup", "tra_casereference", columns); }

        /// <summary>
        /// <para><b>Entity (Case Reference)</b></para>
        /// <para>Schema Name: tra_incident_tra_followup_CaseReference</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_followup_CaseReference(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_followup", "tra_casereference", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_idashboard_Case</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_idashboard_Case(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_idashboard", "tra_case", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_idashboard_Case</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_idashboard_Case(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_idashboard", "tra_case", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_slalog_regardingcase</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_slalog_regardingcase(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_slalog", "tra_regardingcase", columns); }

        /// <summary>
        /// <para><b>Entity (Regarding Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_slalog_regardingcase</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_slalog_regardingcase(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_slalog", "tra_regardingcase", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_survey_Case</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_survey_Case(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_survey", "tra_case", columns); }

        /// <summary>
        /// <para><b>Entity (Case)</b></para>
        /// <para>Schema Name: tra_incident_tra_survey_Case</para>
        /// </summary>
        public List<Entity> Gettra_incident_tra_survey_Case(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "tra_survey", "tra_case", columns); }

        /// <summary>
        /// <para><b>Entity (Object Id)</b></para>
        /// <para>Schema Name: userentityinstancedata_incident</para>
        /// </summary>
        public List<Entity> Getuserentityinstancedata_incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }

        /// <summary>
        /// <para><b>Entity (Object Id)</b></para>
        /// <para>Schema Name: userentityinstancedata_incident</para>
        /// </summary>
        public List<Entity> Getuserentityinstancedata_incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedOneToManyEntities(service, this.Id, "userentityinstancedata", "objectid", columns); }


        /// <summary>
        /// <para>Related Entity: <b>Knowledge Base Record</b></para>
        /// <para>N:N Relationship</para>
        /// <para>Schema Name: KnowledgeBaseRecord_Incident</para>
        /// </summary>
        public List<Entity> GetKnowledgeBaseRecord_Incident(IOrganizationService service, params string[] columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "incident", "incidentid", "knowledgebaserecord", "knowledgebaserecordid", "incidentknowledgebaserecord", "incidentid", "knowledgebaserecordid", columns); }
        public List<Entity> GetKnowledgeBaseRecord_Incident(IOrganizationService service, ColumnSet columns) { return BaseProxyClass.GetRelatedManyToManyEntities(service, this, "incident", "incidentid", "knowledgebaserecord", "knowledgebaserecordid", "incidentknowledgebaserecord", "incidentid", "knowledgebaserecordid", columns); }
        public void RelateKnowledgeBaseRecord_Incident(IOrganizationService service, params Entity[] items) { service.RelateEntities(this, "KnowledgeBaseRecord_Incident", null, items); }
        public void RelateKnowledgeBaseRecord_Incident(IOrganizationService service, params EntityReference[] items) { service.RelateEntities(this, "KnowledgeBaseRecord_Incident", null, items); }
        public void UnRelateKnowledgeBaseRecord_Incident(IOrganizationService service, params Entity[] items) { service.UnRelateEntities(this, "KnowledgeBaseRecord_Incident", null, items); }
        public void UnRelateKnowledgeBaseRecord_Incident(IOrganizationService service, params EntityReference[] items) { service.UnRelateEntities(this, "KnowledgeBaseRecord_Incident", null, items); }

        
        
        public static class Properties
        {
            /// <summary>
            /// <para>Account</para>
            /// <para>Logical Name = accountid</para>
            /// </summary>
            public const string AccountId = "accountid";

            /// <summary>
            /// <para>AccountIdName</para>
            /// <para>Logical Name = accountidname</para>
            /// </summary>
            public const string AccountIdName = "accountidname";

            /// <summary>
            /// <para>AccountIdYomiName</para>
            /// <para>Logical Name = accountidyominame</para>
            /// </summary>
            public const string AccountIdYomiName = "accountidyominame";

            /// <summary>
            /// <para>Activities Complete</para>
            /// <para>Logical Name = activitiescomplete</para>
            /// </summary>
            public const string ActivitiesComplete = "activitiescomplete";

            /// <summary>
            /// <para>ActivitiesCompleteName</para>
            /// <para>Logical Name = activitiescompletename</para>
            /// </summary>
            public const string ActivitiesCompleteName = "activitiescompletename";

            /// <summary>
            /// <para>Actual Service Units</para>
            /// <para>Logical Name = actualserviceunits</para>
            /// </summary>
            public const string ActualServiceUnits = "actualserviceunits";

            /// <summary>
            /// <para>Billed Service Units</para>
            /// <para>Logical Name = billedserviceunits</para>
            /// </summary>
            public const string BilledServiceUnits = "billedserviceunits";

            /// <summary>
            /// <para>Blocked Profile</para>
            /// <para>Logical Name = blockedprofile</para>
            /// </summary>
            public const string BlockedProfile = "blockedprofile";

            /// <summary>
            /// <para>BlockedProfileName</para>
            /// <para>Logical Name = blockedprofilename</para>
            /// </summary>
            public const string BlockedProfileName = "blockedprofilename";

            /// <summary>
            /// <para>Origin</para>
            /// <para>Logical Name = caseorigincode</para>
            /// </summary>
            public const string CaseOriginCode = "caseorigincode";

            /// <summary>
            /// <para>CaseOriginCodeName</para>
            /// <para>Logical Name = caseorigincodename</para>
            /// </summary>
            public const string CaseOriginCodeName = "caseorigincodename";

            /// <summary>
            /// <para>Case Type</para>
            /// <para>Logical Name = casetypecode</para>
            /// </summary>
            public const string CaseTypeCode = "casetypecode";

            /// <summary>
            /// <para>CaseTypeCodeName</para>
            /// <para>Logical Name = casetypecodename</para>
            /// </summary>
            public const string CaseTypeCodeName = "casetypecodename";

            /// <summary>
            /// <para>Check Email</para>
            /// <para>Logical Name = checkemail</para>
            /// </summary>
            public const string CheckEmail = "checkemail";

            /// <summary>
            /// <para>CheckEmailName</para>
            /// <para>Logical Name = checkemailname</para>
            /// </summary>
            public const string CheckEmailName = "checkemailname";

            /// <summary>
            /// <para>Contact</para>
            /// <para>Logical Name = contactid</para>
            /// </summary>
            public const string ContactId = "contactid";

            /// <summary>
            /// <para>ContactIdName</para>
            /// <para>Logical Name = contactidname</para>
            /// </summary>
            public const string ContactIdName = "contactidname";

            /// <summary>
            /// <para>ContactIdYomiName</para>
            /// <para>Logical Name = contactidyominame</para>
            /// </summary>
            public const string ContactIdYomiName = "contactidyominame";

            /// <summary>
            /// <para>Contract Line</para>
            /// <para>Logical Name = contractdetailid</para>
            /// </summary>
            public const string ContractDetailId = "contractdetailid";

            /// <summary>
            /// <para>ContractDetailIdName</para>
            /// <para>Logical Name = contractdetailidname</para>
            /// </summary>
            public const string ContractDetailIdName = "contractdetailidname";

            /// <summary>
            /// <para>Contract</para>
            /// <para>Logical Name = contractid</para>
            /// </summary>
            public const string ContractId = "contractid";

            /// <summary>
            /// <para>ContractIdName</para>
            /// <para>Logical Name = contractidname</para>
            /// </summary>
            public const string ContractIdName = "contractidname";

            /// <summary>
            /// <para>Service Level</para>
            /// <para>Logical Name = contractservicelevelcode</para>
            /// </summary>
            public const string ContractServiceLevelCode = "contractservicelevelcode";

            /// <summary>
            /// <para>ContractServiceLevelCodeName</para>
            /// <para>Logical Name = contractservicelevelcodename</para>
            /// </summary>
            public const string ContractServiceLevelCodeName = "contractservicelevelcodename";

            /// <summary>
            /// <para>Created By</para>
            /// <para>Logical Name = createdby</para>
            /// </summary>
            public const string CreatedBy = "createdby";

            /// <summary>
            /// <para>Created By (External Party)</para>
            /// <para>Logical Name = createdbyexternalparty</para>
            /// </summary>
            public const string CreatedByExternalParty = "createdbyexternalparty";

            /// <summary>
            /// <para>CreatedByExternalPartyName</para>
            /// <para>Logical Name = createdbyexternalpartyname</para>
            /// </summary>
            public const string CreatedByExternalPartyName = "createdbyexternalpartyname";

            /// <summary>
            /// <para>CreatedByExternalPartyYomiName</para>
            /// <para>Logical Name = createdbyexternalpartyyominame</para>
            /// </summary>
            public const string CreatedByExternalPartyYomiName = "createdbyexternalpartyyominame";

            /// <summary>
            /// <para>CreatedByName</para>
            /// <para>Logical Name = createdbyname</para>
            /// </summary>
            public const string CreatedByName = "createdbyname";

            /// <summary>
            /// <para>CreatedByYomiName</para>
            /// <para>Logical Name = createdbyyominame</para>
            /// </summary>
            public const string CreatedByYomiName = "createdbyyominame";

            /// <summary>
            /// <para>Created On</para>
            /// <para>Logical Name = createdon</para>
            /// </summary>
            public const string CreatedOn = "createdon";

            /// <summary>
            /// <para>Created By (Delegate)</para>
            /// <para>Logical Name = createdonbehalfby</para>
            /// </summary>
            public const string CreatedOnBehalfBy = "createdonbehalfby";

            /// <summary>
            /// <para>CreatedOnBehalfByName</para>
            /// <para>Logical Name = createdonbehalfbyname</para>
            /// </summary>
            public const string CreatedOnBehalfByName = "createdonbehalfbyname";

            /// <summary>
            /// <para>CreatedOnBehalfByYomiName</para>
            /// <para>Logical Name = createdonbehalfbyyominame</para>
            /// </summary>
            public const string CreatedOnBehalfByYomiName = "createdonbehalfbyyominame";

            /// <summary>
            /// <para>Customer Contacted</para>
            /// <para>Logical Name = customercontacted</para>
            /// </summary>
            public const string CustomerContacted = "customercontacted";

            /// <summary>
            /// <para>Customer</para>
            /// <para>Logical Name = customerid</para>
            /// </summary>
            public const string CustomerId = "customerid";

            /// <summary>
            /// <para>CustomerIdName</para>
            /// <para>Logical Name = customeridname</para>
            /// </summary>
            public const string CustomerIdName = "customeridname";

            /// <summary>
            /// <para>Customer Type</para>
            /// <para>Logical Name = customeridtype</para>
            /// </summary>
            public const string CustomerIdType = "customeridtype";

            /// <summary>
            /// <para>CustomerIdYomiName</para>
            /// <para>Logical Name = customeridyominame</para>
            /// </summary>
            public const string CustomerIdYomiName = "customeridyominame";

            /// <summary>
            /// <para>Satisfaction</para>
            /// <para>Logical Name = customersatisfactioncode</para>
            /// </summary>
            public const string CustomerSatisfactionCode = "customersatisfactioncode";

            /// <summary>
            /// <para>CustomerSatisfactionCodeName</para>
            /// <para>Logical Name = customersatisfactioncodename</para>
            /// </summary>
            public const string CustomerSatisfactionCodeName = "customersatisfactioncodename";

            /// <summary>
            /// <para>Decrement Entitlement Terms</para>
            /// <para>Logical Name = decremententitlementterm</para>
            /// </summary>
            public const string DecrementEntitlementTerm = "decremententitlementterm";

            /// <summary>
            /// <para>DecrementEntitlementTermName</para>
            /// <para>Logical Name = decremententitlementtermname</para>
            /// </summary>
            public const string DecrementEntitlementTermName = "decremententitlementtermname";

            /// <summary>
            /// <para>Description</para>
            /// <para>Logical Name = description</para>
            /// </summary>
            public const string Description = "description";

            /// <summary>
            /// <para>Entitlement</para>
            /// <para>Logical Name = entitlementid</para>
            /// </summary>
            public const string EntitlementId = "entitlementid";

            /// <summary>
            /// <para>EntitlementIdName</para>
            /// <para>Logical Name = entitlementidname</para>
            /// </summary>
            public const string EntitlementIdName = "entitlementidname";

            /// <summary>
            /// <para>Entity Image</para>
            /// <para>Logical Name = entityimage</para>
            /// </summary>
            public const string EntityImage = "entityimage";

            /// <summary>
            /// <para>EntityImage_Timestamp</para>
            /// <para>Logical Name = entityimage_timestamp</para>
            /// </summary>
            public const string EntityImage_Timestamp = "entityimage_timestamp";

            /// <summary>
            /// <para>EntityImage_URL</para>
            /// <para>Logical Name = entityimage_url</para>
            /// </summary>
            public const string EntityImage_URL = "entityimage_url";

            /// <summary>
            /// <para>Entity Image Id</para>
            /// <para>Logical Name = entityimageid</para>
            /// </summary>
            public const string EntityImageId = "entityimageid";

            /// <summary>
            /// <para>Escalated On</para>
            /// <para>Logical Name = escalatedon</para>
            /// </summary>
            public const string EscalatedOn = "escalatedon";

            /// <summary>
            /// <para>Exchange Rate</para>
            /// <para>Logical Name = exchangerate</para>
            /// </summary>
            public const string ExchangeRate = "exchangerate";

            /// <summary>
            /// <para>Existing Case</para>
            /// <para>Logical Name = existingcase</para>
            /// </summary>
            public const string ExistingCase = "existingcase";

            /// <summary>
            /// <para>First Response By KPI</para>
            /// <para>Logical Name = firstresponsebykpiid</para>
            /// </summary>
            public const string FirstResponseByKPIId = "firstresponsebykpiid";

            /// <summary>
            /// <para>FirstResponseByKPIIdName</para>
            /// <para>Logical Name = firstresponsebykpiidname</para>
            /// </summary>
            public const string FirstResponseByKPIIdName = "firstresponsebykpiidname";

            /// <summary>
            /// <para>First Response Sent</para>
            /// <para>Logical Name = firstresponsesent</para>
            /// </summary>
            public const string FirstResponseSent = "firstresponsesent";

            /// <summary>
            /// <para>FirstResponseSentName</para>
            /// <para>Logical Name = firstresponsesentname</para>
            /// </summary>
            public const string FirstResponseSentName = "firstresponsesentname";

            /// <summary>
            /// <para>First Response SLA Status</para>
            /// <para>Logical Name = firstresponseslastatus</para>
            /// </summary>
            public const string FirstResponseSLAStatus = "firstresponseslastatus";

            /// <summary>
            /// <para>FirstResponseSLAStatusName</para>
            /// <para>Logical Name = firstresponseslastatusname</para>
            /// </summary>
            public const string FirstResponseSLAStatusName = "firstresponseslastatusname";

            /// <summary>
            /// <para>Follow Up By</para>
            /// <para>Logical Name = followupby</para>
            /// </summary>
            public const string FollowupBy = "followupby";

            /// <summary>
            /// <para>Follow up Task Created</para>
            /// <para>Logical Name = followuptaskcreated</para>
            /// </summary>
            public const string FollowUpTaskCreated = "followuptaskcreated";

            /// <summary>
            /// <para>FollowUpTaskCreatedName</para>
            /// <para>Logical Name = followuptaskcreatedname</para>
            /// </summary>
            public const string FollowUpTaskCreatedName = "followuptaskcreatedname";

            /// <summary>
            /// <para>Import Sequence Number</para>
            /// <para>Logical Name = importsequencenumber</para>
            /// </summary>
            public const string ImportSequenceNumber = "importsequencenumber";

            /// <summary>
            /// <para>Case</para>
            /// <para>Logical Name = incidentid</para>
            /// </summary>
            public const string IncidentId = "incidentid";

            /// <summary>
            /// <para>Case Stage</para>
            /// <para>Logical Name = incidentstagecode</para>
            /// </summary>
            public const string IncidentStageCode = "incidentstagecode";

            /// <summary>
            /// <para>IncidentStageCodeName</para>
            /// <para>Logical Name = incidentstagecodename</para>
            /// </summary>
            public const string IncidentStageCodeName = "incidentstagecodename";

            /// <summary>
            /// <para>Influence Score</para>
            /// <para>Logical Name = influencescore</para>
            /// </summary>
            public const string InfluenceScore = "influencescore";

            /// <summary>
            /// <para>Decrementing</para>
            /// <para>Logical Name = isdecrementing</para>
            /// </summary>
            public const string IsDecrementing = "isdecrementing";

            /// <summary>
            /// <para>IsDecrementingName</para>
            /// <para>Logical Name = isdecrementingname</para>
            /// </summary>
            public const string IsDecrementingName = "isdecrementingname";

            /// <summary>
            /// <para>IsEscalated</para>
            /// <para>Logical Name = isescalated</para>
            /// </summary>
            public const string IsEscalated = "isescalated";

            /// <summary>
            /// <para>IsEscalatedName</para>
            /// <para>Logical Name = isescalatedname</para>
            /// </summary>
            public const string IsEscalatedName = "isescalatedname";

            /// <summary>
            /// <para>Knowledge Base Article</para>
            /// <para>Logical Name = kbarticleid</para>
            /// </summary>
            public const string KbArticleId = "kbarticleid";

            /// <summary>
            /// <para>KbArticleIdName</para>
            /// <para>Logical Name = kbarticleidname</para>
            /// </summary>
            public const string KbArticleIdName = "kbarticleidname";

            /// <summary>
            /// <para>Last On Hold Time</para>
            /// <para>Logical Name = lastonholdtime</para>
            /// </summary>
            public const string LastOnHoldTime = "lastonholdtime";

            /// <summary>
            /// <para>Master Case</para>
            /// <para>Logical Name = masterid</para>
            /// </summary>
            public const string MasterId = "masterid";

            /// <summary>
            /// <para>MasterIdName</para>
            /// <para>Logical Name = masteridname</para>
            /// </summary>
            public const string MasterIdName = "masteridname";

            /// <summary>
            /// <para>Internal Use Only</para>
            /// <para>Logical Name = merged</para>
            /// </summary>
            public const string Merged = "merged";

            /// <summary>
            /// <para>MergedName</para>
            /// <para>Logical Name = mergedname</para>
            /// </summary>
            public const string MergedName = "mergedname";

            /// <summary>
            /// <para>Received As</para>
            /// <para>Logical Name = messagetypecode</para>
            /// </summary>
            public const string MessageTypeCode = "messagetypecode";

            /// <summary>
            /// <para>MessageTypeCodeName</para>
            /// <para>Logical Name = messagetypecodename</para>
            /// </summary>
            public const string MessageTypeCodeName = "messagetypecodename";

            /// <summary>
            /// <para>Modified By</para>
            /// <para>Logical Name = modifiedby</para>
            /// </summary>
            public const string ModifiedBy = "modifiedby";

            /// <summary>
            /// <para>Modified By (External Party)</para>
            /// <para>Logical Name = modifiedbyexternalparty</para>
            /// </summary>
            public const string ModifiedByExternalParty = "modifiedbyexternalparty";

            /// <summary>
            /// <para>ModifiedByExternalPartyName</para>
            /// <para>Logical Name = modifiedbyexternalpartyname</para>
            /// </summary>
            public const string ModifiedByExternalPartyName = "modifiedbyexternalpartyname";

            /// <summary>
            /// <para>ModifiedByExternalPartyYomiName</para>
            /// <para>Logical Name = modifiedbyexternalpartyyominame</para>
            /// </summary>
            public const string ModifiedByExternalPartyYomiName = "modifiedbyexternalpartyyominame";

            /// <summary>
            /// <para>ModifiedByName</para>
            /// <para>Logical Name = modifiedbyname</para>
            /// </summary>
            public const string ModifiedByName = "modifiedbyname";

            /// <summary>
            /// <para>ModifiedByYomiName</para>
            /// <para>Logical Name = modifiedbyyominame</para>
            /// </summary>
            public const string ModifiedByYomiName = "modifiedbyyominame";

            /// <summary>
            /// <para>Modified On</para>
            /// <para>Logical Name = modifiedon</para>
            /// </summary>
            public const string ModifiedOn = "modifiedon";

            /// <summary>
            /// <para>Modified By (Delegate)</para>
            /// <para>Logical Name = modifiedonbehalfby</para>
            /// </summary>
            public const string ModifiedOnBehalfBy = "modifiedonbehalfby";

            /// <summary>
            /// <para>ModifiedOnBehalfByName</para>
            /// <para>Logical Name = modifiedonbehalfbyname</para>
            /// </summary>
            public const string ModifiedOnBehalfByName = "modifiedonbehalfbyname";

            /// <summary>
            /// <para>ModifiedOnBehalfByYomiName</para>
            /// <para>Logical Name = modifiedonbehalfbyyominame</para>
            /// </summary>
            public const string ModifiedOnBehalfByYomiName = "modifiedonbehalfbyyominame";

            /// <summary>
            /// <para>Send Enquiry to CA</para>
            /// <para>Logical Name = new_kpiid</para>
            /// </summary>
            public const string new_KPIId = "new_kpiid";

            /// <summary>
            /// <para>new_KPIIdName</para>
            /// <para>Logical Name = new_kpiidname</para>
            /// </summary>
            public const string new_KPIIdName = "new_kpiidname";

            /// <summary>
            /// <para>Ticket Number</para>
            /// <para>Logical Name = new_ticketnumber</para>
            /// </summary>
            public const string new_TicketNumber = "new_ticketnumber";

            /// <summary>
            /// <para>Child Cases</para>
            /// <para>Logical Name = numberofchildincidents</para>
            /// </summary>
            public const string NumberOfChildIncidents = "numberofchildincidents";

            /// <summary>
            /// <para>On Hold Time (Minutes)</para>
            /// <para>Logical Name = onholdtime</para>
            /// </summary>
            public const string OnHoldTime = "onholdtime";

            /// <summary>
            /// <para>Record Created On</para>
            /// <para>Logical Name = overriddencreatedon</para>
            /// </summary>
            public const string OverriddenCreatedOn = "overriddencreatedon";

            /// <summary>
            /// <para>Owner</para>
            /// <para>Logical Name = ownerid</para>
            /// </summary>
            public const string OwnerId = "ownerid";

            /// <summary>
            /// <para>OwnerIdName</para>
            /// <para>Logical Name = owneridname</para>
            /// </summary>
            public const string OwnerIdName = "owneridname";

            /// <summary>
            /// <para>OwnerIdType</para>
            /// <para>Logical Name = owneridtype</para>
            /// </summary>
            public const string OwnerIdType = "owneridtype";

            /// <summary>
            /// <para>OwnerIdYomiName</para>
            /// <para>Logical Name = owneridyominame</para>
            /// </summary>
            public const string OwnerIdYomiName = "owneridyominame";

            /// <summary>
            /// <para>Owning Business Unit</para>
            /// <para>Logical Name = owningbusinessunit</para>
            /// </summary>
            public const string OwningBusinessUnit = "owningbusinessunit";

            /// <summary>
            /// <para>Owning Team</para>
            /// <para>Logical Name = owningteam</para>
            /// </summary>
            public const string OwningTeam = "owningteam";

            /// <summary>
            /// <para>Owning User</para>
            /// <para>Logical Name = owninguser</para>
            /// </summary>
            public const string OwningUser = "owninguser";

            /// <summary>
            /// <para>Parent Case</para>
            /// <para>Logical Name = parentcaseid</para>
            /// </summary>
            public const string ParentCaseId = "parentcaseid";

            /// <summary>
            /// <para>ParentCaseIdName</para>
            /// <para>Logical Name = parentcaseidname</para>
            /// </summary>
            public const string ParentCaseIdName = "parentcaseidname";

            /// <summary>
            /// <para>Contact</para>
            /// <para>Logical Name = primarycontactid</para>
            /// </summary>
            public const string PrimaryContactId = "primarycontactid";

            /// <summary>
            /// <para>PrimaryContactIdName</para>
            /// <para>Logical Name = primarycontactidname</para>
            /// </summary>
            public const string PrimaryContactIdName = "primarycontactidname";

            /// <summary>
            /// <para>PrimaryContactIdYomiName</para>
            /// <para>Logical Name = primarycontactidyominame</para>
            /// </summary>
            public const string PrimaryContactIdYomiName = "primarycontactidyominame";

            /// <summary>
            /// <para>Priority</para>
            /// <para>Logical Name = prioritycode</para>
            /// </summary>
            public const string PriorityCode = "prioritycode";

            /// <summary>
            /// <para>PriorityCodeName</para>
            /// <para>Logical Name = prioritycodename</para>
            /// </summary>
            public const string PriorityCodeName = "prioritycodename";

            /// <summary>
            /// <para>Process</para>
            /// <para>Logical Name = processid</para>
            /// </summary>
            public const string ProcessId = "processid";

            /// <summary>
            /// <para>Product</para>
            /// <para>Logical Name = productid</para>
            /// </summary>
            public const string ProductId = "productid";

            /// <summary>
            /// <para>ProductIdName</para>
            /// <para>Logical Name = productidname</para>
            /// </summary>
            public const string ProductIdName = "productidname";

            /// <summary>
            /// <para>Serial Number</para>
            /// <para>Logical Name = productserialnumber</para>
            /// </summary>
            public const string ProductSerialNumber = "productserialnumber";

            /// <summary>
            /// <para>Resolve By</para>
            /// <para>Logical Name = resolveby</para>
            /// </summary>
            public const string ResolveBy = "resolveby";

            /// <summary>
            /// <para>Resolve By KPI</para>
            /// <para>Logical Name = resolvebykpiid</para>
            /// </summary>
            public const string ResolveByKPIId = "resolvebykpiid";

            /// <summary>
            /// <para>ResolveByKPIIdName</para>
            /// <para>Logical Name = resolvebykpiidname</para>
            /// </summary>
            public const string ResolveByKPIIdName = "resolvebykpiidname";

            /// <summary>
            /// <para>Resolve By SLA Status</para>
            /// <para>Logical Name = resolvebyslastatus</para>
            /// </summary>
            public const string ResolveBySLAStatus = "resolvebyslastatus";

            /// <summary>
            /// <para>ResolveBySLAStatusName</para>
            /// <para>Logical Name = resolvebyslastatusname</para>
            /// </summary>
            public const string ResolveBySLAStatusName = "resolvebyslastatusname";

            /// <summary>
            /// <para>First Response By</para>
            /// <para>Logical Name = responseby</para>
            /// </summary>
            public const string ResponseBy = "responseby";

            /// <summary>
            /// <para>Responsible Contact</para>
            /// <para>Logical Name = responsiblecontactid</para>
            /// </summary>
            public const string ResponsibleContactId = "responsiblecontactid";

            /// <summary>
            /// <para>ResponsibleContactIdName</para>
            /// <para>Logical Name = responsiblecontactidname</para>
            /// </summary>
            public const string ResponsibleContactIdName = "responsiblecontactidname";

            /// <summary>
            /// <para>ResponsibleContactIdYomiName</para>
            /// <para>Logical Name = responsiblecontactidyominame</para>
            /// </summary>
            public const string ResponsibleContactIdYomiName = "responsiblecontactidyominame";

            /// <summary>
            /// <para>Route Case</para>
            /// <para>Logical Name = routecase</para>
            /// </summary>
            public const string RouteCase = "routecase";

            /// <summary>
            /// <para>Sentiment Value</para>
            /// <para>Logical Name = sentimentvalue</para>
            /// </summary>
            public const string SentimentValue = "sentimentvalue";

            /// <summary>
            /// <para>Service Stage</para>
            /// <para>Logical Name = servicestage</para>
            /// </summary>
            public const string ServiceStage = "servicestage";

            /// <summary>
            /// <para>ServiceStageName</para>
            /// <para>Logical Name = servicestagename</para>
            /// </summary>
            public const string ServiceStageName = "servicestagename";

            /// <summary>
            /// <para>Severity</para>
            /// <para>Logical Name = severitycode</para>
            /// </summary>
            public const string SeverityCode = "severitycode";

            /// <summary>
            /// <para>SeverityCodeName</para>
            /// <para>Logical Name = severitycodename</para>
            /// </summary>
            public const string SeverityCodeName = "severitycodename";

            /// <summary>
            /// <para>SLA</para>
            /// <para>Logical Name = slaid</para>
            /// </summary>
            public const string SLAId = "slaid";

            /// <summary>
            /// <para>Last SLA applied</para>
            /// <para>Logical Name = slainvokedid</para>
            /// </summary>
            public const string SLAInvokedId = "slainvokedid";

            /// <summary>
            /// <para>SLAInvokedIdName</para>
            /// <para>Logical Name = slainvokedidname</para>
            /// </summary>
            public const string SLAInvokedIdName = "slainvokedidname";

            /// <summary>
            /// <para>SLAName</para>
            /// <para>Logical Name = slaname</para>
            /// </summary>
            public const string SLAName = "slaname";

            /// <summary>
            /// <para>Social Profile</para>
            /// <para>Logical Name = socialprofileid</para>
            /// </summary>
            public const string SocialProfileId = "socialprofileid";

            /// <summary>
            /// <para>SocialProfileIdName</para>
            /// <para>Logical Name = socialprofileidname</para>
            /// </summary>
            public const string SocialProfileIdName = "socialprofileidname";

            /// <summary>
            /// <para>Process Stage</para>
            /// <para>Logical Name = stageid</para>
            /// </summary>
            public const string StageId = "stageid";

            /// <summary>
            /// <para>Status</para>
            /// <para>Logical Name = statecode</para>
            /// </summary>
            public const string StateCode = "statecode";

            /// <summary>
            /// <para>StateCodeName</para>
            /// <para>Logical Name = statecodename</para>
            /// </summary>
            public const string StateCodeName = "statecodename";

            /// <summary>
            /// <para>Status Reason</para>
            /// <para>Logical Name = statuscode</para>
            /// </summary>
            public const string StatusCode = "statuscode";

            /// <summary>
            /// <para>StatusCodeName</para>
            /// <para>Logical Name = statuscodename</para>
            /// </summary>
            public const string StatusCodeName = "statuscodename";

            /// <summary>
            /// <para>Subject</para>
            /// <para>Logical Name = subjectid</para>
            /// </summary>
            public const string SubjectId = "subjectid";

            /// <summary>
            /// <para>SubjectIdName</para>
            /// <para>Logical Name = subjectidname</para>
            /// </summary>
            public const string SubjectIdName = "subjectidname";

            /// <summary>
            /// <para>Case Number</para>
            /// <para>Logical Name = ticketnumber</para>
            /// </summary>
            public const string TicketNumber = "ticketnumber";

            /// <summary>
            /// <para>Time Zone Rule Version Number</para>
            /// <para>Logical Name = timezoneruleversionnumber</para>
            /// </summary>
            public const string TimeZoneRuleVersionNumber = "timezoneruleversionnumber";

            /// <summary>
            /// <para>Case Title</para>
            /// <para>Logical Name = title</para>
            /// </summary>
            public const string Title = "title";

            /// <summary>
            /// <para>Accepted by Service Provider</para>
            /// <para>Logical Name = tra_acceptedbyserviceprovider</para>
            /// </summary>
            public const string tra_acceptedbyserviceprovider = "tra_acceptedbyserviceprovider";

            /// <summary>
            /// <para>tra_acceptedbyserviceproviderName</para>
            /// <para>Logical Name = tra_acceptedbyserviceprovidername</para>
            /// </summary>
            public const string tra_acceptedbyserviceproviderName = "tra_acceptedbyserviceprovidername";

            /// <summary>
            /// <para>Accept Rejection?</para>
            /// <para>Logical Name = tra_acceptrejection</para>
            /// </summary>
            public const string tra_acceptrejection = "tra_acceptrejection";

            /// <summary>
            /// <para>tra_acceptrejectionName</para>
            /// <para>Logical Name = tra_acceptrejectionname</para>
            /// </summary>
            public const string tra_acceptrejectionName = "tra_acceptrejectionname";

            /// <summary>
            /// <para>Approve SP Feedback by KPi</para>
            /// <para>Logical Name = tra_approvespfeedbackbykpiid</para>
            /// </summary>
            public const string tra_approvespfeedbackbykpiid = "tra_approvespfeedbackbykpiid";

            /// <summary>
            /// <para>tra_approvespfeedbackbykpiidName</para>
            /// <para>Logical Name = tra_approvespfeedbackbykpiidname</para>
            /// </summary>
            public const string tra_approvespfeedbackbykpiidName = "tra_approvespfeedbackbykpiidname";

            /// <summary>
            /// <para>Area</para>
            /// <para>Logical Name = tra_area</para>
            /// </summary>
            public const string tra_area = "tra_area";

            /// <summary>
            /// <para>Area</para>
            /// <para>Logical Name = tra_arealookup</para>
            /// </summary>
            public const string tra_AreaLookup = "tra_arealookup";

            /// <summary>
            /// <para>tra_AreaLookupName</para>
            /// <para>Logical Name = tra_arealookupname</para>
            /// </summary>
            public const string tra_AreaLookupName = "tra_arealookupname";

            /// <summary>
            /// <para>Assignment Count</para>
            /// <para>Logical Name = tra_assignmentcount</para>
            /// </summary>
            public const string tra_assignmentcount = "tra_assignmentcount";

            /// <summary>
            /// <para>Enq/Sug assigned to CA Flag</para>
            /// <para>Logical Name = tra_assigntoconsumeraffairs</para>
            /// </summary>
            public const string tra_AssigntoConsumerAffairs = "tra_assigntoconsumeraffairs";

            /// <summary>
            /// <para>tra_assigntoconsumeraffairsName</para>
            /// <para>Logical Name = tra_assigntoconsumeraffairsname</para>
            /// </summary>
            public const string tra_assigntoconsumeraffairsName = "tra_assigntoconsumeraffairsname";

            /// <summary>
            /// <para>Assign to Department</para>
            /// <para>Logical Name = tra_assigntodepartment</para>
            /// </summary>
            public const string tra_AssigntoDepartment = "tra_assigntodepartment";

            /// <summary>
            /// <para>tra_assigntodepartmentName</para>
            /// <para>Logical Name = tra_assigntodepartmentname</para>
            /// </summary>
            public const string tra_assigntodepartmentName = "tra_assigntodepartmentname";

            /// <summary>
            /// <para>Assign to SP</para>
            /// <para>Logical Name = tra_assigntosp</para>
            /// </summary>
            public const string tra_AssigntoSP = "tra_assigntosp";

            /// <summary>
            /// <para>tra_assigntospName</para>
            /// <para>Logical Name = tra_assigntospname</para>
            /// </summary>
            public const string tra_assigntospName = "tra_assigntospname";

            /// <summary>
            /// <para>Block</para>
            /// <para>Logical Name = tra_block</para>
            /// </summary>
            public const string tra_block = "tra_block";

            /// <summary>
            /// <para>Building/Flat</para>
            /// <para>Logical Name = tra_buildingflat</para>
            /// </summary>
            public const string tra_buildingflat = "tra_buildingflat";

            /// <summary>
            /// <para>CA Accepted On</para>
            /// <para>Logical Name = tra_caacceptedon</para>
            /// </summary>
            public const string tra_CAAcceptedOn = "tra_caacceptedon";

            /// <summary>
            /// <para>CA Assign Case to Dept by KPI</para>
            /// <para>Logical Name = tra_caassigncasetodeptbykpiid</para>
            /// </summary>
            public const string tra_caassigncasetodeptbykpiid = "tra_caassigncasetodeptbykpiid";

            /// <summary>
            /// <para>tra_caassigncasetodeptbykpiidName</para>
            /// <para>Logical Name = tra_caassigncasetodeptbykpiidname</para>
            /// </summary>
            public const string tra_caassigncasetodeptbykpiidName = "tra_caassigncasetodeptbykpiidname";

            /// <summary>
            /// <para>CA Comment</para>
            /// <para>Logical Name = tra_cacomment</para>
            /// </summary>
            public const string tra_cacomment = "tra_cacomment";

            /// <summary>
            /// <para>CA feedback by KPI</para>
            /// <para>Logical Name = tra_cafeedbacbykpiid</para>
            /// </summary>
            public const string tra_cafeedbacbykpiid = "tra_cafeedbacbykpiid";

            /// <summary>
            /// <para>tra_cafeedbacbykpiidName</para>
            /// <para>Logical Name = tra_cafeedbacbykpiidname</para>
            /// </summary>
            public const string tra_cafeedbacbykpiidName = "tra_cafeedbacbykpiidname";

            /// <summary>
            /// <para>CA feedback (for No SP response) by KPI</para>
            /// <para>Logical Name = tra_cafeedbackfornospresponsebykpiid</para>
            /// </summary>
            public const string tra_cafeedbackfornospresponsebykpiid = "tra_cafeedbackfornospresponsebykpiid";

            /// <summary>
            /// <para>tra_cafeedbackfornospresponsebykpiidName</para>
            /// <para>Logical Name = tra_cafeedbackfornospresponsebykpiidname</para>
            /// </summary>
            public const string tra_cafeedbackfornospresponsebykpiidName = "tra_cafeedbackfornospresponsebykpiidname";

            /// <summary>
            /// <para>CA First Assignment</para>
            /// <para>Logical Name = tra_cafirstassignment</para>
            /// </summary>
            public const string tra_CAFirstAssignment = "tra_cafirstassignment";

            /// <summary>
            /// <para>tra_cafirstassignmentName</para>
            /// <para>Logical Name = tra_cafirstassignmentname</para>
            /// </summary>
            public const string tra_cafirstassignmentName = "tra_cafirstassignmentname";

            /// <summary>
            /// <para>CA Process Enquiry</para>
            /// <para>Logical Name = tra_caprocessenquiryid</para>
            /// </summary>
            public const string tra_CAProcessEnquiryId = "tra_caprocessenquiryid";

            /// <summary>
            /// <para>tra_CAProcessEnquiryIdName</para>
            /// <para>Logical Name = tra_caprocessenquiryidname</para>
            /// </summary>
            public const string tra_CAProcessEnquiryIdName = "tra_caprocessenquiryidname";

            /// <summary>
            /// <para>caseid</para>
            /// <para>Logical Name = tra_caseid</para>
            /// </summary>
            public const string tra_caseid = "tra_caseid";

            /// <summary>
            /// <para>Case ID - Archive</para>
            /// <para>Logical Name = tra_caseidarchive</para>
            /// </summary>
            public const string tra_caseidarchive = "tra_caseidarchive";

            /// <summary>
            /// <para>Case Question 1</para>
            /// <para>Logical Name = tra_casequestion1</para>
            /// </summary>
            public const string tra_casequestion1 = "tra_casequestion1";

            /// <summary>
            /// <para>Case Question 2</para>
            /// <para>Logical Name = tra_casequestion2</para>
            /// </summary>
            public const string tra_casequestion2 = "tra_casequestion2";

            /// <summary>
            /// <para>Case Question 3</para>
            /// <para>Logical Name = tra_casequestion3</para>
            /// </summary>
            public const string tra_casequestion3 = "tra_casequestion3";

            /// <summary>
            /// <para>Case Status(archive)</para>
            /// <para>Logical Name = tra_casestatusarchive</para>
            /// </summary>
            public const string tra_CaseStatusarchive = "tra_casestatusarchive";

            /// <summary>
            /// <para>Case Status - Archived</para>
            /// <para>Logical Name = tra_casestatusarchived</para>
            /// </summary>
            public const string tra_casestatusarchived = "tra_casestatusarchived";

            /// <summary>
            /// <para>Case Status for Consumer</para>
            /// <para>Logical Name = tra_casestatusforconsumer</para>
            /// </summary>
            public const string tra_casestatusforconsumer = "tra_casestatusforconsumer";

            /// <summary>
            /// <para>tra_casestatusforconsumerName</para>
            /// <para>Logical Name = tra_casestatusforconsumername</para>
            /// </summary>
            public const string tra_casestatusforconsumerName = "tra_casestatusforconsumername";

            /// <summary>
            /// <para>Case Tracker</para>
            /// <para>Logical Name = tra_casetracker</para>
            /// </summary>
            public const string tra_casetracker = "tra_casetracker";

            /// <summary>
            /// <para>tra_casetrackerName</para>
            /// <para>Logical Name = tra_casetrackername</para>
            /// </summary>
            public const string tra_casetrackerName = "tra_casetrackername";

            /// <summary>
            /// <para>CA to process case by KPI</para>
            /// <para>Logical Name = tra_catoprocesscasebykpiid</para>
            /// </summary>
            public const string tra_catoprocesscasebykpiid = "tra_catoprocesscasebykpiid";

            /// <summary>
            /// <para>tra_catoprocesscasebykpiidName</para>
            /// <para>Logical Name = tra_catoprocesscasebykpiidname</para>
            /// </summary>
            public const string tra_catoprocesscasebykpiidName = "tra_catoprocesscasebykpiidname";

            /// <summary>
            /// <para>Complaint Subtype</para>
            /// <para>Logical Name = tra_complaintsubtype</para>
            /// </summary>
            public const string tra_complaintsubtype = "tra_complaintsubtype";

            /// <summary>
            /// <para>Complaint Subtype(archive)</para>
            /// <para>Logical Name = tra_complaintsubtypearchive</para>
            /// </summary>
            public const string tra_ComplaintSubtypearchive = "tra_complaintsubtypearchive";

            /// <summary>
            /// <para>tra_complaintsubtypeName</para>
            /// <para>Logical Name = tra_complaintsubtypename</para>
            /// </summary>
            public const string tra_complaintsubtypeName = "tra_complaintsubtypename";

            /// <summary>
            /// <para>Complaint Type</para>
            /// <para>Logical Name = tra_complainttype</para>
            /// </summary>
            public const string tra_complainttype = "tra_complainttype";

            /// <summary>
            /// <para>Complaint Type (archive)</para>
            /// <para>Logical Name = tra_complainttypearchive</para>
            /// </summary>
            public const string tra_complainttypearchive = "tra_complainttypearchive";

            /// <summary>
            /// <para>Complaint Type Data</para>
            /// <para>Logical Name = tra_complainttypedata</para>
            /// </summary>
            public const string tra_ComplaintTypeData = "tra_complainttypedata";

            /// <summary>
            /// <para>tra_complainttypeName</para>
            /// <para>Logical Name = tra_complainttypename</para>
            /// </summary>
            public const string tra_complainttypeName = "tra_complainttypename";

            /// <summary>
            /// <para>Consent Status</para>
            /// <para>Logical Name = tra_consentstatus</para>
            /// </summary>
            public const string tra_consentstatus = "tra_consentstatus";

            /// <summary>
            /// <para>tra_consentstatusName</para>
            /// <para>Logical Name = tra_consentstatusname</para>
            /// </summary>
            public const string tra_consentstatusName = "tra_consentstatusname";

            /// <summary>
            /// <para>Consumer Affairs Flag Enquiry</para>
            /// <para>Logical Name = tra_consumeraffairsflagenquiry</para>
            /// </summary>
            public const string tra_ConsumerAffairsFlagEnquiry = "tra_consumeraffairsflagenquiry";

            /// <summary>
            /// <para>tra_consumeraffairsflagenquiryName</para>
            /// <para>Logical Name = tra_consumeraffairsflagenquiryname</para>
            /// </summary>
            public const string tra_consumeraffairsflagenquiryName = "tra_consumeraffairsflagenquiryname";

            /// <summary>
            /// <para>Consumer Consent By KPI</para>
            /// <para>Logical Name = tra_consumerconsentbykpiid</para>
            /// </summary>
            public const string tra_consumerconsentbykpiid = "tra_consumerconsentbykpiid";

            /// <summary>
            /// <para>tra_consumerconsentbykpiidName</para>
            /// <para>Logical Name = tra_consumerconsentbykpiidname</para>
            /// </summary>
            public const string tra_consumerconsentbykpiidName = "tra_consumerconsentbykpiidname";

            /// <summary>
            /// <para>Consumer to submit documents by KPI</para>
            /// <para>Logical Name = tra_consumertosubmitdocumentsbykpiid</para>
            /// </summary>
            public const string tra_consumertosubmitdocumentsbykpiid = "tra_consumertosubmitdocumentsbykpiid";

            /// <summary>
            /// <para>tra_consumertosubmitdocumentsbykpiidName</para>
            /// <para>Logical Name = tra_consumertosubmitdocumentsbykpiidname</para>
            /// </summary>
            public const string tra_consumertosubmitdocumentsbykpiidName = "tra_consumertosubmitdocumentsbykpiidname";

            /// <summary>
            /// <para>Contract Duration</para>
            /// <para>Logical Name = tra_contractduration</para>
            /// </summary>
            public const string tra_contractduration = "tra_contractduration";

            /// <summary>
            /// <para>tra_contractdurationName</para>
            /// <para>Logical Name = tra_contractdurationname</para>
            /// </summary>
            public const string tra_contractdurationName = "tra_contractdurationname";

            /// <summary>
            /// <para>CPR Number of Owner</para>
            /// <para>Logical Name = tra_cprnumberofowner</para>
            /// </summary>
            public const string tra_cprnumberofowner = "tra_cprnumberofowner";

            /// <summary>
            /// <para>Created on(archive)</para>
            /// <para>Logical Name = tra_createdonarchive</para>
            /// </summary>
            public const string tra_Createdonarchive = "tra_createdonarchive";

            /// <summary>
            /// <para>Data</para>
            /// <para>Logical Name = tra_data</para>
            /// </summary>
            public const string tra_Data = "tra_data";

            /// <summary>
            /// <para>tra_dataName</para>
            /// <para>Logical Name = tra_dataname</para>
            /// </summary>
            public const string tra_dataName = "tra_dataname";

            /// <summary>
            /// <para>Date of Complaint against SP</para>
            /// <para>Logical Name = tra_dateofcomplaintagainstserviceprovider</para>
            /// </summary>
            public const string tra_dateofcomplaintagainstserviceprovider = "tra_dateofcomplaintagainstserviceprovider";

            /// <summary>
            /// <para>Date of Subscription</para>
            /// <para>Logical Name = tra_dateofsubscription</para>
            /// </summary>
            public const string tra_dateofsubscription = "tra_dateofsubscription";

            /// <summary>
            /// <para>Date of VAS Opt-in</para>
            /// <para>Logical Name = tra_dateofvasoptin</para>
            /// </summary>
            public const string tra_DateofVASOptin = "tra_dateofvasoptin";

            /// <summary>
            /// <para>Department</para>
            /// <para>Logical Name = tra_department</para>
            /// </summary>
            public const string tra_department = "tra_department";

            /// <summary>
            /// <para>Dept. Comment</para>
            /// <para>Logical Name = tra_departmentcomment</para>
            /// </summary>
            public const string tra_departmentcomment = "tra_departmentcomment";

            /// <summary>
            /// <para>tra_departmentName</para>
            /// <para>Logical Name = tra_departmentname</para>
            /// </summary>
            public const string tra_departmentName = "tra_departmentname";

            /// <summary>
            /// <para>Dept. Feedback by KPI</para>
            /// <para>Logical Name = tra_deptfeedbackbyid</para>
            /// </summary>
            public const string tra_deptfeedbackbyid = "tra_deptfeedbackbyid";

            /// <summary>
            /// <para>tra_deptfeedbackbyidName</para>
            /// <para>Logical Name = tra_deptfeedbackbyidname</para>
            /// </summary>
            public const string tra_deptfeedbackbyidName = "tra_deptfeedbackbyidname";

            /// <summary>
            /// <para>Dept. Feedback Received</para>
            /// <para>Logical Name = tra_deptfeedbackrdeeceived</para>
            /// </summary>
            public const string tra_deptfeedbackrdeeceived = "tra_deptfeedbackrdeeceived";

            /// <summary>
            /// <para>tra_deptfeedbackrdeeceivedName</para>
            /// <para>Logical Name = tra_deptfeedbackrdeeceivedname</para>
            /// </summary>
            public const string tra_deptfeedbackrdeeceivedName = "tra_deptfeedbackrdeeceivedname";

            /// <summary>
            /// <para>Dept. Feedback Satisfactory</para>
            /// <para>Logical Name = tra_deptfeedbacksatisfactory</para>
            /// </summary>
            public const string tra_deptfeedbacksatisfactory = "tra_deptfeedbacksatisfactory";

            /// <summary>
            /// <para>tra_deptfeedbacksatisfactoryName</para>
            /// <para>Logical Name = tra_deptfeedbacksatisfactoryname</para>
            /// </summary>
            public const string tra_deptfeedbacksatisfactoryName = "tra_deptfeedbacksatisfactoryname";

            /// <summary>
            /// <para>Dept Request Addl Info by</para>
            /// <para>Logical Name = tra_deptrequestaddlinfoid</para>
            /// </summary>
            public const string tra_deptrequestaddlinfoid = "tra_deptrequestaddlinfoid";

            /// <summary>
            /// <para>tra_deptrequestaddlinfoidName</para>
            /// <para>Logical Name = tra_deptrequestaddlinfoidname</para>
            /// </summary>
            public const string tra_deptrequestaddlinfoidName = "tra_deptrequestaddlinfoidname";

            /// <summary>
            /// <para>Dispute Charge</para>
            /// <para>Logical Name = tra_disputecharge</para>
            /// </summary>
            public const string tra_disputecharge = "tra_disputecharge";

            /// <summary>
            /// <para>Dispute Charge (Base)</para>
            /// <para>Logical Name = tra_disputecharge_base</para>
            /// </summary>
            public const string tra_disputecharge_Base = "tra_disputecharge_base";

            /// <summary>
            /// <para>Disputed Amount</para>
            /// <para>Logical Name = tra_disputedamount</para>
            /// </summary>
            public const string tra_DisputedAmount = "tra_disputedamount";

            /// <summary>
            /// <para>Disputed Amount (Base)</para>
            /// <para>Logical Name = tra_disputedamount_base</para>
            /// </summary>
            public const string tra_disputedamount_Base = "tra_disputedamount_base";

            /// <summary>
            /// <para>Disputed No(archive)</para>
            /// <para>Logical Name = tra_disputednoarchive</para>
            /// </summary>
            public const string tra_DisputedNoarchive = "tra_disputednoarchive";

            /// <summary>
            /// <para>Disputed Number</para>
            /// <para>Logical Name = tra_disputednumber</para>
            /// </summary>
            public const string tra_disputednumber = "tra_disputednumber";

            /// <summary>
            /// <para>Document Check By KPI</para>
            /// <para>Logical Name = tra_documentcheckbyid</para>
            /// </summary>
            public const string tra_documentcheckbyid = "tra_documentcheckbyid";

            /// <summary>
            /// <para>tra_documentcheckbyidName</para>
            /// <para>Logical Name = tra_documentcheckbyidname</para>
            /// </summary>
            public const string tra_documentcheckbyidName = "tra_documentcheckbyidname";

            /// <summary>
            /// <para>Documents Check Date</para>
            /// <para>Logical Name = tra_documentscheckdate</para>
            /// </summary>
            public const string tra_documentscheckdate = "tra_documentscheckdate";

            /// <summary>
            /// <para>Documents Verified</para>
            /// <para>Logical Name = tra_documentsverified</para>
            /// </summary>
            public const string tra_documentsverified = "tra_documentsverified";

            /// <summary>
            /// <para>tra_documentsverifiedName</para>
            /// <para>Logical Name = tra_documentsverifiedname</para>
            /// </summary>
            public const string tra_documentsverifiedName = "tra_documentsverifiedname";

            /// <summary>
            /// <para>Enquiry Type</para>
            /// <para>Logical Name = tra_enquirytype</para>
            /// </summary>
            public const string tra_enquirytype = "tra_enquirytype";

            /// <summary>
            /// <para>tra_enquirytypeName</para>
            /// <para>Logical Name = tra_enquirytypename</para>
            /// </summary>
            public const string tra_enquirytypeName = "tra_enquirytypename";

            /// <summary>
            /// <para>Expected date of resolution</para>
            /// <para>Logical Name = tra_expecteddateofresolution</para>
            /// </summary>
            public const string tra_Expecteddateofresolution = "tra_expecteddateofresolution";

            /// <summary>
            /// <para>Final Decision</para>
            /// <para>Logical Name = tra_finaldecision</para>
            /// </summary>
            public const string tra_finaldecision = "tra_finaldecision";

            /// <summary>
            /// <para>Flat</para>
            /// <para>Logical Name = tra_flat</para>
            /// </summary>
            public const string tra_flat = "tra_flat";

            /// <summary>
            /// <para>Info. Requested By</para>
            /// <para>Logical Name = tra_inforequestedby</para>
            /// </summary>
            public const string tra_inforequestedby = "tra_inforequestedby";

            /// <summary>
            /// <para>tra_inforequestedbyName</para>
            /// <para>Logical Name = tra_inforequestedbyname</para>
            /// </summary>
            public const string tra_inforequestedbyName = "tra_inforequestedbyname";

            /// <summary>
            /// <para>Info Required (Department)</para>
            /// <para>Logical Name = tra_inforequired</para>
            /// </summary>
            public const string tra_InfoRequired = "tra_inforequired";

            /// <summary>
            /// <para>Info Required(CA)</para>
            /// <para>Logical Name = tra_inforequiredca</para>
            /// </summary>
            public const string tra_InfoRequiredCA = "tra_inforequiredca";

            /// <summary>
            /// <para>tra_inforequiredcaName</para>
            /// <para>Logical Name = tra_inforequiredcaname</para>
            /// </summary>
            public const string tra_inforequiredcaName = "tra_inforequiredcaname";

            /// <summary>
            /// <para>tra_inforequiredName</para>
            /// <para>Logical Name = tra_inforequiredname</para>
            /// </summary>
            public const string tra_inforequiredName = "tra_inforequiredname";

            /// <summary>
            /// <para>Information Requested</para>
            /// <para>Logical Name = tra_informationrequested</para>
            /// </summary>
            public const string tra_informationrequested = "tra_informationrequested";

            /// <summary>
            /// <para>tra_informationrequestedName</para>
            /// <para>Logical Name = tra_informationrequestedname</para>
            /// </summary>
            public const string tra_informationrequestedName = "tra_informationrequestedname";

            /// <summary>
            /// <para>Is Archive</para>
            /// <para>Logical Name = tra_isarchive</para>
            /// </summary>
            public const string tra_isarchive = "tra_isarchive";

            /// <summary>
            /// <para>tra_isarchiveName</para>
            /// <para>Logical Name = tra_isarchivename</para>
            /// </summary>
            public const string tra_isarchiveName = "tra_isarchivename";

            /// <summary>
            /// <para>Is Assigned To BNET</para>
            /// <para>Logical Name = tra_isassignedtobnet</para>
            /// </summary>
            public const string tra_IsAssignedToBNET = "tra_isassignedtobnet";

            /// <summary>
            /// <para>tra_isassignedtobnetName</para>
            /// <para>Logical Name = tra_isassignedtobnetname</para>
            /// </summary>
            public const string tra_isassignedtobnetName = "tra_isassignedtobnetname";

            /// <summary>
            /// <para>Is Feedback</para>
            /// <para>Logical Name = tra_isfeedback</para>
            /// </summary>
            public const string tra_IsFeedback = "tra_isfeedback";

            /// <summary>
            /// <para>tra_isfeedbackName</para>
            /// <para>Logical Name = tra_isfeedbackname</para>
            /// </summary>
            public const string tra_isfeedbackName = "tra_isfeedbackname";

            /// <summary>
            /// <para>IsFeedbackProvided</para>
            /// <para>Logical Name = tra_isfeedbackprovided</para>
            /// </summary>
            public const string tra_IsFeedbackProvided = "tra_isfeedbackprovided";

            /// <summary>
            /// <para>tra_isfeedbackprovidedName</para>
            /// <para>Logical Name = tra_isfeedbackprovidedname</para>
            /// </summary>
            public const string tra_isfeedbackprovidedName = "tra_isfeedbackprovidedname";

            /// <summary>
            /// <para>Issue Decision</para>
            /// <para>Logical Name = tra_issuedecision</para>
            /// </summary>
            public const string tra_issuedecision = "tra_issuedecision";

            /// <summary>
            /// <para>tra_issuedecisionName</para>
            /// <para>Logical Name = tra_issuedecisionname</para>
            /// </summary>
            public const string tra_issuedecisionName = "tra_issuedecisionname";

            /// <summary>
            /// <para>CA Action Enquiry</para>
            /// <para>Logical Name = tra_kpicafeedbackorassigntootherdepid</para>
            /// </summary>
            public const string tra_KPICAfeedbackorAssigntootherDepId = "tra_kpicafeedbackorassigntootherdepid";

            /// <summary>
            /// <para>tra_KPICAfeedbackorAssigntootherDepIdName</para>
            /// <para>Logical Name = tra_kpicafeedbackorassigntootherdepidname</para>
            /// </summary>
            public const string tra_KPICAfeedbackorAssigntootherDepIdName = "tra_kpicafeedbackorassigntootherdepidname";

            /// <summary>
            /// <para>Call Center Action Enquiry</para>
            /// <para>Logical Name = tra_kpicallcentertoactiontheenquiryid</para>
            /// </summary>
            public const string tra_KPICallcentertoactiontheenquiryId = "tra_kpicallcentertoactiontheenquiryid";

            /// <summary>
            /// <para>tra_KPICallcentertoactiontheenquiryIdName</para>
            /// <para>Logical Name = tra_kpicallcentertoactiontheenquiryidname</para>
            /// </summary>
            public const string tra_KPICallcentertoactiontheenquiryIdName = "tra_kpicallcentertoactiontheenquiryidname";

            /// <summary>
            /// <para>Dept. Action Enquiry</para>
            /// <para>Logical Name = tra_kpiotherdepttorevertwithfeedid</para>
            /// </summary>
            public const string tra_KPIOtherDepttorevertwithfeedId = "tra_kpiotherdepttorevertwithfeedid";

            /// <summary>
            /// <para>tra_KPIOtherDepttorevertwithfeedIdName</para>
            /// <para>Logical Name = tra_kpiotherdepttorevertwithfeedidname</para>
            /// </summary>
            public const string tra_KPIOtherDepttorevertwithfeedIdName = "tra_kpiotherdepttorevertwithfeedidname";

            /// <summary>
            /// <para>Line Status</para>
            /// <para>Logical Name = tra_linestatus</para>
            /// </summary>
            public const string tra_linestatus = "tra_linestatus";

            /// <summary>
            /// <para>Method of VAS Opt-in</para>
            /// <para>Logical Name = tra_methodofvasoptin</para>
            /// </summary>
            public const string tra_MethodofVASOptin = "tra_methodofvasoptin";

            /// <summary>
            /// <para>Name of Owner</para>
            /// <para>Logical Name = tra_nameofowner</para>
            /// </summary>
            public const string tra_nameofowner = "tra_nameofowner";

            /// <summary>
            /// <para>Name of VAS</para>
            /// <para>Logical Name = tra_nameofvas</para>
            /// </summary>
            public const string tra_NameofVAS = "tra_nameofvas";

            /// <summary>
            /// <para>Notification Status</para>
            /// <para>Logical Name = tra_notificationstatus</para>
            /// </summary>
            public const string tra_notificationstatus = "tra_notificationstatus";

            /// <summary>
            /// <para>tra_notificationstatusName</para>
            /// <para>Logical Name = tra_notificationstatusname</para>
            /// </summary>
            public const string tra_notificationstatusName = "tra_notificationstatusname";

            /// <summary>
            /// <para>Notify Consumer by KPI</para>
            /// <para>Logical Name = tra_notifyconsumerbyid</para>
            /// </summary>
            public const string tra_notifyconsumerbyid = "tra_notifyconsumerbyid";

            /// <summary>
            /// <para>tra_notifyconsumerbyidName</para>
            /// <para>Logical Name = tra_notifyconsumerbyidname</para>
            /// </summary>
            public const string tra_notifyconsumerbyidName = "tra_notifyconsumerbyidname";

            /// <summary>
            /// <para>Operator(archive)</para>
            /// <para>Logical Name = tra_operator</para>
            /// </summary>
            public const string tra_Operator = "tra_operator";

            /// <summary>
            /// <para>Operator SLA Failed</para>
            /// <para>Logical Name = tra_operatorslafailed</para>
            /// </summary>
            public const string tra_operatorslafailed = "tra_operatorslafailed";

            /// <summary>
            /// <para>tra_operatorslafailedName</para>
            /// <para>Logical Name = tra_operatorslafailedname</para>
            /// </summary>
            public const string tra_operatorslafailedName = "tra_operatorslafailedname";

            /// <summary>
            /// <para>Other Contract Duration</para>
            /// <para>Logical Name = tra_othercontractduration</para>
            /// </summary>
            public const string tra_othercontractduration = "tra_othercontractduration";

            /// <summary>
            /// <para>Owner of Disputed Number</para>
            /// <para>Logical Name = tra_ownerofdisputednumber</para>
            /// </summary>
            public const string tra_ownerofdisputednumber = "tra_ownerofdisputednumber";

            /// <summary>
            /// <para>tra_ownerofdisputednumberName</para>
            /// <para>Logical Name = tra_ownerofdisputednumbername</para>
            /// </summary>
            public const string tra_ownerofdisputednumberName = "tra_ownerofdisputednumbername";

            /// <summary>
            /// <para>Package Name</para>
            /// <para>Logical Name = tra_packagename</para>
            /// </summary>
            public const string tra_PackageName = "tra_packagename";

            /// <summary>
            /// <para>Please specify</para>
            /// <para>Logical Name = tra_pleasespecifycomplainttype</para>
            /// </summary>
            public const string tra_pleasespecifycomplainttype = "tra_pleasespecifycomplainttype";

            /// <summary>
            /// <para>PO Box</para>
            /// <para>Logical Name = tra_pobox</para>
            /// </summary>
            public const string tra_pobox = "tra_pobox";

            /// <summary>
            /// <para>Primary Owner</para>
            /// <para>Logical Name = tra_primaryowner</para>
            /// </summary>
            public const string tra_primaryowner = "tra_primaryowner";

            /// <summary>
            /// <para>tra_primaryownerName</para>
            /// <para>Logical Name = tra_primaryownername</para>
            /// </summary>
            public const string tra_primaryownerName = "tra_primaryownername";

            /// <summary>
            /// <para>tra_primaryownerYomiName</para>
            /// <para>Logical Name = tra_primaryowneryominame</para>
            /// </summary>
            public const string tra_primaryownerYomiName = "tra_primaryowneryominame";

            /// <summary>
            /// <para>Queue</para>
            /// <para>Logical Name = tra_queue</para>
            /// </summary>
            public const string tra_queue = "tra_queue";

            /// <summary>
            /// <para>tra_queueName</para>
            /// <para>Logical Name = tra_queuename</para>
            /// </summary>
            public const string tra_queueName = "tra_queuename";

            /// <summary>
            /// <para>Rejection Flag</para>
            /// <para>Logical Name = tra_rejectionflag</para>
            /// </summary>
            public const string tra_rejectionflag = "tra_rejectionflag";

            /// <summary>
            /// <para>tra_rejectionflagName</para>
            /// <para>Logical Name = tra_rejectionflagname</para>
            /// </summary>
            public const string tra_rejectionflagName = "tra_rejectionflagname";

            /// <summary>
            /// <para>CA Request Addl' Info by KPI</para>
            /// <para>Logical Name = tra_requestaddlinfobykpiid</para>
            /// </summary>
            public const string tra_requestaddlinfobykpiid = "tra_requestaddlinfobykpiid";

            /// <summary>
            /// <para>tra_requestaddlinfobykpiidName</para>
            /// <para>Logical Name = tra_requestaddlinfobykpiidname</para>
            /// </summary>
            public const string tra_requestaddlinfobykpiidName = "tra_requestaddlinfobykpiidname";

            /// <summary>
            /// <para>Request Add'l Info from SP by KPI</para>
            /// <para>Logical Name = tra_requestaddlinfofromspbykpiid</para>
            /// </summary>
            public const string tra_requestaddlinfofromspbykpiid = "tra_requestaddlinfofromspbykpiid";

            /// <summary>
            /// <para>tra_requestaddlinfofromspbykpiidName</para>
            /// <para>Logical Name = tra_requestaddlinfofromspbykpiidname</para>
            /// </summary>
            public const string tra_requestaddlinfofromspbykpiidName = "tra_requestaddlinfofromspbykpiidname";

            /// <summary>
            /// <para>Request Info/Docs by KPI</para>
            /// <para>Logical Name = tra_requestinfodocsbykpiid</para>
            /// </summary>
            public const string tra_requestinfodocsbykpiid = "tra_requestinfodocsbykpiid";

            /// <summary>
            /// <para>tra_requestinfodocsbykpiidName</para>
            /// <para>Logical Name = tra_requestinfodocsbykpiidname</para>
            /// </summary>
            public const string tra_requestinfodocsbykpiidName = "tra_requestinfodocsbykpiidname";

            /// <summary>
            /// <para>Review SP feedback by KPI</para>
            /// <para>Logical Name = tra_reviewspfeedbackbykpiid</para>
            /// </summary>
            public const string tra_reviewspfeedbackbykpiid = "tra_reviewspfeedbackbykpiid";

            /// <summary>
            /// <para>tra_reviewspfeedbackbykpiidName</para>
            /// <para>Logical Name = tra_reviewspfeedbackbykpiidname</para>
            /// </summary>
            public const string tra_reviewspfeedbackbykpiidName = "tra_reviewspfeedbackbykpiidname";

            /// <summary>
            /// <para>roundrobin</para>
            /// <para>Logical Name = tra_roundrobin</para>
            /// </summary>
            public const string tra_roundrobin = "tra_roundrobin";

            /// <summary>
            /// <para>tra_roundrobinName</para>
            /// <para>Logical Name = tra_roundrobinname</para>
            /// </summary>
            public const string tra_roundrobinName = "tra_roundrobinname";

            /// <summary>
            /// <para>Satisfaction Level</para>
            /// <para>Logical Name = tra_satisfactionlevel</para>
            /// </summary>
            public const string tra_satisfactionlevel = "tra_satisfactionlevel";

            /// <summary>
            /// <para>tra_satisfactionlevelName</para>
            /// <para>Logical Name = tra_satisfactionlevelname</para>
            /// </summary>
            public const string tra_satisfactionlevelName = "tra_satisfactionlevelname";

            /// <summary>
            /// <para>Scope Acceptance</para>
            /// <para>Logical Name = tra_scopeacceptance</para>
            /// </summary>
            public const string tra_scopeacceptance = "tra_scopeacceptance";

            /// <summary>
            /// <para>Scope Acceptance Date</para>
            /// <para>Logical Name = tra_scopeacceptancedate</para>
            /// </summary>
            public const string tra_scopeacceptancedate = "tra_scopeacceptancedate";

            /// <summary>
            /// <para>tra_scopeacceptanceName</para>
            /// <para>Logical Name = tra_scopeacceptancename</para>
            /// </summary>
            public const string tra_scopeacceptanceName = "tra_scopeacceptancename";

            /// <summary>
            /// <para>Scope Check By KPI</para>
            /// <para>Logical Name = tra_scopecheckkpiid</para>
            /// </summary>
            public const string tra_scopecheckkpiid = "tra_scopecheckkpiid";

            /// <summary>
            /// <para>tra_scopecheckkpiidName</para>
            /// <para>Logical Name = tra_scopecheckkpiidname</para>
            /// </summary>
            public const string tra_scopecheckkpiidName = "tra_scopecheckkpiidname";

            /// <summary>
            /// <para>Send for Consent by KPI</para>
            /// <para>Logical Name = tra_sendforconsentbyid</para>
            /// </summary>
            public const string tra_sendforconsentbyid = "tra_sendforconsentbyid";

            /// <summary>
            /// <para>tra_sendforconsentbyidName</para>
            /// <para>Logical Name = tra_sendforconsentbyidname</para>
            /// </summary>
            public const string tra_sendforconsentbyidName = "tra_sendforconsentbyidname";

            /// <summary>
            /// <para>Service</para>
            /// <para>Logical Name = tra_service</para>
            /// </summary>
            public const string tra_service = "tra_service";

            /// <summary>
            /// <para>tra_serviceName</para>
            /// <para>Logical Name = tra_servicename</para>
            /// </summary>
            public const string tra_serviceName = "tra_servicename";

            /// <summary>
            /// <para>Service Provider</para>
            /// <para>Logical Name = tra_serviceprovider</para>
            /// </summary>
            public const string tra_serviceprovider = "tra_serviceprovider";

            /// <summary>
            /// <para>Service Provider acceptance by KPI</para>
            /// <para>Logical Name = tra_serviceprovideracceptancebyid</para>
            /// </summary>
            public const string tra_serviceprovideracceptancebyid = "tra_serviceprovideracceptancebyid";

            /// <summary>
            /// <para>tra_serviceprovideracceptancebyidName</para>
            /// <para>Logical Name = tra_serviceprovideracceptancebyidname</para>
            /// </summary>
            public const string tra_serviceprovideracceptancebyidName = "tra_serviceprovideracceptancebyidname";

            /// <summary>
            /// <para>Service Provider Case Reference</para>
            /// <para>Logical Name = tra_serviceprovidercasereference</para>
            /// </summary>
            public const string tra_serviceprovidercasereference = "tra_serviceprovidercasereference";

            /// <summary>
            /// <para>tra_serviceproviderName</para>
            /// <para>Logical Name = tra_serviceprovidername</para>
            /// </summary>
            public const string tra_serviceproviderName = "tra_serviceprovidername";

            /// <summary>
            /// <para>Service Subtype</para>
            /// <para>Logical Name = tra_servicesubtype</para>
            /// </summary>
            public const string tra_servicesubtype = "tra_servicesubtype";

            /// <summary>
            /// <para>tra_servicesubtypeName</para>
            /// <para>Logical Name = tra_servicesubtypename</para>
            /// </summary>
            public const string tra_servicesubtypeName = "tra_servicesubtypename";

            /// <summary>
            /// <para>Service Type(archive)</para>
            /// <para>Logical Name = tra_servicetype</para>
            /// </summary>
            public const string tra_ServiceType = "tra_servicetype";

            /// <summary>
            /// <para>Rqs't Settlement Let'r</para>
            /// <para>Logical Name = tra_settlementletterrequested</para>
            /// </summary>
            public const string tra_settlementletterrequested = "tra_settlementletterrequested";

            /// <summary>
            /// <para>tra_settlementletterrequestedName</para>
            /// <para>Logical Name = tra_settlementletterrequestedname</para>
            /// </summary>
            public const string tra_settlementletterrequestedName = "tra_settlementletterrequestedname";

            /// <summary>
            /// <para>Is SP Accept/Reject SLA Expired?</para>
            /// <para>Logical Name = tra_spacceptrejectsla</para>
            /// </summary>
            public const string tra_SPAcceptRejectSLA = "tra_spacceptrejectsla";

            /// <summary>
            /// <para>tra_spacceptrejectslaName</para>
            /// <para>Logical Name = tra_spacceptrejectslaname</para>
            /// </summary>
            public const string tra_spacceptrejectslaName = "tra_spacceptrejectslaname";

            /// <summary>
            /// <para>SP Case Ref.(archive)</para>
            /// <para>Logical Name = tra_spcaserefarchive</para>
            /// </summary>
            public const string tra_SPCaseRefarchive = "tra_spcaserefarchive";

            /// <summary>
            /// <para>SP Feedback by KPI</para>
            /// <para>Logical Name = tra_spfeedbackbykpiid</para>
            /// </summary>
            public const string tra_spfeedbackbykpiid = "tra_spfeedbackbykpiid";

            /// <summary>
            /// <para>tra_spfeedbackbykpiidName</para>
            /// <para>Logical Name = tra_spfeedbackbykpiidname</para>
            /// </summary>
            public const string tra_spfeedbackbykpiidName = "tra_spfeedbackbykpiidname";

            /// <summary>
            /// <para>SP Feedback Received</para>
            /// <para>Logical Name = tra_spfeedbackreceived</para>
            /// </summary>
            public const string tra_spfeedbackreceived = "tra_spfeedbackreceived";

            /// <summary>
            /// <para>tra_spfeedbackreceivedName</para>
            /// <para>Logical Name = tra_spfeedbackreceivedname</para>
            /// </summary>
            public const string tra_spfeedbackreceivedName = "tra_spfeedbackreceivedname";

            /// <summary>
            /// <para>SP Rejection Acceptance Date</para>
            /// <para>Logical Name = tra_sprejectionacceptancedate</para>
            /// </summary>
            public const string tra_sprejectionacceptancedate = "tra_sprejectionacceptancedate";

            /// <summary>
            /// <para>Sp Rejection Accepted</para>
            /// <para>Logical Name = tra_sprejectionaccepted</para>
            /// </summary>
            public const string tra_sprejectionaccepted = "tra_sprejectionaccepted";

            /// <summary>
            /// <para>tra_sprejectionacceptedName</para>
            /// <para>Logical Name = tra_sprejectionacceptedname</para>
            /// </summary>
            public const string tra_sprejectionacceptedName = "tra_sprejectionacceptedname";

            /// <summary>
            /// <para>SP Rejection Date</para>
            /// <para>Logical Name = tra_sprejectiondate</para>
            /// </summary>
            public const string tra_sprejectiondate = "tra_sprejectiondate";

            /// <summary>
            /// <para>Street</para>
            /// <para>Logical Name = tra_street</para>
            /// </summary>
            public const string tra_street = "tra_street";

            /// <summary>
            /// <para>Subscription Status</para>
            /// <para>Logical Name = tra_subscriptionstatus</para>
            /// </summary>
            public const string tra_SubscriptionStatus = "tra_subscriptionstatus";

            /// <summary>
            /// <para>tra_subscriptionstatusName</para>
            /// <para>Logical Name = tra_subscriptionstatusname</para>
            /// </summary>
            public const string tra_subscriptionstatusName = "tra_subscriptionstatusname";

            /// <summary>
            /// <para>Subscription Type</para>
            /// <para>Logical Name = tra_subscriptiontype</para>
            /// </summary>
            public const string tra_subscriptiontype = "tra_subscriptiontype";

            /// <summary>
            /// <para>tra_subscriptiontypeName</para>
            /// <para>Logical Name = tra_subscriptiontypename</para>
            /// </summary>
            public const string tra_subscriptiontypeName = "tra_subscriptiontypename";

            /// <summary>
            /// <para>Sub Service Type(archive)</para>
            /// <para>Logical Name = tra_subservicetype</para>
            /// </summary>
            public const string tra_SubServiceType = "tra_subservicetype";

            /// <summary>
            /// <para>Subtype Issue</para>
            /// <para>Logical Name = tra_subtypeissue</para>
            /// </summary>
            public const string tra_SubtypeIssue = "tra_subtypeissue";

            /// <summary>
            /// <para>Subtype Issue (Contract)</para>
            /// <para>Logical Name = tra_subtypeissuecontract</para>
            /// </summary>
            public const string tra_SubtypeIssueContract = "tra_subtypeissuecontract";

            /// <summary>
            /// <para>tra_subtypeissuecontractName</para>
            /// <para>Logical Name = tra_subtypeissuecontractname</para>
            /// </summary>
            public const string tra_subtypeissuecontractName = "tra_subtypeissuecontractname";

            /// <summary>
            /// <para>tra_subtypeissueName</para>
            /// <para>Logical Name = tra_subtypeissuename</para>
            /// </summary>
            public const string tra_subtypeissueName = "tra_subtypeissuename";

            /// <summary>
            /// <para>Ticket Date</para>
            /// <para>Logical Name = tra_ticketdate</para>
            /// </summary>
            public const string tra_TicketDate = "tra_ticketdate";

            /// <summary>
            /// <para>Ticket Number (DNU)</para>
            /// <para>Logical Name = tra_ticketnumber</para>
            /// </summary>
            public const string tra_TicketNumber = "tra_ticketnumber";

            /// <summary>
            /// <para>Reason of Rejection</para>
            /// <para>Logical Name = tra_tra_reasonofrej</para>
            /// </summary>
            public const string tra_tra_reasonofrej = "tra_tra_reasonofrej";

            /// <summary>
            /// <para>tra_tra_reasonofrejName</para>
            /// <para>Logical Name = tra_tra_reasonofrejname</para>
            /// </summary>
            public const string tra_tra_reasonofrejName = "tra_tra_reasonofrejname";

            /// <summary>
            /// <para>Type of Package</para>
            /// <para>Logical Name = tra_typeofpackage</para>
            /// </summary>
            public const string tra_TypeofPackage = "tra_typeofpackage";

            /// <summary>
            /// <para>VAS Charges Per Transaction</para>
            /// <para>Logical Name = tra_vaschargespertransaction</para>
            /// </summary>
            public const string tra_VASChargesPerTransaction = "tra_vaschargespertransaction";

            /// <summary>
            /// <para>VAS Charges Per Transaction (Base)</para>
            /// <para>Logical Name = tra_vaschargespertransaction_base</para>
            /// </summary>
            public const string tra_vaschargespertransaction_Base = "tra_vaschargespertransaction_base";

            /// <summary>
            /// <para>VAS Charges Total Charges</para>
            /// <para>Logical Name = tra_vaschargestotalcharges</para>
            /// </summary>
            public const string tra_VASChargesTotalCharges = "tra_vaschargestotalcharges";

            /// <summary>
            /// <para>VAS Charges Total Charges (Base)</para>
            /// <para>Logical Name = tra_vaschargestotalcharges_base</para>
            /// </summary>
            public const string tra_vaschargestotalcharges_Base = "tra_vaschargestotalcharges_base";

            /// <summary>
            /// <para>VAS Recurrence</para>
            /// <para>Logical Name = tra_vasrecurrence</para>
            /// </summary>
            public const string tra_VASRecurrence = "tra_vasrecurrence";

            /// <summary>
            /// <para>tra_vasrecurrenceName</para>
            /// <para>Logical Name = tra_vasrecurrencename</para>
            /// </summary>
            public const string tra_vasrecurrenceName = "tra_vasrecurrencename";

            /// <summary>
            /// <para>Voice</para>
            /// <para>Logical Name = tra_voice</para>
            /// </summary>
            public const string tra_Voice = "tra_voice";

            /// <summary>
            /// <para>tra_voiceName</para>
            /// <para>Logical Name = tra_voicename</para>
            /// </summary>
            public const string tra_voiceName = "tra_voicename";

            /// <summary>
            /// <para>Currency</para>
            /// <para>Logical Name = transactioncurrencyid</para>
            /// </summary>
            public const string TransactionCurrencyId = "transactioncurrencyid";

            /// <summary>
            /// <para>TransactionCurrencyIdName</para>
            /// <para>Logical Name = transactioncurrencyidname</para>
            /// </summary>
            public const string TransactionCurrencyIdName = "transactioncurrencyidname";

            /// <summary>
            /// <para>Traversed Path</para>
            /// <para>Logical Name = traversedpath</para>
            /// </summary>
            public const string TraversedPath = "traversedpath";

            /// <summary>
            /// <para>UTC Conversion Time Zone Code</para>
            /// <para>Logical Name = utcconversiontimezonecode</para>
            /// </summary>
            public const string UTCConversionTimeZoneCode = "utcconversiontimezonecode";

            /// <summary>
            /// <para>Version Number</para>
            /// <para>Logical Name = versionnumber</para>
            /// </summary>
            public const string VersionNumber = "versionnumber";

        }

    }
}
